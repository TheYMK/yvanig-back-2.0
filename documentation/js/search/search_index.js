var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.697,1,1.906]],["body/controllers/AppController.html",[0,2.734,1,3.071,2,2.212,3,0.563,4,0.563,5,0.492,6,3.283,7,0.492,8,1.648,9,4.603,10,1.62,11,0.038,12,0.719,13,3.977,14,1.333,15,1.648,16,0.696,17,0.991,18,2.663,19,3.283,20,0.563,21,0.075,22,1.985,23,3.977,24,1.469,25,3.977,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,1.906,29,1.906]],["body/modules/AppModule.html",[1,2.859,2,2.224,3,0.411,4,0.411,5,0.359,8,0.972,11,0.038,12,0.524,14,0.972,16,0.776,17,0.723,18,2.67,19,2.394,20,0.411,21,0.055,22,1.447,26,0.025,27,0.025,28,2.498,29,3.49,30,1.613,31,2.224,32,2.394,33,2.394,34,2.394,35,2.976,36,2.842,37,1.812,38,1.447,39,2.061,40,3.301,41,3.301,42,2.394,43,3.301,44,4.073,45,2.901,46,1.071,47,0.972,48,0.411,49,0.972,50,3.301,51,2.061,52,4,53,2.901,54,3.779,55,2.061,56,4,57,2.394,58,2.394,59,1.812,60,1.182,61,2.842,62,2.394,63,1.812,64,2.901,65,2.901,66,2.901,67,2.901,68,2.224,69,2.901,70,2.901,71,2.901,72,2.901,73,2.901,74,1.306,75,2.901,76,2.901,77,2.901,78,2.901,79,2.901]],["title/injectables/AppService.html",[18,1.523,80,1.023]],["body/injectables/AppService.html",[3,0.588,4,0.588,5,0.513,7,0.513,8,1.691,9,4.671,11,0.037,12,0.75,14,1.391,15,1.691,16,0.588,17,1.035,18,2.519,20,0.588,21,0.078,24,1.533,26,0.031,27,0.031,80,1.691,81,2.308,82,3.426,83,4.15,84,4.15,85,4.15]],["title/guards/AuthGuard.html",[86,2.168,87,1.906]],["body/guards/AuthGuard.html",[3,0.541,4,0.541,5,0.472,7,0.472,8,1.607,11,0.037,12,0.69,14,1.28,16,0.541,17,0.952,20,0.541,21,0.072,24,1.41,26,0.03,27,0.03,46,1.41,47,1.28,48,0.541,49,1.28,60,1.555,87,2.994,88,3.818,89,3.152,90,2.666,91,5.662,92,2.615,93,4.794,94,3.433,95,3.818,96,2.385,97,2.385,98,1.555,99,3.152,100,3.818,101,3.818,102,2.713,103,3.818]],["title/injectables/AuthService.html",[80,1.023,104,1.523]],["body/injectables/AuthService.html",[3,0.126,4,0.126,5,0.11,7,0.11,8,0.525,11,0.038,12,0.571,14,0.961,15,1.603,16,0.513,17,0.222,20,0.126,21,0.017,24,1.059,26,0.01,27,0.01,46,1.167,47,1.059,48,0.448,49,1.059,54,2.814,55,0.633,60,2,68,1.165,74,1.786,80,0.525,81,0.496,92,2.271,97,1.792,104,0.781,105,0.633,106,1.293,107,1.293,108,1.293,109,1.293,110,1.293,111,0.871,112,0.736,113,1.167,114,3.409,115,0.891,116,1.566,117,1.729,118,0.891,119,2.129,120,1.566,121,1.257,122,0.891,123,0.978,124,1.566,125,0.891,126,1.712,127,1.566,128,0.891,129,1.566,130,1.899,131,0.891,132,0.891,133,0.736,134,0.891,135,0.496,136,0.633,137,0.633,138,0.891,139,0.633,140,0.633,141,0.891,142,1.113,143,0.891,144,0.891,145,0.891,146,0.891,147,0.736,148,1.488,149,1.566,150,1.293,151,1.566,152,1.566,153,2.989,154,2.519,155,0.891,156,0.891,157,4.24,158,2.519,159,2.094,160,0.891,161,2.519,162,2.869,163,1.566,164,0.891,165,0.891,166,0.891,167,0.891,168,0.891,169,2.869,170,0.891,171,1.566,172,0.891,173,0.891,174,1.566,175,0.891,176,4.112,177,1.566,178,0.891,179,0.891,180,1.566,181,2.08,182,1.566,183,1.566,184,4.636,185,3.161,186,1.566,187,3.969,188,3.161,189,1.566,190,3.622,191,2.519,192,4.143,193,2.519,194,3.161,195,1.566,196,1.566,197,3.622,198,4.24,199,3.161,200,1.566,201,3.161,202,1.566,203,1.566,204,2.519,205,2.519,206,3.276,207,1.566,208,2.519,209,1.566,210,1.566,211,1.566,212,1.566,213,2.519,214,1.566,215,1.566,216,2.519,217,1.566,218,1.566,219,1.566,220,1.566,221,1.566,222,1.566,223,2.519,224,1.566,225,1.566,226,1.566,227,1.566,228,1.566,229,1.293,230,1.566,231,2.094,232,0.891,233,0.891,234,1.566,235,1.566,236,1.566,237,1.566,238,1.566,239,1.566,240,1.566,241,1.566,242,3.161,243,1.566,244,1.566,245,1.566,246,1.566,247,2.519,248,1.566,249,1.566,250,1.566,251,1.566,252,1.566,253,1.566,254,2.421,255,1.293,256,1.566,257,2.869,258,1.057,259,1.293,260,1.566,261,3.142,262,1.729,263,1.488,264,1.566,265,2.519,266,2.519,267,0.891,268,0.891,269,0.891,270,0.891,271,0.891,272,0.891,273,0.891,274,0.891,275,1.566,276,0.891,277,0.891,278,3.161,279,1.566,280,0.891,281,1.566,282,1.566,283,2.519,284,1.566,285,1.566,286,2.094,287,0.736,288,0.736,289,1.566,290,0.891,291,0.891,292,0.736,293,3.622,294,1.566,295,1.293,296,2.519,297,4.24,298,1.566,299,1.293,300,0.891,301,2.094,302,2.094,303,1.566,304,1.566,305,2.519,306,2.094,307,0.736,308,0.736,309,0.891,310,0.891,311,0.891,312,0.633,313,0.891,314,0.891,315,0.891,316,1.566,317,0.891,318,0.891,319,0.891,320,0.891,321,0.891,322,0.891,323,0.891,324,0.891,325,1.566,326,0.891]],["title/interfaces/ClassConstructor.html",[327,1.373,328,1.697]],["body/interfaces/ClassConstructor.html",[3,0.449,4,0.449,5,0.392,11,0.038,16,0.725,17,0.791,20,0.602,21,0.08,22,1.583,24,1.77,26,0.026,27,0.026,38,2.121,68,1.764,74,1.428,90,1.764,94,2.655,96,2.655,98,1.731,123,2.655,327,1.428,328,2.847,329,2.254,330,1.982,331,2.619,332,3.509,333,3.509,334,3.509,335,2.254,336,2.619,337,2.619,338,2.619,339,1.982,340,2.619,341,2.254,342,2.254,343,2.619,344,2.619,345,1.982,346,2.254,347,2.619,348,1.982,349,2.619,350,3.509,351,3.509,352,4.227,353,2.619,354,3.509,355,3.509,356,3.509,357,2.619,358,2.619,359,2.655,360,3.02,361,2.619,362,2.619]],["title/classes/CreateUserDto.html",[21,0.057,121,1.523]],["body/classes/CreateUserDto.html",[3,0.389,4,0.389,5,0.34,7,0.34,10,1.964,11,0.037,12,0.871,15,1.991,16,0.546,20,0.389,21,0.072,26,0.024,27,0.024,47,1.616,48,0.781,119,3.171,121,1.923,126,1.423,130,2.533,258,1.374,363,1.237,364,4.19,365,2.269,366,1.423,367,3.161,368,3.161,369,3.011,370,2.751,371,3.853,372,2.751,373,2.749,374,2.749,375,3.853,376,2.749,377,2.749,378,2.269,379,2.749,380,3.18,381,3.18,382,3.18,383,3.18,384,2.269,385,2.749,386,3.171,387,1.372,388,3.18,389,3.171,390,3.011,391,1.953,392,1.529,393,2.749,394,2.749,395,2.269,396,1.953,397,2.269]],["title/injectables/CurrentUserMiddleware.html",[80,1.023,398,1.697]],["body/injectables/CurrentUserMiddleware.html",[3,0.431,4,0.431,5,0.376,7,0.376,8,1.385,11,0.038,12,0.747,14,1.02,16,0.713,17,0.759,20,0.431,21,0.057,22,1.519,26,0.025,27,0.025,46,1.527,47,1.385,48,0.585,49,1.385,60,1.684,80,1.385,81,1.692,90,1.692,92,2.342,98,2.144,111,1.692,112,2.512,113,2.005,135,1.692,254,1.692,258,1.255,292,3.412,327,1.37,348,3.145,359,3.145,398,2.298,399,3.335,400,2.162,401,3.044,402,3.412,403,3.874,404,4.156,405,3.044,406,3.044,407,3.412,408,2.937,409,1.519,410,2.512,411,2.512,412,2.512,413,1.692,414,3.412,415,2.512,416,2.512,417,2.512]],["title/classes/EmailVerificationDto.html",[21,0.057,418,1.906]],["body/classes/EmailVerificationDto.html",[3,0.537,4,0.537,5,0.469,7,0.469,10,1.544,11,0.037,12,0.685,15,1.837,16,0.676,20,0.537,21,0.09,26,0.029,27,0.029,48,0.676,126,2.086,258,1.189,363,1.706,366,1.762,369,2.368,370,2.381,372,2.381,386,2.981,387,1.892,389,2.981,390,2.981,392,2.108,418,2.981,419,3.939,420,3.129,421,3.791,422,3.791,423,3.939,424,3.129]],["title/classes/PasswordResetDto.html",[21,0.057,425,1.906]],["body/classes/PasswordResetDto.html",[3,0.465,4,0.465,5,0.406,7,0.406,10,1.771,11,0.037,12,0.786,15,1.926,16,0.616,20,0.465,21,0.082,26,0.027,27,0.027,48,0.735,74,1.957,117,4.024,119,3.373,126,1.606,130,2.169,258,1.294,363,1.477,366,1.606,369,2.715,370,2.59,372,2.59,380,3.589,381,3.589,382,3.589,383,3.589,384,2.709,386,3.045,387,1.637,388,3.589,389,3.045,390,2.715,391,2.331,392,1.825,396,2.331,397,2.709,425,2.715,426,4.024,427,2.709,428,3.281,429,3.281,430,3.281,431,3.281]],["title/interfaces/Request.html",[98,1.243,327,1.373]],["body/interfaces/Request.html",[3,0.472,4,0.472,5,0.412,7,0.412,11,0.038,16,0.74,17,0.831,20,0.472,21,0.063,22,1.663,26,0.027,27,0.027,48,0.472,49,1.472,60,1.789,80,1.472,90,1.854,92,1.663,98,2.127,113,1.815,135,1.854,254,1.854,258,1.389,327,1.5,329,2.368,348,2.744,359,2.744,366,1.622,398,1.854,399,2.368,400,2.368,402,2.752,403,2.752,404,3.626,407,3.626,408,3.121,409,1.663,410,2.752,411,2.752,412,2.752,413,2.904,414,3.626,415,2.752,416,2.752,417,2.752]],["title/classes/SerializeInterceptor.html",[21,0.057,345,1.906]],["body/classes/SerializeInterceptor.html",[3,0.402,4,0.402,5,0.351,7,0.351,8,1.32,11,0.038,12,0.712,14,0.951,16,0.692,17,0.707,20,0.558,21,0.074,22,1.416,24,1.671,26,0.024,27,0.024,38,1.966,46,1.455,47,1.32,48,0.558,49,1.32,68,1.578,74,1.277,90,2.191,94,3.053,96,2.826,98,1.605,111,1.578,123,2.461,327,1.277,328,2.856,330,1.773,331,2.343,332,3.735,333,4.035,334,3.735,335,2.016,336,2.343,337,2.343,338,2.343,339,1.773,340,2.343,341,2.016,342,2.016,343,2.343,344,2.343,345,2.461,346,2.799,347,3.735,348,2.826,349,3.252,350,3.252,351,3.252,352,4.035,353,2.343,354,3.252,355,3.252,356,3.252,357,2.343,358,2.343,359,2.461,360,2.799,361,2.343,362,2.343,363,1.277,432,2.838,433,2.838,434,2.838,435,2.838]],["title/entities/User.html",[258,0.761,436,2.168]],["body/entities/User.html",[3,0.318,4,0.318,5,0.277,7,0.277,10,2.172,11,0.038,12,0.963,15,1.749,16,0.318,20,0.471,21,0.042,26,0.02,27,0.02,48,0.789,68,1.85,126,1.465,130,1.979,258,0.829,312,2.818,366,1.229,367,2.818,368,2.818,372,2.536,436,2.364,437,1.852,438,1.594,439,6.022,440,3.274,441,2.818,442,3.274,443,3.274,444,3.622,445,2.244,446,4.388,447,4.909,448,2.244,449,2.244,450,2.244,451,5.425,452,2.244,453,2.364,454,3.967,455,2.244,456,2.747,457,2.244,458,3.328,459,2.244,460,2.244,461,2.244,462,3.33,463,2.244,464,4.686,465,2.244,466,2.244,467,2.244,468,3.328,469,2.244,470,3.328,471,3.328,472,3.328,473,3.328,474,3.328,475,3.328,476,1.594,477,1.852,478,1.852,479,2.747,480,2.244,481,2.244,482,2.244,483,3.967,484,2.244,485,2.244,486,2.244,487,2.244,488,2.244]],["title/classes/UserCredentialsDto.html",[21,0.057,489,1.906]],["body/classes/UserCredentialsDto.html",[3,0.483,4,0.483,5,0.421,7,0.421,10,1.816,11,0.037,12,0.806,15,1.942,16,0.631,20,0.483,21,0.084,26,0.027,27,0.027,48,0.746,126,2.019,130,2.728,258,1.313,363,1.534,366,1.646,369,2.785,370,2.629,372,2.629,378,2.814,386,3.103,387,1.701,389,3.103,390,2.785,391,2.422,392,1.896,395,2.814,396,2.422,423,3.68,424,2.814,489,2.785,490,4.1,491,2.814,492,3.409,493,3.409,494,3.409]],["title/classes/UserDto.html",[21,0.057,495,1.906]],["body/classes/UserDto.html",[3,0.428,4,0.428,5,0.374,7,0.374,10,2.299,11,0.038,12,1.02,15,1.816,16,0.583,20,0.428,21,0.077,26,0.025,27,0.025,48,0.799,126,1.728,312,3.325,339,1.89,363,1.362,366,1.521,367,3.325,368,3.325,409,1.51,440,3.863,441,3.325,442,3.863,443,3.863,444,4.146,453,2.925,456,3.399,462,3.325,495,2.572,496,2.498,497,6.038,498,3.026,499,3.026,500,3.026,501,3.026,502,3.026,503,3.026,504,3.026,505,3.026]],["title/controllers/UsersController.html",[0,1.697,506,1.906]],["body/controllers/UsersController.html",[0,0.8,2,0.8,3,0.204,4,0.204,5,0.178,7,0.178,8,0.788,10,1.752,11,0.038,12,0.777,14,1.442,16,0.719,17,0.359,20,0.204,21,0.027,24,1.506,26,0.014,27,0.014,37,2.901,38,1.173,46,1.589,47,1.442,48,0.609,49,1.442,51,1.022,60,0.958,63,3.265,87,0.898,92,2.608,97,2.372,104,1.488,106,1.941,107,1.941,108,1.941,109,1.941,110,1.941,111,0.8,113,1.102,119,1.469,121,1.719,126,1.931,130,2.24,135,0.8,139,1.022,140,1.022,148,1.671,181,4.039,254,1.308,258,1.428,259,1.187,263,2.699,287,1.941,360,2.448,370,2.639,387,0.718,409,0.718,413,0.8,418,2.687,425,2.152,489,2.152,495,0.898,506,1.469,507,1.187,508,1.438,509,1.438,510,2.352,511,2.352,512,1.438,513,2.352,514,1.438,515,1.438,516,3.445,517,1.438,518,1.438,519,1.438,520,1.438,521,2.352,522,2.983,523,1.438,524,1.438,525,1.438,526,1.438,527,3.445,528,1.438,529,3.798,530,3.445,531,3.445,532,1.438,533,1.438,534,1.438,535,1.438,536,1.438,537,1.438,538,4.645,539,3.445,540,1.438,541,1.438,542,2.352,543,2.352,544,1.438,545,1.438,546,1.438,547,1.438,548,1.438,549,1.438,550,2.352,551,1.438,552,1.438,553,1.438,554,1.438,555,4.077,556,2.352,557,3.445,558,4.302,559,1.438,560,2.352,561,1.438,562,1.022,563,1.438,564,1.187,565,1.438,566,1.438,567,1.438,568,1.438,569,1.438,570,1.438,571,1.438,572,1.438,573,1.438,574,1.438,575,1.438,576,1.438,577,3.798,578,1.438,579,1.438,580,1.438,581,1.438,582,1.438,583,1.438,584,3.445,585,2.352,586,1.438,587,1.438,588,1.438,589,1.438,590,1.438,591,2.352,592,1.438,593,1.438,594,1.438,595,1.438,596,1.438,597,1.438,598,1.438,599,1.438,600,1.438]],["title/modules/UsersModule.html",[28,1.906,35,1.697]],["body/modules/UsersModule.html",[2,2.303,3,0.432,4,0.432,5,0.377,8,1.023,11,0.038,12,0.552,14,1.023,16,0.812,17,0.761,20,0.432,21,0.057,26,0.025,27,0.025,28,2.587,30,1.697,31,2.303,35,3.144,36,2.943,37,1.907,38,1.523,40,3.419,41,2.52,42,2.52,43,3.419,44,4.161,46,1.127,47,1.023,48,0.432,49,1.023,50,2.52,51,2.169,58,2.52,59,1.907,104,2.712,113,2.007,135,1.697,136,2.169,258,0.761,398,1.697,409,1.523,506,2.936,564,2.52,601,2.52,602,2.52,603,3.052,604,3.052,605,3.052,606,2.169,607,3.052,608,3.052,609,3.052,610,3.052,611,3.052,612,3.052,613,2.52,614,3.052,615,3.052,616,3.052,617,3.052,618,3.052]],["title/injectables/UsersService.html",[80,1.023,113,1.127]],["body/injectables/UsersService.html",[3,0.341,4,0.341,5,0.298,7,0.298,8,1.175,11,0.038,12,0.91,14,1.617,15,1.385,16,0.683,17,0.6,20,0.341,21,0.045,24,1.782,26,0.022,27,0.022,46,1.859,47,1.687,48,0.713,49,1.687,59,1.504,60,1.965,74,1.578,80,1.175,81,1.339,92,2.512,97,2.19,111,1.339,113,1.295,121,2.265,126,1.295,133,1.988,139,1.711,140,1.711,148,1.711,254,1.949,258,1.327,261,2.894,262,2.894,263,2.491,288,2.894,308,2.894,409,1.202,441,2.937,453,3.857,476,1.711,619,1.988,620,3.506,621,3.506,622,3.506,623,3.506,624,2.408,625,4.54,626,2.408,627,3.506,628,3.506,629,2.408,630,3.506,631,2.408,632,3.506,633,2.408,634,3.506,635,2.408,636,3.506,637,4.54,638,4.133,639,2.408,640,2.408,641,2.408,642,2.408,643,2.408,644,2.408,645,2.408,646,2.408,647,3.506,648,2.408,649,2.408,650,2.408]],["title/coverage.html",[651,3.418]],["body/coverage.html",[0,2.158,1,1.735,5,0.343,6,2.293,11,0.038,18,1.386,21,0.102,26,0.024,27,0.024,39,1.974,48,0.393,61,1.974,74,1.25,80,1.623,82,2.293,86,1.974,87,1.735,89,2.293,98,1.132,104,1.386,105,2.758,113,1.026,121,1.386,137,1.974,142,1.974,192,5.038,206,2.293,258,0.967,327,1.747,328,1.545,330,2.794,341,3.178,345,1.735,364,2.293,365,2.293,398,1.545,399,2.758,400,2.758,413,1.545,418,1.735,419,2.293,420,2.293,425,1.735,426,2.293,427,2.293,436,1.974,438,2.758,489,1.735,490,2.293,491,2.293,495,1.735,496,2.293,506,1.735,507,2.293,562,1.974,606,1.974,619,2.293,651,2.293,652,2.778,653,2.778,654,2.778,655,5.096,656,4.843,657,5.616,658,2.293,659,4.843,660,2.293,661,2.293,662,3.881,663,2.293,664,2.293,665,2.293,666,2.778,667,2.778,668,2.778,669,2.778,670,2.778]],["title/dependencies.html",[31,2.037,671,2.113]],["body/dependencies.html",[11,0.038,17,0.89,21,0.086,26,0.028,27,0.028,31,1.986,55,2.538,57,2.948,59,2.231,63,2.87,136,2.538,335,2.538,339,2.231,387,1.782,392,1.986,408,3.264,476,2.538,672,5.363,673,4.595,674,3.572,675,3.572,676,3.572,677,3.572,678,3.572,679,3.572,680,3.572,681,3.572,682,3.572,683,3.572,684,3.572,685,3.572,686,3.572,687,3.572,688,3.572,689,3.572,690,3.572,691,3.572,692,3.572,693,3.572,694,3.572,695,3.572,696,3.572,697,3.572,698,3.572,699,3.572,700,3.572,701,3.572,702,3.572,703,3.572,704,3.572]],["title/miscellaneous/enumerations.html",[705,1.277,706,3.024]],["body/miscellaneous/enumerations.html",[7,0.557,11,0.036,26,0.033,27,0.033,102,3.767,438,3.202,462,3.767,477,3.72,478,3.72,479,4.377,705,2.249,706,3.72,707,4.507]],["title/miscellaneous/functions.html",[705,1.277,708,3.024]],["body/miscellaneous/functions.html",[7,0.519,11,0.035,26,0.031,27,0.031,46,1.878,47,1.704,48,0.72,49,1.704,137,3.612,150,3.467,255,3.467,328,2.827,330,2.624,342,2.984,346,2.984,562,3.612,658,3.467,660,3.467,661,4.513,705,2.096,708,3.467,709,4.2,710,4.2,711,4.2]],["title/index.html",[7,0.316,712,2.56,713,2.56]],["body/index.html",[11,0.034,26,0.034,27,0.034,153,3.922,714,4.751,715,4.751]],["title/modules.html",[30,2.303]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.864,30,2.55,35,2.55,229,4.421,716,5.356,717,5.356,718,5.356]],["title/overview.html",[719,3.418]],["body/overview.html",[2,2.163,11,0.036,18,2.637,26,0.03,27,0.03,29,3.626,30,2.163,31,2.696,32,3.21,33,3.21,34,3.21,35,3.274,36,3.445,37,2.429,38,1.941,81,2.163,86,2.763,104,2.637,113,1.952,295,4.003,299,4.362,307,3.21,329,2.763,363,1.75,437,3.21,601,3.21,602,3.21,719,3.21,720,3.889]],["title/properties.html",[366,1.353,671,2.113]],["body/properties.html",[11,0.037,26,0.033,27,0.033,366,1.679,370,2.268,721,4.546,722,4.546,723,4.546,724,4.546,725,4.546,726,4.546,727,4.546]],["title/miscellaneous/variables.html",[705,1.277,728,3.024]],["body/miscellaneous/variables.html",[7,0.47,11,0.038,24,1.405,26,0.029,27,0.029,39,2.703,48,0.539,60,1.55,61,3.398,62,3.14,63,2.376,94,2.376,96,2.376,98,1.55,99,3.14,102,3.9,105,2.703,123,2.376,142,3.398,147,3.14,372,2.739,413,2.66,606,3.398,613,3.14,663,3.14,664,3.14,665,3.948,705,1.898,728,3.14,729,3.804,730,3.804,731,3.804,732,3.804,733,3.804,734,3.804,735,3.804,736,3.804,737,3.804]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":722,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["0000ee",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["1",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["100",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["123456",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["123456'})@isnotempty()@isstring()@minlength(6",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["16.0.0",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":617,"title":{},"body":{"modules/UsersModule.html":{}}}],["2",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["2.0",{"_index":715,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["2.0.44",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.2",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["4.3.0",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["6.4.4",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["6.7.3",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":720,"title":{},"body":{"overview.html":{}}}],["7.0.3",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["767px",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["8.0.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["987654321",{"_index":431,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["987654321'})@isnotempty()@isstring()@minlength(6",{"_index":428,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["_scrypt",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":477,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["adresse",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["afterinsert",{"_index":470,"title":{},"body":{"entities/User.html":{}}}],["afterremove",{"_index":471,"title":{},"body":{"entities/User.html":{}}}],["afterupdate",{"_index":472,"title":{},"body":{"entities/User.html":{}}}],["agrave",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["align",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["api/auth",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibadrequestresponse",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["apiproperty({type",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["apitags",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('users",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_pipe",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":340,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["async",{"_index":92,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attrs",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth.service",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["authguard",{"_index":87,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["author",{"_index":725,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":104,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["avez",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["avoir",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["avons",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":714,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":352,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["besoin",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["body.newpassword",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.password",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["bonjour,merci",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["bonjour,nous",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["boolean",{"_index":456,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["border",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["browse",{"_index":718,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["buffer",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["callhandler",{"_index":333,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["canactivate",{"_index":91,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{}}}],["car",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["case",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["cet",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["ci",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":328,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["cliquez",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["col",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["col.u",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["collapse",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["color",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":451,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":457,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":463,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":449,"title":{},"body":{"entities/User.html":{}}}],["combination",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["compléter",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["compris",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["compte",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["configure",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["confirmation",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmer",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecter",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"i'm",{"_index":355,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["console.log('user",{"_index":483,"title":{},"body":{"entities/User.html":{}}}],["const",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":607,"title":{},"body":{"modules/UsersModule.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(user",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(dto",{"_index":432,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["constructor(repo",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{}}}],["consumer",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(currentusermiddleware).forroutes",{"_index":618,"title":{},"body":{"modules/UsersModule.html":{}}}],["contactez",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["container",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":99,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["cookiesession",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cordialement",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":651,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["create(user",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["created_at",{"_index":440,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["createdatecolumn",{"_index":474,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn({type",{"_index":445,"title":{},"body":{"entities/User.html":{}}}],["createparamdecorator",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":121,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto.ts",{"_index":491,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:12",{"_index":493,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["credentials.dto.ts:22",{"_index":494,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["cross",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["current_timestamp(6",{"_index":447,"title":{},"body":{"entities/User.html":{}}}],["currentuser",{"_index":413,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentusermiddleware",{"_index":398,"title":{"injectables/CurrentUserMiddleware.html":{}},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["customer",{"_index":479,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["d&rsquo;avoir",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'avoir",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'informations",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'un",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":444,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["de",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["declare",{"_index":410,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["decodedtoken",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.email",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["decorators/current",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["default",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["demand",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["demande",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["des",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["dessous",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["difficult&eacute;s",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["display",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["documentation",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dotenv",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":346,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dtos/create",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/email",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/password",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/user",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/user.dto",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["email",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email')@httpcode(200)@apiokresponse({description",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["email/password",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["emaildata",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["emailverificationdto",{"_index":418,"title":{"classes/EmailVerificationDto.html":{}},"body":{"classes/EmailVerificationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["entities",{"_index":437,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":436,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":464,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":706,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["env.${process.env.node_env",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["excludeextraneousvalues",{"_index":362,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["executioncontext",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exists",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["exists'})@apinotfoundresponse({description",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["expiresin",{"_index":616,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["expose",{"_index":497,"title":{},"body":{"classes/UserDto.html":{}}}],["express",{"_index":408,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["extra",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlbwfpbci6inlpbwthym9zc0bnbwfpbc5jb20ilcjpyxqioje2ndgzmtiwmtqsimv4cci6mty0odmxntyxnh0.slrcrne_1wkyrm5",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["failed",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["false",{"_index":458,"title":{},"body":{"entities/User.html":{}}}],["fetched",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["finaliser",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["find",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["find(email",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(id",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["first_name",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["fixed",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["flex",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroutes",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["function",{"_index":341,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":708,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('whoami",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('whoami')@useguards(authguard)@apiokresponse({description",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":712,"title":{"index.html":{}},"body":{}}],["global",{"_index":411,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["guard",{"_index":86,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":88,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handled",{"_index":353,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["handler",{"_index":354,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["hash",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.tostring('hex",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["height",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["helpers/email",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["hidden",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["html",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(200",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei'})@isnotempty()@isjwt",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["id",{"_index":441,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["ie",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":90,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apinotfoundresponse({description",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["includes",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["incorrect",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherit",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":80,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["inscription",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["inserted",{"_index":484,"title":{},"body":{"entities/User.html":{}}}],["intercept",{"_index":347,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["intercept(context",{"_index":434,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["interface",{"_index":327,"title":{"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{}},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":329,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{},"overview.html":{}}}],["invalid",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["is_email_verified",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":423,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isglobal",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["isnotempty",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isstring",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["john",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@email.com",{"_index":424,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isnotempty()@isemail",{"_index":492,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isstring()@isnotempty()@isemail",{"_index":421,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["join",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["jsonwebtoken",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["jwtconstants",{"_index":606,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":614,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule",{"_index":605,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":612,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["kassai",{"_index":727,"title":{},"body":{"properties.html":{}}}],["kaym",{"_index":726,"title":{},"body":{"properties.html":{}}}],["keys",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["l'&eacute;quipe",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["last",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["last_name",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["layout",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["le",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["left",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":723,"title":{},"body":{"properties.html":{}}}],["lien",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["line",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["logged",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["loginsert",{"_index":482,"title":{},"body":{"entities/User.html":{}}}],["logremove",{"_index":487,"title":{},"body":{"entities/User.html":{}}}],["logupdate",{"_index":485,"title":{},"body":{"entities/User.html":{}}}],["mail",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["map",{"_index":336,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["map((data",{"_index":358,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["margin",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["media",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["merci",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/current",{"_index":608,"title":{},"body":{"modules/UsersModule.html":{}}}],["minlength",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["minlength(6",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["miscellaneous",{"_index":705,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mon",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["mot",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["mso",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["name",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":412,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["nestinterceptor",{"_index":332,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":407,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["never",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/PasswordResetDto.html":{},"classes/SerializeInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetDto.html":{}}}],["newuser",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":348,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["next.handle().pipe",{"_index":357,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nextfunction",{"_index":404,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["nodemailer",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["nous",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["nowrap",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["number",{"_index":453,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(user",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":334,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["onupdate",{"_index":468,"title":{},"body":{"entities/User.html":{}}}],["optional",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":719,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":671,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["passe",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{}}}],["passwordreset",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["passwordreset(@body",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(body",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(token",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetdto",{"_index":425,"title":{"classes/PasswordResetDto.html":{}},"body":{"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["peu",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["plaintoclass",{"_index":338,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plaintoclass(this.dto",{"_index":361,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plus",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["position",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["post",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/password",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register')@apicreatedresponse({description",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/send",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin')@httpcode(200)@apiokresponse({description",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout')@httpcode(200)@apiokresponse({description",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["pour",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["prefix",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":454,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.email",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.token_key",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":349,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["promisify",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["promisify(_scrypt",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":366,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"properties.html":{}}}],["provide",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":439,"title":{},"body":{"entities/User.html":{}}}],["randombytes",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(8).tostring('hex",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["recevez",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(body",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(data",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["reinitialisation",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["rejoint",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["relative",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(id",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["removed",{"_index":488,"title":{},"body":{"entities/User.html":{}}}],["rencontrez",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["repo",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["req",{"_index":406,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["req.currentuser",{"_index":417,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["req.session",{"_index":415,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["request",{"_index":98,"title":{"interfaces/Request.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.session.userid",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require('cookie",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":403,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["reset')@httpcode(200)@apiokresponse({description",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto.ts",{"_index":427,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:13",{"_index":429,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["reset.dto.ts:23",{"_index":430,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["response",{"_index":359,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["result",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["reçu",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["right",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["rimraf",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":442,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["row",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["row:not(.no",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":350,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["running",{"_index":356,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["rxjs",{"_index":335,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":337,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["réinitialisation",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["réinitialiser",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(data.password",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(newpassword",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(password",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":613,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendemailverification(@body",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(body",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(email",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemailwithnodemailer",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sendemailwithnodemailer(emaildata",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["sendpasswordresetemail",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendpasswordresetemail(@body",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(body",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(email",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":360,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(dto",{"_index":342,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serialize(userdto",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["serializeinterceptor",{"_index":345,"title":{"classes/SerializeInterceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["serializeinterceptor(dto",{"_index":344,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["session",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session.userid",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["si",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["signin(@body",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(body",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(email",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":615,"title":{},"body":{"modules/UsersModule.html":{}}}],["signout",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(@session",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(session",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["something",{"_index":351,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../app.module.ts",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.ts",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.entity.ts",{"_index":707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:33",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["src/guards/auth.guard",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/guards/auth.guard.ts",{"_index":89,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guards/auth.guard.ts:4",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/helpers/email.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/interceptors/serialize.interceptor.ts",{"_index":330,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor.ts:19",{"_index":433,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/interceptors/serialize.interceptor.ts:22",{"_index":435,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/main.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/auth.service.ts",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/auth.service.ts:18",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:25",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:369",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:720",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:766",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:783",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/constants/index.ts",{"_index":663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/decorators/current",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/email",{"_index":419,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["src/users/dtos/password",{"_index":426,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["src/users/dtos/user",{"_index":490,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts",{"_index":496,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts:12",{"_index":503,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:15",{"_index":499,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:18",{"_index":504,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:21",{"_index":498,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:24",{"_index":505,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:27",{"_index":502,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:6",{"_index":501,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:9",{"_index":500,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/middlewares/current",{"_index":399,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/users/user.entity.ts",{"_index":438,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.entity.ts:21",{"_index":455,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:24",{"_index":452,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":460,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":450,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":461,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:42",{"_index":466,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:48",{"_index":448,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":469,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":459,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:102",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:109",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:93",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":603,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:23",{"_index":604,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:41",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["started",{"_index":713,"title":{"index.html":{}},"body":{}}],["statements",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["storedhash",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["subject",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["successful",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful'})@apibadrequestresponse({description",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@apibadrequestresponse({description",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":716,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["svg",{"_index":717,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["sysadmin",{"_index":478,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["td",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["text",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.passwordreset(body.token",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.register(body",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.sendemailverification(body.email",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.sendpasswordresetemail(body.email",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.signin(body.email",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.configservice.get('cookie_key",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["this.findone(id",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(data.token",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repo.create(user",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.find",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.findone(id",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.remove(user",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(newuser",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(user",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(userdata",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(decodedtoken.email",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(email",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(userid",{"_index":416,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["this.usersservice.update(user.id",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":446,"title":{},"body":{"entities/User.html":{}}}],["token",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{}}}],["token'})@apibadrequestresponse({description",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["token'})@apinotfoundresponse({description",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["top",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["tour",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["tour@gmail.com",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["tr",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":339,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{}}}],["truthy",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{}}}],["try",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":476,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":611,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["types/cookie",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["ui",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('bad",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":465,"title":{},"body":{"entities/User.html":{}}}],["underline",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["une",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":473,"title":{},"body":{"entities/User.html":{}}}],["unique(['email",{"_index":480,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":724,"title":{},"body":{"properties.html":{}}}],["update",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(id",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":486,"title":{},"body":{"entities/User.html":{}}}],["updated_at",{"_index":443,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["updatedatecolumn",{"_index":475,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn({type",{"_index":467,"title":{},"body":{"entities/User.html":{}}}],["updateduser",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["use",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{}}}],["use(req",{"_index":402,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["useguards",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":331,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["useinterceptors(new",{"_index":343,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["user",{"_index":258,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.decorator",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":409,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.middleware",{"_index":609,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":400,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["user.middleware.ts:15",{"_index":401,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.middleware.ts:18",{"_index":405,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.password.split",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercredentialsdto",{"_index":489,"title":{"classes/UserCredentialsDto.html":{}},"body":{"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userdata",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.token",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":495,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userid",{"_index":414,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["userrole",{"_index":462,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.customer",{"_index":481,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":610,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.length",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["users.service",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":506,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":113,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["util",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["v&eacute;rifier",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["validationpipe",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{},"dependencies.html":{}}}],["value",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":728,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification')@httpcode(200)@apiokresponse({description",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto.ts",{"_index":420,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:13",{"_index":422,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verified",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":721,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["veuillez",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["view",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["visibility",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["void",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["votre",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["vous",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["whitelist",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["whoami",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@currentuser",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(user",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["width",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["world",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["wrap",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["y",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["yvanig",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller('')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, ValidationPipe, MiddlewareConsumer } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nconst cookieSession = require('cookie-session');\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n    }),\n    TypeOrmModule.forRoot(),\n    UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n      }),\n    },\n  ],\n})\nexport class AppModule {\n  constructor(private configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(\n        cookieSession({\n          keys: [this.configService.get('COOKIE_KEY')],\n        }),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/auth.guard.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\n\nexport class AuthGuard implements CanActivate {\n  async canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    return request.session.userId; // truthy value if exist\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(token: string, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:783\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:720\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:766\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { sendEmailWithNodemailer } from '../helpers/email';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { randomBytes, scrypt as _scrypt } from 'crypto';\nimport { promisify } from 'util';\n\nconst scrypt = promisify(_scrypt);\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  async sendEmailVerification(email: string) {\n    const token = this.jwtService.sign({ email });\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: `YVANIG TOUR | Veuillez confirmer votre email`,\n      text: `Merci d'avoir rejoint YVANIG TOUR. Nous avons besoin d'un peu plus d'informations pour compléter votre inscription, y compris une confirmation de votre adresse e-mail.`,\n      html: `\n      \n\n      \n        \n        \n        \n          body {\n            visibility: hidden\n          }\n        \n      \n        \n      \n      \n        \n          .u-row {\n            display: flex;\n            flex-wrap: nowrap;\n            margin-left: 0;\n            margin-right: 0;\n          }\n          \n          .u-row .u-col {\n            position: relative;\n            width: 100%;\n            padding-right: 0;\n            padding-left: 0;\n          }\n          \n          .u-row .u-col.u-col-100 {\n            flex: 0 0 100%;\n            max-width: 100%;\n          }\n          \n          @media (max-width: 767px) {\n            .u-row:not(.no-stack) {\n              flex-wrap: wrap;\n            }\n            .u-row:not(.no-stack) .u-col {\n              flex: 0 0 100%;\n              max-width: 100%;\n            }\n          }\n          \n          body {\n            margin: 0;\n            padding: 0;\n          }\n          \n          table,\n          tr,\n          td {\n            vertical-align: top;\n            border-collapse: collapse;\n          }\n          \n          p {\n            margin: 0;\n          }\n          \n          .ie-container table,\n          .mso-container table {\n            table-layout: fixed;\n          }\n          \n          * {\n            line-height: inherit;\n          }\n          \n          table,\n          td {\n            color: #000000;\n          }\n          \n          a {\n            color: #0000ee;\n            text-decoration: underline;\n          }\n        \n      \n      \n      \n      \n      \n        \n        \n        \n          \n            \n              \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    View Email in Browser\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                      \n      \n                                        \n      \n                                        \n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                      \n      \n                                        \n      \n                                        \n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Merci de nous avoir rejoint !\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    V&eacute;rifier votre adresse email\n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Bonjour,Merci d&rsquo;avoir rejoint YVANIG TOUR.\n                                    Pour finaliser votre inscription, cliquez sur le lien ci-dessous.\n                                    Si vous rencontrez des difficult&eacute;s pour vous connecter &agrave; votre compte, contactez-nous &agrave; yvanig-tour@gmail.com\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                    \n                                      V&eacute;rifier mon email\n                                      \n                                      \n                                    \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Cordialement,\n                                    L'&eacute;quipe YVANIG\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n              \n            \n          \n        \n        \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return {\n      success: true,\n    };\n  }\n\n  async sendPasswordResetEmail(email: string) {\n    // check if user exists\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    const token = this.jwtService.sign({ email });\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: `YVANIG TOUR | Réinitialisation de votre mot de passe`,\n      text: `Vous recevez cet email car vous avez demandé une réinitialisation de votre mot de passe.`,\n      html: `\n      \n\n      \n        \n        \n        \n          body {\n            visibility: hidden\n          }\n        \n      \n        \n      \n      \n        \n          .u-row {\n            display: flex;\n            flex-wrap: nowrap;\n            margin-left: 0;\n            margin-right: 0;\n          }\n          \n          .u-row .u-col {\n            position: relative;\n            width: 100%;\n            padding-right: 0;\n            padding-left: 0;\n          }\n          \n          .u-row .u-col.u-col-100 {\n            flex: 0 0 100%;\n            max-width: 100%;\n          }\n          \n          @media (max-width: 767px) {\n            .u-row:not(.no-stack) {\n              flex-wrap: wrap;\n            }\n            .u-row:not(.no-stack) .u-col {\n              flex: 0 0 100%;\n              max-width: 100%;\n            }\n          }\n          \n          body {\n            margin: 0;\n            padding: 0;\n          }\n          \n          table,\n          tr,\n          td {\n            vertical-align: top;\n            border-collapse: collapse;\n          }\n          \n          p {\n            margin: 0;\n          }\n          \n          .ie-container table,\n          .mso-container table {\n            table-layout: fixed;\n          }\n          \n          * {\n            line-height: inherit;\n          }\n          \n          table,\n          td {\n            color: #000000;\n          }\n          \n          a {\n            color: #0000ee;\n            text-decoration: underline;\n          }\n        \n      \n      \n      \n      \n      \n        \n        \n        \n          \n            \n              \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    View Email in Browser\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                      \n      \n                                        \n      \n                                        \n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                      \n      \n                                        \n      \n                                        \n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Merci de nous avoir rejoint !\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Réinitialiser votre mot de passe\n                                      \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Bonjour,Nous avons reçu votre demande de reinitialisation de mot de passe.\n                                    Pour finaliser votre demande, cliquez sur le lien ci-dessous.\n                                    Si vous rencontrez des difficult&eacute;s pour vous connecter &agrave; votre compte, contactez-nous &agrave; yvanig-tour@gmail.com\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    \n                                    \n                                      V&eacute;rifier mon email\n                                      \n                                      \n                                    \n                                    \n                                  \n      \n                                \n                              \n                            \n                          \n      \n                          \n                            \n                              \n                                \n      \n                                  \n                                    Cordialement,\n                                    L'&eacute;quipe YVANIG\n                                  \n      \n                                \n                              \n                            \n                          \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n                  \n                    \n      \n                      \n                        \n      \n                        \n                      \n      \n                    \n                  \n                \n      \n                \n              \n            \n          \n        \n        \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return {\n      success: true,\n    };\n  }\n\n  async register(data: CreateUserDto) {\n    // check if email has been verified\n    let decodedToken;\n\n    try {\n      decodedToken = await this.jwtService.verify(data.token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // check if user already exists\n    const users = await this.usersService.find(decodedToken.email);\n\n    if (users.length) {\n      throw new BadRequestException('email in use');\n    }\n\n    // Hash the user's password\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(data.password, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n    // 4- Create a new user and save it to the database\n\n    const userData = {\n      ...data,\n      email: decodedToken.email,\n      is_email_verified: true,\n      password: result,\n    };\n\n    delete userData.token;\n\n    const user = await this.usersService.create(userData);\n\n    return user;\n  }\n\n  async signin(email: string, password: string) {\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    const [salt, storedHash] = user.password.split('.');\n    const hash = (await scrypt(password, salt, 32)) as Buffer;\n\n    if (storedHash !== hash.toString('hex')) {\n      throw new UnauthorizedException('bad email/password combination');\n    }\n\n    return user;\n  }\n\n  async passwordReset(token: string, newPassword: string) {\n    let decodedToken;\n\n    try {\n      decodedToken = await this.jwtService.verify(token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    const [user] = await this.usersService.find(decodedToken.email);\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(newPassword, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n\n    // modify user's password\n    const updatedUser = await this.usersService.update(user.id, {\n      password: result,\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first_name\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the first name of the user', default: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the last name of the user', default: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: String,\n    description: 'the first name of the user',\n    default: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the last name of the user',\n    default: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrentUserMiddleware.html":{"url":"injectables/CurrentUserMiddleware.html","title":"injectable - CurrentUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrentUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/middlewares/current-user.middleware.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/users/middlewares/current-user.middleware.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailVerificationDto.html":{"url":"classes/EmailVerificationDto.html","title":"class - EmailVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/email-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/email-verification.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class EmailVerificationDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetDto.html":{"url":"classes/PasswordResetDto.html","title":"class - PasswordResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/password-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the new password of the user', default: '987654321'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class PasswordResetDto {\n  @ApiProperty({\n    type: String,\n    description: 'the new password of the user',\n    default: '987654321',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            currentUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeInterceptor.html":{"url":"classes/SerializeInterceptor.html","title":"class - SerializeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dto: ClassConstructor)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/serialize.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dto\n                                                  \n                                                        \n                                                                        ClassConstructor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/serialize.interceptor.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                first_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_email_verified\n                            \n                            \n                                    Public\n                                last_name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  Unique,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum UserRole {\n  ADMIN = 'sysadmin',\n  CUSTOMER = 'customer',\n}\n@Entity()\n@Unique(['email'])\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public first_name: string;\n\n  @Column()\n  public last_name: string;\n\n  @Column({\n    unique: true,\n  })\n  public email: string;\n\n  @Column()\n  public password: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.CUSTOMER,\n  })\n  public role: UserRole;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n  })\n  public created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n  })\n  public updated_at: Date;\n\n  @Column({\n    default: false,\n  })\n  public is_email_verified: boolean;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('User inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('User updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('User removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCredentialsDto.html":{"url":"classes/UserCredentialsDto.html","title":"class - UserCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserCredentialsDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                is_email_verified\n                            \n                            \n                                last_name\n                            \n                            \n                                role\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose } from 'class-transformer';\nimport { UserRole } from '../user.entity';\n\nexport class UserDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  first_name: string;\n\n  @Expose()\n  last_name: string;\n\n  @Expose()\n  email: string;\n\n  @Expose()\n  role: UserRole;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Expose()\n  is_email_verified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                signOut\n                            \n                            \n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(body: PasswordResetDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/password-reset')@HttpCode(200)@ApiOkResponse({description: 'The password reset was successful'})@ApiBadRequestResponse({description: 'Invalid token'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PasswordResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: CreateUserDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiCreatedResponse({description: 'The user was created successfully'})@ApiBadRequestResponse({description: 'Invalid token'})@ApiBadRequestResponse({description: 'User already exists'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-email-verification')@HttpCode(200)@ApiOkResponse({description: 'The email verification email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send email verification email'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-password-reset-email')@HttpCode(200)@ApiOkResponse({description: 'The password reset email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send password reset email'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(body: UserCredentialsDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged in'})@ApiNotFoundResponse({description: 'User not found'})@ApiUnauthorizedResponse({description: 'Incorrect credentials'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signout')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged out'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoAmI\n                        \n                    \n                \n            \n            \n                \nwhoAmI(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('whoami')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The user was successfully fetched'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Session,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './decorators/current-user.decorator';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { EmailVerificationDto } from './dtos/email-verification.dto';\nimport { PasswordResetDto } from './dtos/password-reset.dto';\nimport { UserCredentialsDto } from './dtos/user-credentials.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiTags('users')\n@Serialize(UserDto)\n@Controller('api/auth')\nexport class UsersController {\n  constructor(\n    private usersService: UsersService,\n    private authService: AuthService,\n  ) {}\n\n  @Post('/send-email-verification')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The email verification email was sent successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to send email verification email',\n  })\n  async sendEmailVerification(@Body() body: EmailVerificationDto) {\n    return this.authService.sendEmailVerification(body.email);\n  }\n\n  @Post('/send-password-reset-email')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset email was sent successfully',\n  })\n  @ApiBadRequestResponse({ description: 'Failed to send password reset email' })\n  async sendPasswordResetEmail(@Body() body: EmailVerificationDto) {\n    return this.authService.sendPasswordResetEmail(body.email);\n  }\n\n  @Post('/password-reset')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset was successful',\n  })\n  @ApiBadRequestResponse({ description: 'Invalid token' })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async passwordReset(@Body() body: PasswordResetDto, @Session() session: any) {\n    session.userId = null;\n    return this.authService.passwordReset(body.token, body.newPassword);\n  }\n\n  @Post('/register')\n  @ApiCreatedResponse({\n    description: 'The user was created successfully',\n  })\n  @ApiBadRequestResponse({ description: 'Invalid token' })\n  @ApiBadRequestResponse({ description: 'User already exists' })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async register(@Body() body: CreateUserDto, @Session() session: any) {\n    const user = await this.authService.register(body);\n    session.userId = user.id;\n    return user;\n  }\n\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The user was successfully logged in',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  @ApiUnauthorizedResponse({ description: 'Incorrect credentials' })\n  async signin(@Body() body: UserCredentialsDto, @Session() session: any) {\n    const user = await this.authService.signin(body.email, body.password);\n    session.userId = user.id;\n    return user;\n  }\n\n  @Get('whoami')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({ description: 'The user was successfully fetched' })\n  whoAmI(@CurrentUser() user: User) {\n    return user;\n  }\n\n  @Post('/signout')\n  @HttpCode(200)\n  @ApiOkResponse({ description: 'The user was successfully logged out' })\n  signOut(@Session() session: any) {\n    session.userId = null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { CurrentUserMiddleware } from './middlewares/current-user.middleware';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, AuthService],\n})\nexport class UsersModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(CurrentUserMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(User) private repo: Repository) {}\n\n  create(user: CreateUserDto) {\n    const newUser = this.repo.create(user);\n\n    return this.repo.save(newUser);\n  }\n\n  findOne(id: number) {\n    const user = this.repo.findOne(id);\n\n    return user;\n  }\n\n  find(email: string) {\n    const users = this.repo.find({ email });\n\n    return users;\n  }\n\n  async update(id: number, attrs: Partial) {\n    const user = await this.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    Object.assign(user, attrs);\n\n    return this.repo.save(user);\n  }\n\n  async remove(id: number) {\n    const user = await this.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    return this.repo.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            cookieSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helpers/email.ts\n            \n            function\n            sendEmailWithNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializeInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            function\n            Serialize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/constants/index.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/email-verification.dto.ts\n            \n            class\n            EmailVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/password-reset.dto.ts\n            \n            class\n            PasswordResetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/user-credentials.dto.ts\n            \n            class\n            UserCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            injectable\n            CurrentUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/cookie-session : ^2.0.44\n        \n            @types/nodemailer : ^6.4.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-session : ^2.0.0\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            nodemailer : ^6.7.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : sysadmin\n                            \n                        \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : customer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            sendEmailWithNodemailer   (src/.../email.ts)\n                        \n                        \n                            Serialize   (src/.../serialize.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/helpers/email.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sendEmailWithNodemailer\n                        \n                    \n                \n            \n            \n                \nsendEmailWithNodemailer(emailData: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Serialize\n                        \n                    \n                \n            \n            \n                \nSerialize(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYVANIG BACKEND 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Kaym Kassai\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cookieSession   (src/.../app.module.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../index.ts)\n                        \n                        \n                            scrypt   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie-session')\n                    \n                \n\n\n        \n    \n\n    src/users/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: never, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return request.currentUser;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/users/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.TOKEN_KEY,\n}\n                    \n                \n\n\n        \n    \n\n    src/users/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(_scrypt)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
