var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminGuard.html",[0,2.899,1,2.121]],["body/guards/AdminGuard.html",[1,3.595,2,4.046,3,0.245,4,0.245,5,0.218,6,4.526,7,3.843,8,6.305,9,0.333,10,1.943,11,5.495,12,4.627,13,0.458,14,5.253,15,1.675,16,0.018,17,1.397,18,0.303,19,1.601,20,3.403,21,1.601,22,2.856,23,0.274,24,1.164,25,0.245,26,0.212,27,2.234,28,2.625,29,4.046,30,4.526,31,2.093,32,2.712,33,5.253,34,4.046,35,2.352,36,0.014,37,0.014]],["title/controllers/AppController.html",[38,1.522,39,2.643]],["body/controllers/AppController.html",[3,0.25,4,0.25,5,0.222,9,0.339,10,1.965,13,0.467,16,0.018,18,0.309,21,1.63,23,0.336,24,1.186,25,0.25,26,0.216,31,1.63,36,0.015,37,0.015,38,2.608,39,4.529,40,2.164,41,4.61,42,7.187,43,0.935,44,5.351,45,4.61,46,4.171,47,4.61,48,3.224,49,3.017,50,3.017,51,2.397,52,5.351,53,4.122,54,1.241,55,5.351]],["title/modules/AppModule.html",[56,1.6,57,2.643]],["body/modules/AppModule.html",[3,0.167,4,0.167,5,0.148,10,1.088,13,0.311,15,1.139,16,0.018,17,1.319,18,0.206,19,1.088,21,1.088,23,0.383,24,0.791,25,0.167,26,0.144,27,1.519,32,2.618,35,2.998,36,0.011,37,0.011,39,4.001,40,2.006,46,4.034,47,3.077,51,1.599,53,2.751,56,2.109,57,5.279,58,1.784,59,2.478,60,3.077,61,3.077,62,3.077,63,4.337,64,3.774,65,4.034,66,4.034,67,4.337,68,2.796,69,1.892,70,1.687,71,2.751,72,2.988,73,2.988,74,3.077,75,4.273,76,5.304,77,3.571,78,4.273,79,2.751,80,4.96,81,3.571,82,4.909,83,2.751,84,4.96,85,3.077,86,2.152,87,1.519,88,3.821,89,3.077,90,2.508,91,3.571,92,3.571,93,3.571,94,3.571,95,3.571,96,3.571,97,3.571,98,2.508,99,2.508,100,3.571,101,3.571,102,3.571,103,3.571,104,3.571,105,5.698,106,2.508,107,3.571,108,3.571,109,4.96,110,2.508,111,3.571,112,3.571,113,4.96,114,4.273,115,4.96,116,5.573,117,4.96,118,3.821,119,4.96,120,5.698,121,4.96,122,3.571,123,2.013,124,3.571,125,3.571,126,3.571,127,3.571,128,3.571,129,3.571,130,3.571,131,3.571,132,3.571,133,3.571,134,3.571,135,3.571,136,3.571,137,3.571,138,1.25,139,3.571,140,3.571,141,3.571,142,3.571,143,3.571]],["title/injectables/AppService.html",[46,2.267,144,1.2]],["body/injectables/AppService.html",[3,0.257,4,0.257,5,0.227,9,0.348,10,1.996,13,0.479,16,0.018,18,0.317,21,1.674,23,0.286,24,1.217,25,0.257,26,0.222,31,1.674,36,0.015,37,0.015,45,4.732,46,3.947,53,5.047,54,1.274,144,2.09,145,2.744,146,4.732,147,7.25,148,5.493,149,5.493,150,4.231,151,4.732,152,5.493]],["title/guards/AuthGuard.html",[0,2.899,153,2.267]],["body/guards/AuthGuard.html",[2,4.103,3,0.249,4,0.249,5,0.221,7,3.875,8,6.329,9,0.337,10,1.96,11,5.541,12,4.649,13,0.464,15,1.699,16,0.018,17,1.416,18,0.307,19,1.623,20,3.45,21,1.623,23,0.278,24,1.18,25,0.249,26,0.215,27,2.265,28,2.661,29,4.103,31,1.623,36,0.015,37,0.015,153,3.875,154,4.589,155,2.66,156,5.326,157,2.265,158,5.326,159,5.326,160,4.103,161,5.326]],["title/injectables/AuthService.html",[144,1.2,162,2.267]],["body/injectables/AuthService.html",[3,0.084,4,0.084,5,0.074,9,0.113,10,0.893,13,0.445,15,1.628,16,0.018,17,1.357,18,0.294,19,1.555,21,1.448,23,0.304,24,0.396,25,0.084,26,0.072,27,2.932,31,1.448,35,1.667,36,0.007,37,0.007,50,1.651,54,1.573,82,4.643,83,1.377,106,1.255,138,2.193,144,0.934,145,0.893,150,3.66,151,3.207,155,2.528,157,1.831,162,1.765,163,1.377,164,2.524,165,2.524,166,2.524,167,2.524,168,2.524,169,1.552,170,1.54,171,2.704,172,5.389,173,1.787,174,2.929,175,3.207,176,1.787,177,3.784,178,2.257,179,2.929,180,2.594,181,1.787,182,3.023,183,2.929,184,1.787,185,3.236,186,2.929,187,1.787,188,2.929,189,3.611,190,1.787,191,0.8,192,0.8,193,1.077,194,1.255,195,1.377,196,1.377,197,1.787,198,0.8,199,1.377,200,1.787,201,2.257,202,1.787,203,1.787,204,1.787,205,1.787,206,2,207,1.008,208,1.54,209,2.243,210,2.929,211,2.524,212,2.929,213,2.929,214,1.787,215,3.722,216,6.139,217,5.626,218,2.929,219,1.787,220,2.929,221,4.305,222,1.787,223,1.787,224,1.787,225,1.787,226,1.787,227,1.787,228,4.751,229,1.787,230,2.929,231,1.787,232,1.787,233,2.929,234,1.787,235,6.139,236,4.305,237,1.787,238,1.787,239,2.929,240,2.929,241,4.305,242,2.929,243,4.305,244,1.765,245,4.305,246,3.075,247,2.929,248,2.929,249,2.929,250,2.929,251,4.305,252,5.626,253,5.626,254,4.305,255,2.929,256,4.305,257,2.929,258,2.929,259,2.929,260,2.929,261,2.929,262,2.929,263,4.305,264,4.305,265,2.929,266,2.929,267,2.929,268,2.929,269,2.929,270,2.929,271,4.305,272,4.305,273,2.594,274,4.305,275,3.709,276,2.929,277,2.929,278,2.929,279,2.929,280,4.305,281,1.787,282,1.787,283,4.305,284,4.305,285,2.929,286,2.929,287,2.929,288,2.929,289,2.929,290,2.929,291,5.104,292,2.929,293,2.929,294,2.929,295,2.929,296,2.929,297,2.929,298,2.929,299,2.929,300,1.787,301,4.305,302,2.929,303,2.929,304,2.929,305,3.379,306,2.524,307,2.929,308,2.929,309,3.66,310,2.057,311,2.929,312,2.749,313,2.867,314,1.667,315,2.929,316,5.389,317,5.389,318,1.787,319,1.787,320,1.787,321,1.787,322,1.787,323,3.722,324,1.787,325,1.787,326,1.787,327,5.104,328,2.594,329,1.787,330,2.594,331,2.427,332,3.709,333,2.929,334,1.765,335,3.722,336,1.787,337,1.54,338,2.929,339,1.787,340,1.54,341,5.626,342,2.524,343,3.709,344,6.267,345,2.929,346,2.524,347,1.787,348,3.722,349,3.722,350,2.524,351,2.929,352,4.305,353,3.722,354,1.787,355,1.185,356,1.787,357,1.787,358,1.787,359,1.377,360,0.893,361,1.787,362,1.787,363,1.312,364,2.929,365,1.787,366,1.787,367,1.54,368,1.54,369,1.787,370,1.787,371,1.787,372,2.524,373,1.787,374,0.8]],["title/entities/Booking.html",[375,1.685,376,1.778]],["body/entities/Booking.html",[3,0.164,4,0.164,5,0.146,9,0.223,13,0.608,16,0.018,18,0.422,23,0.319,25,0.229,26,0.142,32,2.966,36,0.011,37,0.011,43,1.218,273,3.405,375,2.197,376,2.318,377,2.118,378,2.709,379,0.99,380,3.405,381,2.994,382,2.334,383,1.436,384,3.013,385,3.405,386,2.633,387,3.405,388,3.876,389,3.178,390,2.601,391,4.518,392,3.516,393,2.601,394,2.709,395,4.711,396,1.485,397,5.133,398,3.516,399,4.227,400,4.907,401,5.133,402,4.711,403,3.516,404,1.234,405,3.661,406,3.516,407,4.907,408,4.227,409,3.516,410,4.227,411,3.516,412,3.029,413,3.516,414,2.709,415,3.78,416,3.516,417,2.709,418,3.029,419,2.709,420,3.178,421,3.178,422,3.178,423,3.78,424,4.869,425,4.869,426,4.227,427,2.469,428,3.78,429,1.575,430,3.445,431,3.445,432,3.516,433,2.278,434,5.651,435,2.278,436,2.278,437,1.757,438,2.278,439,2.278]],["title/classes/BookingBisDto.html",[26,0.152,440,2.899]],["body/classes/BookingBisDto.html",[3,0.193,4,0.193,5,0.171,9,0.262,13,0.631,16,0.018,18,0.418,23,0.286,25,0.193,26,0.221,31,1.871,36,0.012,37,0.012,43,1.265,379,1.105,380,3.701,381,3.254,383,1.561,385,3.701,387,3.701,388,3.701,393,2.781,404,1.494,440,4.219,441,1.15,442,6.315,443,3.56,444,3.701,445,5.292,446,4.313,447,4.975,448,4.133,449,4.133,450,5.009,451,4.133,452,4.133,453,4.133,454,4.133,455,4.133,456,4.133,457,2.189,458,2.49,459,4.313,460,6.142,461,4.133,462,4.133,463,3.56]],["title/classes/BookingDto.html",[26,0.152,464,2.643]],["body/classes/BookingDto.html",[3,0.204,4,0.204,5,0.181,9,0.277,13,0.639,16,0.018,18,0.423,23,0.296,25,0.204,26,0.23,36,0.013,37,0.013,43,1.28,379,1.146,380,3.803,381,3.344,383,1.604,385,3.803,387,3.803,388,3.803,393,2.842,404,1.508,441,1.216,444,3.803,445,5.438,446,4.432,447,4.954,450,5.077,457,2.315,458,2.633,459,4.432,464,3.989,465,3.765,466,4.37,467,4.37,468,4.862,469,4.37,470,4.37,471,4.37,472,4.37,473,4.37,474,4.37,475,3.765,476,4.37,477,4.37]],["title/interfaces/BookingEvent.html",[478,1.88,479,2.643]],["body/interfaces/BookingEvent.html",[3,0.264,4,0.264,5,0.234,9,0.358,16,0.017,18,0.385,22,3.174,25,0.264,36,0.015,37,0.015,379,1.345,383,1.86,404,1.43,478,2.826,479,4.681,480,3.971,481,4.873,482,4.126]],["title/controllers/BookingsController.html",[38,1.522,483,2.643]],["body/controllers/BookingsController.html",[1,0.95,3,0.079,4,0.079,5,0.07,9,0.107,10,0.85,13,0.401,15,1.468,16,0.018,17,1.224,18,0.265,19,1.402,21,1.6,23,0.321,24,0.373,25,0.079,26,0.068,31,1.79,36,0.006,37,0.006,38,1.128,40,0.681,43,0.804,48,1.015,49,0.95,50,0.95,51,0.754,123,2.594,138,2.609,153,1.015,155,2.491,157,1.957,191,0.754,192,0.754,193,2.502,198,0.754,206,2.202,244,3.433,312,3.184,314,3.318,331,0.95,334,3.71,355,2.222,360,2.075,363,2.46,374,2.757,376,3.508,382,1.582,383,1.492,384,2.786,386,2.523,396,1.117,404,1.15,437,1.394,464,1.183,483,1.959,484,1.451,485,3.571,486,3.571,487,2.79,488,3.571,489,3.571,490,1.685,491,2.69,492,1.685,493,1.807,494,2.69,495,4.378,496,1.451,497,3.858,498,1.183,499,3.536,500,4.064,501,4.064,502,2.313,503,1.685,504,1.685,505,1.685,506,1.685,507,1.685,508,2.69,509,1.451,510,3.31,511,1.685,512,3.483,513,1.685,514,3.077,515,1.685,516,1.685,517,1.451,518,2.149,519,3.688,520,3.077,521,2.79,522,1.685,523,1.685,524,2.69,525,1.685,526,1.685,527,2.508,528,1.685,529,3.213,530,1.183,531,2.916,532,1.183,533,1.807,534,1.091,535,2.981,536,1.807,537,2.981,538,2.69,539,2.69,540,1.091,541,2.751,542,0.49,543,1.298,544,1.298,545,1.015,546,1.183,547,2.594,548,1.183,549,1.298,550,1.183,551,2.152,552,1.451,553,1.685,554,2.404,555,1.183,556,1.451,557,1.091,558,2.594,559,2.438,560,2.981,561,2.981,562,2.981,563,1.685,564,1.685,565,1.451,566,3.571,567,3.199,568,2.019,569,2.69,570,4.602,571,1.183,572,1.685,573,2.796,574,1.685,575,2.981,576,2.981,577,2.69,578,5.71,579,1.807,580,1.959,581,2.981,582,1.298,583,1.183,584,1.685,585,1.451,586,2.69,587,2.69,588,1.298,589,2.508,590,0.892,591,3.077,592,2.751,593,2.751,594,2.79,595,1.298,596,2.508,597,0.95,598,1.685,599,1.298,600,0.892,601,1.183]],["title/modules/BookingsModule.html",[56,1.6,63,2.438]],["body/modules/BookingsModule.html",[3,0.223,4,0.223,5,0.198,16,0.018,23,0.389,24,1.059,25,0.223,26,0.193,36,0.014,37,0.014,40,2.433,56,2.559,58,2.389,59,3.006,63,4.968,64,4.098,65,4.38,66,4.38,68,3.392,69,2.533,70,2.259,72,3.625,73,3.625,86,2.88,87,2.033,376,2.259,458,2.88,483,4.624,551,4.38,552,4.119,602,4.119,603,4.119,604,4.781,605,4.781,606,4.119,607,4.781,608,4.781,609,4.781,610,4.781]],["title/injectables/BookingsService.html",[144,1.2,551,2.267]],["body/injectables/BookingsService.html",[3,0.092,4,0.092,5,0.082,9,0.125,10,0.969,13,0.49,15,1.793,16,0.018,17,1.495,18,0.324,19,1.713,21,1.63,23,0.346,24,0.438,25,0.092,26,0.08,27,2.987,31,1.781,32,1.943,35,2.518,36,0.007,37,0.007,87,0.841,98,1.389,99,1.389,114,1.704,116,1.704,123,1.115,138,2.256,144,1.014,145,0.988,155,2.589,157,2.129,169,1.685,191,0.886,192,0.886,193,1.916,198,0.886,206,2.226,209,2.753,246,1.916,305,3.562,310,1.389,312,2.773,314,2.046,328,2.753,330,2.753,331,2.576,343,3.436,355,2.025,360,1.993,363,2.046,374,2.046,376,2.991,380,1.191,381,1.048,382,2.019,383,1.665,384,2.691,385,3.636,386,2.557,404,1.218,417,1.523,418,1.704,419,1.523,429,0.886,458,1.191,463,1.704,482,3.296,491,2.96,497,3.209,508,1.281,510,2.403,519,1.389,520,1.704,524,1.281,550,1.389,551,1.916,554,2.74,555,1.389,556,1.704,557,1.281,580,2.801,590,1.685,591,1.704,596,1.389,597,1.793,600,1.685,611,1.704,612,1.916,613,2.06,614,3.18,615,1.281,616,2.96,617,3.169,618,2.979,619,3.989,620,4.57,621,1.977,622,2.06,623,3.18,624,1.977,625,1.977,626,2.74,627,3.465,628,1.977,629,1.704,630,1.977,631,3.18,632,1.977,633,2.96,634,1.977,635,1.281,636,1.704,637,1.977,638,1.191,639,1.281,640,1.977,641,4.12,642,5.037,643,1.977,644,1.977,645,5.199,646,3.989,647,3.989,648,1.977,649,3.989,650,1.977,651,1.977,652,1.977,653,1.977,654,1.977,655,1.191,656,1.977,657,1.191,658,1.977,659,1.191,660,1.977,661,1.191,662,1.977,663,1.977,664,3.989,665,1.977,666,1.977,667,1.977,668,1.977,669,1.977,670,1.977,671,3.18,672,1.977,673,1.523,674,1.977,675,3.18,676,3.989,677,2.233,678,1.704,679,2.801,680,1.704,681,1.281,682,1.704,683,1.704,684,1.704,685,1.704,686,2.233,687,2.74,688,1.704,689,1.704,690,1.281,691,1.977,692,1.977,693,1.523,694,1.704,695,1.704,696,3.18,697,2.06,698,1.977,699,1.977,700,3.989,701,3.18,702,5.007,703,1.977,704,1.977,705,3.18,706,1.977,707,1.977,708,1.977,709,1.977,710,3.18,711,1.977,712,3.989,713,4.57,714,1.977,715,3.18,716,1.977,717,3.18,718,1.977,719,1.977,720,3.18,721,1.977,722,1.977,723,1.977,724,1.977,725,1.977]],["title/interfaces/ClassConstructor.html",[478,1.88,726,2.438]],["body/interfaces/ClassConstructor.html",[3,0.22,4,0.22,5,0.195,7,2.839,12,3.862,16,0.018,20,3.862,23,0.358,24,1.044,25,0.279,26,0.241,28,2.979,31,1.993,35,2.11,36,0.014,37,0.014,51,2.11,70,2.817,138,1.649,178,3.63,182,4.186,457,2.496,478,2.354,480,3.309,499,3.361,726,4.453,727,3.309,728,4.059,729,5.136,730,5.136,731,5.136,732,3.63,733,4.059,734,4.059,735,4.059,736,4.059,737,3.63,738,3.63,739,4.059,740,4.059,741,3.309,742,3.63,743,4.059,744,3.309,745,5.136,746,5.922,747,4.059,748,5.136,749,5.136,750,5.136,751,4.059,752,4.059,753,4.186,754,4.593,755,4.059,756,4.059]],["title/classes/CreateBookingDto.html",[26,0.152,491,2.438]],["body/classes/CreateBookingDto.html",[3,0.164,4,0.164,5,0.145,9,0.222,13,0.595,16,0.018,18,0.432,23,0.318,25,0.164,26,0.198,36,0.011,37,0.011,43,1.193,54,1.72,110,3.434,355,1.978,376,1.654,379,0.987,380,3.397,382,1.798,383,1.551,384,2.904,386,1.347,388,3.677,390,2.69,393,2.08,396,1.615,404,1.447,430,3.434,431,3.434,441,0.974,444,3.397,446,3.959,458,2.109,491,3.168,542,1.019,568,2.26,655,3.397,657,3.397,659,3.397,661,3.869,757,6.002,758,2.696,759,2.904,760,3.5,761,3.5,762,3.767,763,3.767,764,3.652,765,3.015,766,3.015,767,3.767,768,2.696,769,2.591,770,3.015,771,3.62,772,3.767,773,3.767,774,3.015,775,3.5,776,3.5,777,3.5,778,3.441,779,3.015,780,3.5,781,3.5,782,3.5,783,2.682,784,1.854,785,2.963,786,3.397,787,2.561,788,1.488,789,1.284,790,3.015,791,4.214,792,4.214,793,2.458,794,2.696,795,2.696,796,1.973,797,2.696,798,3.015]],["title/classes/CreateFlightDto.html",[26,0.152,799,2.438]],["body/classes/CreateFlightDto.html",[3,0.103,4,0.103,5,0.091,9,0.139,13,0.616,16,0.018,17,1.491,18,0.436,22,2.175,23,0.223,25,0.103,26,0.227,32,0.936,36,0.008,37,0.008,43,1.234,54,1.787,118,2.669,379,0.699,382,2.282,385,3.378,390,1.401,393,2.065,396,1.834,404,1.444,441,0.613,497,2.433,542,0.641,559,2.572,568,2.321,759,3.003,764,3.146,769,2.97,783,2.738,784,1.167,785,3.024,786,2.087,787,2.622,788,0.936,789,0.808,796,3.306,799,2.244,800,6.126,801,1.696,802,4.067,803,3.299,804,3.299,805,3.299,806,3.299,807,3.299,808,3.299,809,4.518,810,3.299,811,3.299,812,4.518,813,3.299,814,4.067,815,3.299,816,3.299,817,3.299,818,4.067,819,2.985,820,1.897,821,5.606,822,2.202,823,4.183,824,4.183,825,3.464,826,2.202,827,2.985,828,2.202,829,1.897,830,2.087,831,2.202,832,2.202,833,2.985,834,2.985,835,2.985,836,2.985,837,2.985,838,3.689,839,2.202,840,2.202,841,4.183,842,2.202,843,2.985,844,2.202,845,2.202,846,3.689,847,2.985,848,2.202,849,2.202,850,4.183,851,2.202,852,4.83,853,2.985,854,2.985,855,4.183,856,2.985,857,2.202,858,2.985,859,1.897,860,2.202,861,1.897,862,2.202,863,2.985,864,2.985,865,2.202,866,2.985,867,2.202,868,2.202,869,2.985,870,2.202,871,2.202,872,2.087,873,2.202,874,2.202,875,1.731,876,2.202,877,2.202,878,3.707,879,2.202,880,2.202,881,2.433,882,4.183,883,1.546,884,1.897,885,1.427,886,2.985,887,1.897,888,2.985,889,1.897,890,1.696,891,1.897,892,1.897,893,1.897,894,1.696,895,1.897]],["title/classes/CreatePassengerDto.html",[26,0.152,896,2.438]],["body/classes/CreatePassengerDto.html",[3,0.195,4,0.195,5,0.173,9,0.264,13,0.572,16,0.018,18,0.428,23,0.322,25,0.195,26,0.223,36,0.012,37,0.012,43,1.146,54,1.745,110,3.869,379,1.112,384,2.981,390,2.654,393,2.343,396,1.702,404,1.112,441,1.16,542,1.214,568,2.211,655,3.717,657,3.717,659,3.717,661,4.112,759,2.791,762,4.244,763,4.244,764,3.997,765,3.593,767,4.244,768,3.212,769,2.919,771,3.847,772,4.244,773,4.244,774,3.593,778,3.7,779,3.593,783,2.627,784,2.209,785,2.902,787,2.627,788,1.773,789,1.53,793,2.928,794,3.212,795,3.212,796,2.351,797,3.212,896,3.569,897,5.879,898,3.212,899,4.17,900,4.17,901,4.17,902,4.17,903,2.701]],["title/classes/CreateSeatDto.html",[26,0.152,904,2.438]],["body/classes/CreateSeatDto.html",[3,0.197,4,0.197,5,0.174,9,0.267,13,0.574,16,0.018,18,0.428,22,2.95,23,0.289,25,0.259,26,0.266,35,1.885,36,0.013,37,0.013,43,1.151,54,1.63,379,1.119,382,1.768,383,1.069,386,2.706,390,2.506,396,1.706,404,1.418,441,1.171,444,3.734,482,3.494,542,1.225,568,2.216,638,4.124,673,4.27,759,2.801,783,2.635,784,2.23,785,2.911,786,3.34,787,2.386,788,1.79,789,1.544,796,2.372,872,3.34,875,2.769,881,3.892,885,2.726,904,3.591,905,5.273,906,2.955,907,4.352,908,4.352,909,4.209,910,4.209,911,4.209,912,4.209,913,4.209,914,4.209,915,3.626,916,4.209,917,4.209,918,4.352,919,3.626,920,3.626]],["title/classes/CreateUserDto.html",[26,0.152,180,2.267]],["body/classes/CreateUserDto.html",[3,0.199,4,0.199,5,0.177,9,0.27,13,0.577,16,0.018,17,1.76,18,0.421,23,0.292,25,0.199,26,0.226,36,0.013,37,0.013,43,1.156,54,1.782,177,4.827,180,3.368,185,2.793,189,4.141,206,2.222,379,1.128,396,1.771,441,1.186,542,1.241,558,3.151,568,2.222,759,2.815,783,2.646,785,2.923,787,2.549,789,1.564,875,2.793,921,5.922,922,3.673,923,4.805,924,4.805,925,4.264,926,4.264,927,4.264,928,4.264,929,3.673,930,4.264,931,4.816,932,4.816,933,4.816,934,4.816,935,3.673,936,4.264,937,4.816,938,3.284,939,4.264,940,4.264,941,3.673,942,3.284,943,3.673]],["title/injectables/CurrentUserMiddleware.html",[144,1.2,944,2.438]],["body/injectables/CurrentUserMiddleware.html",[3,0.214,4,0.214,5,0.19,7,2.759,9,0.29,10,1.784,13,0.51,15,1.868,16,0.018,17,1.557,18,0.338,19,1.784,21,1.395,23,0.355,24,1.015,25,0.214,26,0.185,27,2.49,28,3.512,36,0.013,37,0.013,51,2.051,106,4.111,144,1.868,145,2.288,155,2.485,169,2.426,170,3.945,171,3.809,194,3.216,206,2.073,207,2.582,305,2.426,478,2.288,547,2.582,573,3.638,744,4.777,753,4.777,944,3.793,945,4.972,946,3.528,947,4.58,948,5.044,949,5.861,950,4.58,951,4.58,952,5.044,953,4.51,954,3.945,955,3.945,956,3.945,957,4.51,958,3.945,959,3.945,960,3.945]],["title/classes/EmailVerificationDto.html",[26,0.152,961,2.643]],["body/classes/EmailVerificationDto.html",[3,0.248,4,0.248,5,0.22,9,0.336,13,0.462,16,0.018,18,0.37,23,0.334,25,0.248,26,0.259,36,0.015,37,0.015,43,0.926,54,1.662,185,3.666,206,1.954,379,1.294,396,1.557,441,1.475,542,1.543,568,1.954,759,2.254,783,2.469,785,2.727,787,2.469,789,1.945,961,4.504,962,5.525,963,4.568,964,5.302,965,5.302,966,5.525,967,4.568]],["title/entities/Flight.html",[375,1.685,382,1.2]],["body/entities/Flight.html",[3,0.106,4,0.106,5,0.094,9,0.144,13,0.636,16,0.018,18,0.442,22,2.21,23,0.228,25,0.166,26,0.092,32,3.251,36,0.008,37,0.008,43,1.275,54,1.7,273,4.305,375,1.588,376,2.682,377,1.366,379,0.715,381,2.312,382,1.131,383,1.109,386,2.185,387,2.629,389,4.598,390,2.165,391,4.939,393,2.61,394,1.747,395,3.801,396,1.49,397,4.372,404,1.302,405,2.827,410,4.89,414,1.747,415,2.731,419,1.747,420,2.296,421,2.296,422,2.296,423,2.731,428,2.731,429,1.016,433,1.469,435,1.469,436,1.469,437,1.133,438,1.469,439,1.469,510,2.629,559,2.614,568,1.33,769,3.539,788,2.914,802,3.362,803,3.362,804,3.362,805,3.362,806,3.362,807,3.362,808,3.362,809,3.362,810,3.362,811,3.362,812,3.362,813,3.362,814,3.362,815,3.362,816,3.362,817,3.362,818,3.362,830,2.629,875,1.133,878,3.76,890,2.731,894,1.747,968,1.747,969,4.908,970,2.268,971,2.268,972,2.268,973,3.054,974,3.545,975,2.268,976,3.545,977,2.268,978,2.268,979,2.268,980,2.268,981,2.268,982,2.268,983,2.268,984,2.268,985,2.268,986,2.268,987,2.268,988,2.268,989,2.268,990,2.268,991,2.268,992,2.268,993,3.545,994,2.268,995,1.592,996,2.268,997,2.268,998,1.954,999,3.76,1000,3.054,1001,3.054,1002,3.054,1003,3.054,1004,3.054,1005,3.054,1006,3.054,1007,3.054,1008,3.054,1009,3.054,1010,3.054,1011,2.268,1012,2.268,1013,2.268,1014,2.268,1015,2.268,1016,4.364]],["title/controllers/FlightsController.html",[38,1.522,1017,2.643]],["body/controllers/FlightsController.html",[1,1.292,3,0.107,4,0.107,5,0.095,9,0.145,10,1.089,13,0.469,15,1.717,16,0.018,17,1.431,18,0.31,19,1.64,21,1.64,23,0.311,24,0.508,25,0.107,26,0.093,31,1.972,36,0.008,37,0.008,38,1.446,40,0.927,43,0.94,48,1.381,49,1.292,50,1.292,51,1.027,138,2.489,155,2.672,157,2.289,191,1.027,192,1.027,198,1.027,244,3.588,312,3,314,2.898,334,3.588,355,1.777,360,2.48,363,2.223,374,1.968,382,2.398,383,1.513,396,1.307,404,1.277,437,1.786,493,2.316,494,2.316,495,3.99,498,1.61,499,3.912,500,4.496,501,4.496,502,2.847,514,3.786,527,3.086,529,3.694,530,1.61,531,3.486,532,1.61,533,2.316,534,1.485,535,3.486,536,2.316,537,3.694,538,3.216,539,3.486,540,1.485,542,0.667,555,1.61,557,1.485,558,3.034,559,2.851,560,3.486,561,3.486,562,3.486,568,2.151,569,3.486,571,1.61,573,3.034,575,3.486,576,3.486,577,2.847,579,2.847,581,3.216,583,3.086,585,1.975,586,3.486,587,3.486,588,1.766,589,1.61,590,1.215,595,1.766,599,1.766,600,1.215,601,3.086,618,2.328,641,3.385,799,3.216,1017,2.511,1018,1.975,1019,3.575,1020,3.575,1021,3.575,1022,3.575,1023,4.395,1024,2.293,1025,1.766,1026,4.395,1027,2.293,1028,2.293,1029,2.293,1030,2.754,1031,3.385,1032,3.08,1033,2.293,1034,2.293,1035,1.975,1036,5.702,1037,2.293,1038,2.293,1039,3.216,1040,1.975,1041,5.13,1042,2.293,1043,2.293,1044,2.293,1045,3.486,1046,1.975,1047,2.293,1048,1.975,1049,2.293,1050,3.08,1051,1.975,1052,1.975,1053,2.293,1054,2.293,1055,4.146,1056,2.293,1057,5.382,1058,2.293,1059,2.293,1060,2.293,1061,1.975,1062,2.293]],["title/modules/FlightsModule.html",[56,1.6,64,2.121]],["body/modules/FlightsModule.html",[3,0.239,4,0.239,5,0.212,16,0.018,23,0.379,24,1.135,25,0.239,26,0.207,36,0.014,37,0.014,40,2.54,56,2.671,58,2.56,59,3.138,64,4.223,68,3.541,69,2.714,70,2.421,72,3.785,73,3.087,86,3.087,87,2.179,382,1.634,618,4.1,883,3.598,1017,4.77,1052,4.414,1063,4.414,1064,4.414,1065,4.414,1066,5.124,1067,4.839,1068,5.124,1069,5.124]],["title/injectables/FlightsService.html",[144,1.2,618,1.994]],["body/injectables/FlightsService.html",[3,0.149,4,0.149,5,0.132,9,0.202,10,1.395,13,0.563,15,2.058,16,0.018,17,1.716,18,0.372,19,1.966,21,1.889,23,0.337,24,0.706,25,0.149,26,0.129,27,3.026,31,1.889,36,0.01,37,0.01,87,1.356,123,1.797,138,2.38,144,1.46,145,1.593,155,2.833,157,2.636,169,1.689,191,1.428,192,1.428,198,1.428,209,1.921,246,1.921,305,3.669,312,2.977,314,2.398,328,3.527,330,3.527,331,3.3,355,2.166,360,2.676,363,2.621,374,2.398,381,1.689,382,2.242,383,1.575,404,1.398,429,1.428,555,2.238,579,3.469,590,2.425,600,2.425,612,2.758,613,2.965,615,2.065,616,3.792,618,2.425,622,2.965,626,3.944,627,4.18,629,2.746,633,2.965,635,2.065,642,3.944,677,3.214,678,2.746,679,3.761,680,2.746,681,2.065,682,2.746,683,2.746,684,2.746,685,2.746,686,2.238,687,3.944,688,2.746,689,2.746,690,2.065,697,2.965,799,3.792,830,1.921,883,2.238,1039,2.065,1041,4.614,1050,2.746,1051,2.746,1070,2.746,1071,3.188,1072,4.577,1073,3.188,1074,3.188,1075,3.188,1076,3.188,1077,4.577,1078,3.188,1079,3.188,1080,3.188,1081,3.188,1082,4.577,1083,3.188,1084,3.188,1085,4.577,1086,3.188,1087,4.577,1088,3.188]],["title/classes/GetBookingsDto.html",[26,0.152,508,2.438]],["body/classes/GetBookingsDto.html",[3,0.239,4,0.239,5,0.212,9,0.324,13,0.547,16,0.018,18,0.362,23,0.327,25,0.239,26,0.254,32,2.667,36,0.014,37,0.014,43,1.096,54,1.641,123,3.536,246,3.779,379,1.266,396,1.523,441,1.422,508,4.063,542,1.488,596,4.969,677,4.765,679,4.765,783,2.613,787,2.613,789,1.876,1089,5.847,1090,4.404,1091,5.404,1092,5.404,1093,5.112,1094,5.112,1095,4.089]],["title/classes/GetFlightsDto.html",[26,0.152,1039,2.438]],["body/classes/GetFlightsDto.html",[3,0.239,4,0.239,5,0.212,9,0.324,13,0.547,16,0.018,18,0.362,23,0.327,25,0.239,26,0.254,32,2.667,36,0.014,37,0.014,43,1.096,54,1.641,123,3.536,246,3.779,379,1.266,396,1.523,441,1.422,542,1.488,596,4.969,677,4.765,679,4.765,783,2.613,787,2.613,789,1.876,1039,4.063,1091,5.404,1092,5.404,1095,4.089,1096,5.847,1097,4.404,1098,5.112,1099,5.112]],["title/entities/Passenger.html",[375,1.685,384,1.6]],["body/entities/Passenger.html",[3,0.176,4,0.176,5,0.156,9,0.238,13,0.607,16,0.018,18,0.423,23,0.305,25,0.274,26,0.152,32,3.014,36,0.012,37,0.012,43,1.216,54,1.46,206,2.121,273,3.969,375,2.301,376,3.214,377,2.265,379,1.037,383,1.488,384,2.185,389,4.076,390,2.941,391,4.592,393,2.185,396,1.248,401,3.958,402,2.896,404,1.037,405,3.792,408,3.238,412,3.238,420,3.328,421,3.328,422,3.328,424,4.427,426,4.427,427,2.639,429,1.683,433,2.435,435,2.435,436,2.435,437,1.878,438,2.435,439,2.435,510,3.527,550,2.639,655,3.527,657,3.527,659,3.527,661,3.527,769,2.722,771,3.714,778,3.714,788,2.185,793,2.639,969,3.608,973,3.238,995,2.639,998,3.238,999,4.427,1100,2.896,1101,5.138,1102,3.759,1103,3.759,1104,3.759,1105,3.759,1106,3.759,1107,3.759,1108,3.759,1109,4.427,1110,4.427,1111,4.427,1112,4.427,1113,3.759,1114,5.854]],["title/classes/PassengerDto.html",[26,0.152,1115,2.643]],["body/classes/PassengerDto.html",[3,0.221,4,0.221,5,0.196,9,0.299,13,0.632,16,0.018,18,0.418,23,0.311,25,0.221,26,0.241,36,0.014,37,0.014,43,1.266,54,1.596,379,1.205,383,1.664,404,1.388,441,1.314,447,4.96,450,4.597,457,2.501,459,3.315,468,3.637,655,3.944,657,3.944,659,3.944,661,3.944,771,3.69,778,3.69,903,3.059,957,5.043,1115,4.192,1116,4.068,1117,4.722,1118,4.722,1119,4.722,1120,4.722,1121,4.722,1122,4.722,1123,4.722]],["title/controllers/PassengersController.html",[38,1.522,1124,2.643]],["body/controllers/PassengersController.html",[1,1.205,3,0.1,4,0.1,5,0.089,9,0.135,10,1.031,13,0.454,15,1.524,16,0.018,17,1.27,18,0.276,19,1.456,21,1.586,23,0.337,24,0.474,25,0.1,26,0.086,31,1.932,36,0.008,37,0.008,38,1.369,40,0.865,43,0.909,48,1.288,49,1.205,50,1.205,51,0.958,138,2.492,153,1.288,155,2.634,157,2.213,191,0.958,192,0.958,193,2.531,198,0.958,206,2.241,244,3.731,312,3.03,314,2.479,334,3.731,355,1.699,360,2.898,363,2.139,374,2.479,383,1.214,384,3.202,396,1.264,404,1.117,437,1.691,493,2.193,494,3.095,495,3.896,498,1.501,499,3.856,500,4.431,501,4.431,502,2.721,509,1.842,512,3.887,517,2.916,518,2.607,519,3.887,527,2.95,529,3.586,530,1.501,531,2.95,532,1.501,533,2.193,534,1.385,535,3.372,536,2.193,537,3.586,538,3.095,539,3.372,540,1.385,541,3.236,542,0.623,543,1.647,544,1.647,545,1.288,546,1.501,547,2.693,548,1.501,549,1.647,550,1.501,557,1.385,558,2.934,559,2.758,560,3.372,561,3.372,562,3.372,567,3.236,568,2.156,569,3.372,571,1.501,573,2.934,575,3.372,576,3.372,577,2.721,581,3.095,582,4.467,583,2.377,586,3.372,587,3.372,589,2.377,592,3.236,593,2.607,597,1.205,600,1.133,601,2.95,612,1.288,617,2.368,896,3.095,1025,1.647,1030,2.607,1031,1.647,1055,4.01,1115,1.501,1124,2.377,1125,1.842,1126,4.201,1127,4.201,1128,3.385,1129,4.777,1130,4.201,1131,2.138,1132,4.201,1133,2.138,1134,2.138,1135,2.138,1136,2.138,1137,2.138,1138,2.138,1139,4.777,1140,2.138,1141,2.138,1142,2.138,1143,2.138,1144,3.354,1145,2.138,1146,2.138,1147,2.916,1148,2.138,1149,1.842,1150,2.138,1151,2.138,1152,2.138,1153,5.205,1154,2.138,1155,2.138,1156,1.842,1157,2.138,1158,2.138]],["title/modules/PassengersModule.html",[56,1.6,65,2.267]],["body/modules/PassengersModule.html",[3,0.239,4,0.239,5,0.212,16,0.018,23,0.379,24,1.135,25,0.239,26,0.207,36,0.014,37,0.014,40,2.54,56,2.671,58,2.56,59,3.138,65,4.513,68,3.541,69,2.714,70,2.421,72,3.785,73,3.087,86,3.087,87,2.179,384,2.179,617,4.362,903,3.319,1067,4.839,1124,4.77,1149,4.414,1159,4.414,1160,4.414,1161,4.414,1162,5.124,1163,5.124,1164,5.124]],["title/injectables/PassengersService.html",[144,1.2,617,2.121]],["body/injectables/PassengersService.html",[3,0.135,4,0.135,5,0.12,9,0.183,10,1.298,13,0.562,15,1.989,16,0.018,17,1.658,18,0.36,19,1.9,21,1.9,23,0.325,24,0.64,25,0.135,26,0.117,27,2.874,31,1.816,36,0.01,37,0.01,87,1.229,138,2.365,144,1.359,145,1.444,155,2.839,157,2.534,169,2.258,191,1.294,192,1.294,193,3.051,198,1.294,206,2.336,209,1.741,305,3.507,309,4.305,310,2.993,312,2.964,314,1.294,328,3.591,330,3.591,331,3.36,355,2.047,360,2.792,363,2.669,374,2.669,383,1.287,384,3.08,404,1.364,429,1.294,510,3.051,519,2.993,582,4.804,590,2.258,592,2.226,597,2.402,600,2.258,612,3.367,613,2.761,615,1.872,616,3.62,617,2.402,622,2.761,627,3.28,633,3.62,635,1.872,639,1.872,681,2.761,686,3.555,690,1.872,693,3.283,694,3.672,695,3.672,697,2.761,896,3.62,903,1.872,1147,2.489,1156,3.672,1165,2.489,1166,4.262,1167,2.89,1168,4.262,1169,2.89,1170,2.89,1171,2.89,1172,2.89,1173,2.89,1174,2.89,1175,2.89,1176,2.89,1177,2.89,1178,2.89,1179,2.89,1180,4.262,1181,2.89,1182,4.262,1183,4.262,1184,2.993,1185,4.262,1186,2.89,1187,4.262,1188,2.89,1189,2.89,1190,2.89,1191,2.89]],["title/classes/PasswordResetDto.html",[26,0.152,1192,2.643]],["body/classes/PasswordResetDto.html",[3,0.225,4,0.225,5,0.2,9,0.305,13,0.527,16,0.018,18,0.4,23,0.315,25,0.225,26,0.245,36,0.014,37,0.014,43,1.057,54,1.734,138,2.117,175,5.695,177,5.013,185,3.022,189,3.644,206,2.112,379,1.221,396,1.683,441,1.341,542,1.404,568,2.112,759,2.572,783,2.545,785,2.811,787,2.329,789,1.769,931,5.211,932,5.211,933,5.211,934,5.211,935,4.153,937,5.211,938,3.714,942,3.714,943,4.153,1192,4.247,1193,5.695,1194,4.153,1195,4.821,1196,4.821,1197,4.821,1198,4.821]],["title/interfaces/Request.html",[28,1.88,478,1.88]],["body/interfaces/Request.html",[3,0.228,4,0.228,5,0.202,7,2.936,9,0.309,16,0.018,18,0.281,19,1.855,23,0.363,24,1.079,25,0.228,26,0.197,27,2.589,28,3.476,36,0.014,37,0.014,51,2.182,144,1.942,155,1.876,171,3.519,194,3.421,206,2.226,207,2.747,305,2.581,379,1.229,478,2.434,480,3.421,547,3.922,573,2.747,744,4.276,753,4.276,944,3.156,945,3.753,946,3.753,948,4.198,949,5.246,952,5.246,953,4.69,954,4.198,955,4.198,956,4.198,957,4.69,958,4.198,959,4.198,960,4.198]],["title/entities/Seat.html",[375,1.685,386,1.449]],["body/entities/Seat.html",[3,0.192,4,0.192,5,0.17,9,0.26,13,0.592,16,0.018,18,0.417,22,2.92,23,0.284,25,0.255,26,0.166,32,2.967,35,2.441,36,0.012,37,0.012,43,1.186,54,1.264,273,3.929,375,2.441,377,2.472,379,1.1,382,2.358,383,1.555,386,2.098,389,3.965,390,2.745,391,4.52,396,1.583,399,3.535,401,4.199,402,4.199,404,1.1,405,3.965,417,3.161,420,3.531,421,3.531,422,3.531,425,4.696,427,2.881,429,1.837,433,2.658,435,2.658,436,2.658,437,2.05,438,2.658,439,2.658,482,3.45,638,4.09,788,2.318,872,3.284,875,2.723,885,3.531,907,4.298,908,4.298,918,3.827,969,3.827,995,2.881,1199,3.161,1200,4.103,1201,5.45,1202,4.103,1203,4.103,1204,4.103,1205,4.103,1206,4.103,1207,4.103,1208,6.12]],["title/classes/SeatDto.html",[26,0.152,1209,2.643]],["body/classes/SeatDto.html",[3,0.227,4,0.227,5,0.201,9,0.308,13,0.624,16,0.018,18,0.413,22,2.723,23,0.317,25,0.227,26,0.246,36,0.014,37,0.014,43,1.25,54,1.411,379,1.227,383,1.686,404,1.403,441,1.353,444,3.998,447,4.927,450,4.659,457,2.576,459,3.414,468,3.745,475,4.189,482,3.74,638,3.998,907,4.659,908,4.659,1209,4.27,1210,4.189,1211,4.862,1212,4.862,1213,4.862,1214,4.862,1215,4.862,1216,3.745]],["title/controllers/SeatsController.html",[38,1.522,1217,2.643]],["body/controllers/SeatsController.html",[1,1.251,3,0.104,4,0.104,5,0.092,9,0.141,10,1.062,13,0.462,15,1.555,16,0.018,17,1.297,18,0.281,19,1.486,21,1.954,23,0.318,24,0.492,25,0.104,26,0.09,31,1.954,36,0.008,37,0.008,38,1.409,40,0.897,43,0.926,48,1.337,49,1.251,50,1.251,51,0.994,123,2.987,138,2.456,155,2.654,157,2.254,191,0.994,192,0.994,198,0.994,206,1.311,244,3.671,312,3.018,314,2.976,334,3.671,355,1.74,360,2.436,363,2.184,374,1.927,382,1.112,383,1.429,386,2.925,396,1.287,404,1.264,437,2.15,493,2.788,494,2.258,495,3.946,496,1.912,498,2.447,499,3.886,500,4.466,501,4.466,502,2.788,512,3.95,527,3.022,529,3.644,530,1.558,531,3.424,532,1.558,533,2.258,534,1.438,535,3.433,536,2.258,537,3.644,538,3.433,539,3.433,540,1.438,542,0.646,543,1.71,545,1.337,546,1.558,557,1.438,558,2.987,559,2.808,560,3.433,561,3.433,562,3.433,565,1.912,568,2.155,569,3.433,571,1.558,573,2.987,575,3.433,576,3.433,577,3.159,579,1.438,580,3.022,581,3.159,583,3.022,586,3.433,587,3.433,588,1.71,589,1.558,590,1.176,595,1.71,597,1.251,599,1.71,600,1.176,601,3.022,612,1.337,830,3.671,904,3.159,1025,1.71,1030,3.315,1031,3.315,1032,3.003,1035,1.912,1040,1.912,1046,1.912,1184,3.022,1209,1.558,1217,2.447,1218,1.912,1219,3.485,1220,3.485,1221,3.485,1222,4.877,1223,4.304,1224,2.219,1225,2.219,1226,2.219,1227,2.219,1228,3.485,1229,2.219,1230,2.219,1231,2.219,1232,2.219,1233,2.219,1234,2.219,1235,3.424,1236,2.219,1237,3.003,1238,2.219,1239,2.593,1240,1.912,1241,2.219,1242,2.219,1243,2.219,1244,2.219,1245,5.3,1246,4.304,1247,2.219,1248,2.219,1249,2.219,1250,2.219]],["title/modules/SeatsModule.html",[56,1.6,66,2.267]],["body/modules/SeatsModule.html",[3,0.232,4,0.232,5,0.205,16,0.018,23,0.383,24,1.098,25,0.232,26,0.2,36,0.014,37,0.014,40,2.489,56,2.617,58,2.477,59,3.075,64,4.136,66,4.566,68,3.469,69,2.626,70,2.342,72,3.708,73,3.708,86,2.987,87,2.108,386,1.908,606,4.271,1067,4.741,1216,3.818,1217,4.7,1239,4.643,1240,4.271,1251,4.271,1252,4.957,1253,4.271,1254,4.271,1255,4.957,1256,4.957,1257,4.957]],["title/injectables/SeatsService.html",[144,1.2,1239,2.267]],["body/injectables/SeatsService.html",[3,0.141,4,0.141,5,0.125,9,0.191,10,1.34,13,0.57,15,2.019,16,0.018,17,1.683,18,0.365,19,1.929,21,1.929,23,0.349,24,0.668,25,0.141,26,0.122,27,2.905,31,1.929,35,1.969,36,0.01,37,0.01,43,0.527,87,1.282,98,2.117,99,2.117,138,2.344,144,1.402,145,1.507,155,2.881,157,2.692,169,2.329,191,1.35,192,1.35,198,1.35,209,2.649,305,3.549,309,2.323,310,2.117,312,3,314,2.554,328,3.436,330,3.436,331,3.215,355,2.099,360,2.593,363,2.554,374,2.324,382,2.019,383,1.319,386,2.672,404,1.379,429,1.35,479,4.005,482,1.7,510,1.817,579,1.953,580,3.644,590,2.329,597,2.479,600,2.329,612,3.436,613,2.848,615,1.953,616,3.695,618,3.463,622,2.848,627,3.362,633,3.695,635,1.953,636,2.598,645,3.788,681,1.953,686,3.088,690,1.953,697,2.848,830,3.127,904,3.695,1216,2.323,1237,2.598,1239,2.649,1258,2.598,1259,4.397,1260,3.015,1261,4.397,1262,3.015,1263,3.015,1264,3.015,1265,3.015,1266,4.397,1267,4.397,1268,3.015,1269,3.015,1270,3.015,1271,3.015,1272,3.015,1273,3.015,1274,3.015,1275,3.015,1276,3.015,1277,3.015,1278,4.397,1279,3.015,1280,3.015,1281,4.397,1282,3.015,1283,4.397,1284,3.015,1285,3.015,1286,3.015,1287,3.015,1288,3.015,1289,3.015]],["title/classes/SerializeInterceptor.html",[26,0.152,741,2.643]],["body/classes/SerializeInterceptor.html",[3,0.204,4,0.204,5,0.181,7,3.418,9,0.276,10,1.729,12,4.326,13,0.495,15,1.81,16,0.018,17,1.509,18,0.327,19,1.729,20,4.085,21,1.329,23,0.348,24,0.966,25,0.265,26,0.229,28,2.835,31,1.921,35,1.953,36,0.013,37,0.013,51,1.953,70,2.681,138,1.526,169,2.31,178,4.37,182,3.984,441,1.213,457,2.31,478,2.179,499,3.198,726,4.485,727,3.062,728,3.757,729,5.433,730,5.754,731,5.433,732,3.36,733,3.757,734,3.757,735,3.757,736,3.757,737,3.36,738,3.36,739,3.757,740,3.757,741,3.984,742,4.37,743,5.433,744,4.428,745,4.888,746,5.754,747,3.757,748,4.888,749,4.888,750,4.888,751,3.757,752,3.757,753,3.984,754,4.37,755,3.757,756,3.757,1290,4.361,1291,4.361,1292,4.361,1293,4.361]],["title/classes/UpdateBookingDto.html",[26,0.152,524,2.438]],["body/classes/UpdateBookingDto.html",[3,0.209,4,0.209,5,0.185,9,0.283,13,0.556,16,0.018,18,0.412,23,0.352,25,0.209,26,0.233,36,0.013,37,0.013,43,1.115,54,1.338,355,1.808,376,2.113,379,1.164,380,3.845,382,2.036,383,1.713,386,1.722,388,4.062,390,2.332,404,1.486,430,4.049,431,4.049,441,1.244,444,3.845,446,4.482,458,2.694,524,3.736,542,1.302,568,2.177,758,3.445,759,2.714,766,3.853,770,3.853,771,2.521,778,2.521,783,2.596,784,2.369,785,2.867,786,3.845,787,2.22,788,1.902,789,1.641,790,3.853,791,3.853,792,3.853,798,3.853,1095,4.062,1294,5.809,1295,4.472,1296,4.472,1297,4.472,1298,4.472]],["title/classes/UpdateFlightDto.html",[26,0.152,1045,2.643]],["body/classes/UpdateFlightDto.html",[3,0.101,4,0.101,5,0.09,9,0.137,13,0.614,16,0.018,17,1.479,18,0.435,22,2.153,23,0.221,25,0.101,26,0.225,32,0.92,36,0.008,37,0.008,43,1.23,54,1.784,118,2.631,379,0.689,382,2.275,385,3.352,390,1.381,393,2.044,396,1.831,404,1.44,441,0.602,497,2.398,542,0.63,559,2.547,568,2.317,759,2.993,764,3.114,769,2.947,783,2.729,784,1.146,785,3.014,786,2.058,787,2.611,788,0.92,789,0.793,796,3.284,801,1.666,802,4.032,803,3.26,804,3.26,805,3.26,806,3.26,807,3.26,808,3.26,809,4.487,810,3.26,811,3.26,812,4.487,813,3.26,814,4.032,815,3.26,816,3.26,817,3.26,818,4.032,819,2.942,820,1.863,823,4.142,824,4.142,827,2.942,829,1.863,830,2.058,833,2.942,834,2.942,835,2.942,836,2.942,837,2.942,838,3.646,841,4.142,843,2.942,846,3.646,847,2.942,850,4.142,852,4.793,853,2.942,854,2.942,855,4.142,856,2.942,858,2.942,859,1.863,861,1.863,863,2.942,864,2.942,866,2.942,869,2.942,872,2.058,875,1.706,878,3.675,881,2.398,882,4.142,883,1.519,884,1.863,885,1.401,886,2.942,887,1.863,888,2.942,889,1.863,890,1.666,891,1.863,892,1.863,893,1.863,894,1.666,895,1.863,1045,2.398,1095,4.271,1299,6.107,1300,5.563,1301,2.163,1302,3.415,1303,2.163,1304,2.163,1305,2.163,1306,2.163,1307,2.163,1308,2.163,1309,2.163,1310,2.163,1311,2.163,1312,2.163,1313,2.163,1314,2.163,1315,2.163,1316,2.163,1317,2.163,1318,2.163,1319,2.163,1320,2.163,1321,2.163,1322,2.163,1323,2.163,1324,2.163,1325,2.163,1326,2.163,1327,2.163,1328,2.163]],["title/classes/UpdatePassengerDto.html",[26,0.152,1144,2.643]],["body/classes/UpdatePassengerDto.html",[3,0.193,4,0.193,5,0.171,9,0.262,13,0.57,16,0.018,18,0.427,23,0.32,25,0.193,26,0.221,36,0.012,37,0.012,43,1.142,54,1.743,110,3.846,379,1.105,384,2.973,390,2.644,393,2.329,396,1.698,404,1.105,441,1.15,542,1.203,568,2.207,655,3.701,657,3.701,659,3.701,661,4.099,759,2.781,762,4.219,763,4.219,764,3.979,767,4.219,768,3.183,769,2.189,771,3.835,772,4.219,773,4.219,778,3.687,783,2.62,784,2.189,785,2.893,787,2.62,788,1.757,789,1.516,793,2.902,794,3.183,795,3.183,796,2.33,797,3.183,898,3.183,903,2.677,1095,4.099,1144,3.846,1329,5.862,1330,4.133,1331,4.133,1332,4.133,1333,4.133,1334,4.133,1335,4.133,1336,4.133,1337,4.133]],["title/classes/UpdateSeatDto.html",[26,0.152,1235,2.643]],["body/classes/UpdateSeatDto.html",[3,0.205,4,0.205,5,0.182,9,0.278,13,0.551,16,0.018,18,0.423,22,2.997,23,0.297,25,0.266,26,0.271,35,1.964,36,0.013,37,0.013,43,1.105,54,1.649,379,1.149,386,2.737,390,2.557,396,1.726,404,1.149,441,1.22,482,3.565,542,1.277,568,2.166,638,4.179,673,4.387,759,2.689,783,2.577,784,2.324,785,2.846,786,2.643,787,2.435,788,1.865,789,1.609,796,2.473,872,3.431,875,2.845,881,3.999,885,2.841,906,3.08,907,4.44,908,4.44,915,3.779,918,4.44,919,3.779,920,3.779,1095,4.033,1235,3.999,1338,5.156,1339,4.386,1340,4.386,1341,4.386,1342,4.386,1343,4.386,1344,4.386]],["title/entities/User.html",[206,1.147,375,1.685]],["body/entities/User.html",[3,0.158,4,0.158,5,0.14,9,0.214,13,0.612,16,0.018,17,1.271,18,0.433,22,2.694,23,0.177,25,0.223,26,0.137,32,3.202,34,2.608,35,2.14,36,0.011,37,0.011,43,1.227,54,1.603,185,2.767,189,3.336,206,1.456,273,4.076,342,4.771,359,4.265,375,2.14,377,2.04,379,0.964,381,2.934,383,1.528,387,3.336,389,4.264,390,2.565,391,4.835,393,2.558,394,2.608,395,4.633,396,1.678,397,5.071,404,0.964,405,3.587,414,2.608,415,3.681,420,3.095,421,3.095,422,3.095,423,3.681,427,3.888,428,3.681,429,1.516,433,2.193,435,2.193,436,2.193,437,1.692,438,2.193,439,2.193,558,1.909,639,4.109,769,3.66,788,2.938,875,1.692,923,4.265,924,4.265,969,4.852,995,2.378,1184,2.378,1345,2.608,1346,4.771,1347,3.386,1348,3.386,1349,3.386,1350,3.386,1351,3.386,1352,3.386,1353,3.386,1354,3.386,1355,3.386,1356,4.117,1357,3.386,1358,3.386,1359,3.386,1360,5.537]],["title/classes/UserCredentialsDto.html",[26,0.152,1361,2.643]],["body/classes/UserCredentialsDto.html",[3,0.231,4,0.231,5,0.205,9,0.313,13,0.536,16,0.018,18,0.403,23,0.321,25,0.231,26,0.249,36,0.014,37,0.014,43,1.074,54,1.743,185,3.594,189,4.334,206,2.131,379,1.24,396,1.698,441,1.376,542,1.44,568,2.131,759,2.614,783,2.575,785,2.844,787,2.366,789,1.815,929,4.261,938,3.81,941,4.261,942,3.81,966,5.295,967,4.261,1361,4.316,1362,5.761,1363,4.261,1364,4.946,1365,4.946,1366,4.946]],["title/classes/UserDto.html",[26,0.152,1367,2.643]],["body/classes/UserDto.html",[3,0.213,4,0.213,5,0.189,9,0.289,13,0.645,16,0.018,18,0.427,22,2.615,23,0.305,25,0.213,26,0.236,36,0.013,37,0.013,43,1.292,54,1.666,185,3.219,207,2.571,359,4.963,379,1.179,381,3.413,383,1.637,387,3.881,393,2.888,404,1.179,441,1.269,447,5.027,457,2.417,639,4.173,923,4.963,924,4.963,1346,5.55,1367,4.101,1368,3.93,1369,4.561,1370,4.561,1371,4.561,1372,4.561,1373,4.561,1374,4.561,1375,4.561,1376,4.561]],["title/controllers/UsersController.html",[38,1.522,1377,2.643]],["body/controllers/UsersController.html",[3,0.087,4,0.087,5,0.077,9,0.118,10,0.926,13,0.479,15,1.753,16,0.018,17,1.461,18,0.317,19,1.674,21,1.674,23,0.331,24,0.414,25,0.087,26,0.076,31,1.897,36,0.007,37,0.007,38,1.229,40,0.756,43,0.96,48,1.127,49,1.054,50,1.054,51,0.838,69,3.421,70,1.437,79,1.441,90,4.661,106,3.106,138,2.35,153,1.127,155,2.556,157,2.069,162,2.314,164,2.619,165,2.619,166,2.619,167,2.619,168,2.619,177,4.021,180,2.665,185,3.609,189,4.046,191,1.981,192,0.838,193,1.127,198,0.838,199,1.441,206,2.252,207,1.054,244,3.751,312,3.007,313,2.959,314,2.564,332,2.619,334,3.45,340,1.612,355,1.553,363,0.838,367,1.612,368,2.619,374,1.72,396,1.182,493,1.97,494,2.488,495,4.033,499,3.64,500,4.183,501,4.183,502,2.488,518,1.441,529,3.378,533,1.212,534,1.212,535,3.152,536,1.97,537,3.152,538,2.866,539,3.56,540,1.212,541,2.342,542,0.545,544,1.441,545,1.127,546,1.314,547,1.054,549,1.441,558,3.098,559,2.911,560,3.56,561,3.56,562,3.56,567,1.441,568,2.103,569,3.835,573,2.165,575,3.152,576,3.152,577,2.488,578,3.309,581,2.866,586,2.488,587,3.152,593,1.441,693,2.342,754,3.408,961,3.858,1048,1.612,1055,4.233,1061,4.193,1192,3.106,1361,3.106,1367,1.314,1377,2.135,1378,1.612,1379,3.04,1380,3.04,1381,1.871,1382,3.04,1383,1.871,1384,1.871,1385,5.214,1386,1.871,1387,1.871,1388,3.04,1389,1.871,1390,1.871,1391,1.871,1392,1.871,1393,4.424,1394,1.871,1395,5.92,1396,5.214,1397,3.04,1398,5.214,1399,1.871,1400,1.871,1401,1.871,1402,1.871,1403,1.871,1404,1.871,1405,1.871,1406,4.424,1407,1.871,1408,3.04,1409,1.871,1410,3.841,1411,1.871,1412,1.871,1413,1.871,1414,1.871,1415,1.871,1416,1.871,1417,3.04,1418,1.871,1419,1.612,1420,1.871,1421,1.871,1422,1.871,1423,1.871,1424,1.871,1425,1.871,1426,1.871,1427,1.871,1428,1.871,1429,1.871,1430,1.871,1431,1.871,1432,4.866,1433,1.871,1434,1.871,1435,1.871,1436,1.871,1437,1.871,1438,4.424,1439,3.04,1440,1.871,1441,1.871,1442,1.871,1443,1.871,1444,1.871,1445,3.04,1446,1.871,1447,1.871,1448,1.871,1449,1.871,1450,1.871,1451,1.871,1452,1.871,1453,1.871]],["title/modules/UsersModule.html",[56,1.6,67,2.438]],["body/modules/UsersModule.html",[3,0.214,4,0.214,5,0.19,10,1.398,13,0.4,15,1.464,16,0.018,17,1.22,18,0.265,19,1.398,21,1.398,23,0.39,24,1.017,25,0.214,26,0.186,36,0.013,37,0.013,40,2.371,56,2.493,58,2.293,59,2.929,67,4.796,68,3.305,69,2.431,70,2.168,72,3.532,73,2.765,74,3.953,75,5.051,76,5.865,78,3.953,79,3.535,86,2.765,87,1.951,162,4.334,171,3.811,194,3.222,195,3.535,206,1.398,207,2.587,944,2.973,1377,4.536,1419,3.953,1454,3.953,1455,3.953,1456,4.589,1457,4.589,1458,4.589,1459,3.535,1460,4.589,1461,4.589,1462,4.589,1463,4.589,1464,4.589,1465,4.589,1466,3.953,1467,4.589,1468,4.589,1469,4.589,1470,4.589,1471,4.589]],["title/injectables/UsersService.html",[144,1.2,171,1.994]],["body/injectables/UsersService.html",[3,0.165,4,0.165,5,0.146,9,0.224,10,1.5,13,0.582,15,2.128,16,0.018,17,1.774,18,0.385,19,2.033,21,1.963,23,0.336,24,0.783,25,0.165,26,0.143,27,2.969,31,1.963,36,0.011,37,0.011,54,1.314,87,1.502,138,2.335,144,1.57,145,1.765,155,2.876,157,2.74,169,1.871,171,2.608,180,3.692,185,2.459,191,1.582,192,1.582,198,1.582,199,2.721,206,2.189,207,1.991,209,2.128,305,3.627,312,2.886,313,4.364,314,2.744,328,2.128,330,2.128,331,1.991,337,4.881,355,2.291,363,1.582,372,4.241,374,2.204,383,1.44,404,1.431,429,1.582,590,2.608,597,2.775,613,3.189,615,2.288,616,3.97,622,3.189,627,3.67,633,3.97,635,2.288,641,3.792,681,2.288,690,2.288,697,3.189,1472,3.043,1473,4.922,1474,3.532,1475,4.922,1476,3.532,1477,4.922,1478,3.532,1479,3.532,1480,4.922,1481,3.532,1482,3.532,1483,3.532,1484,3.532,1485,3.532,1486,4.922,1487,3.532,1488,3.532,1489,3.532,1490,3.532,1491,4.922,1492,3.532]],["title/coverage.html",[1493,4.43]],["body/coverage.html",[0,3.484,1,1.767,5,0.13,6,2.701,16,0.018,18,0.181,26,0.308,28,1.566,36,0.01,37,0.01,38,2.595,39,2.202,41,2.701,46,1.889,71,2.415,88,2.415,138,1.097,144,2.16,146,2.701,153,1.889,154,2.701,162,1.889,163,3.484,171,1.661,180,1.889,196,2.415,201,2.415,206,1.378,246,4.752,275,2.701,375,2.758,376,2.137,378,3.484,382,1,384,1.923,386,1.741,440,2.415,442,2.701,443,2.701,464,2.202,465,2.701,478,2.651,479,2.202,481,2.701,483,2.202,484,2.701,491,2.031,508,2.031,524,2.031,545,1.889,547,1.767,548,2.202,551,1.889,611,2.701,617,1.767,618,1.661,726,2.031,727,3.726,737,4.087,741,2.202,757,2.701,758,3.484,799,2.031,800,2.701,801,3.484,896,2.031,897,2.701,898,3.484,904,2.031,905,2.415,906,3.176,921,2.701,922,2.701,944,2.031,945,3.484,946,3.484,961,2.202,962,2.701,963,2.701,968,2.415,1017,2.202,1018,2.701,1039,2.031,1045,2.202,1070,2.701,1089,2.701,1090,2.701,1096,2.701,1097,2.701,1100,3.484,1115,2.202,1116,2.701,1124,2.202,1125,2.701,1144,2.202,1165,2.701,1192,2.202,1193,2.701,1194,2.701,1199,3.484,1209,2.202,1210,2.701,1217,2.202,1218,2.701,1235,2.202,1239,1.889,1258,2.701,1294,2.701,1299,2.701,1329,2.701,1338,2.415,1345,3.484,1361,2.202,1362,2.701,1363,2.701,1367,2.202,1368,2.701,1377,2.202,1378,2.701,1459,2.415,1472,2.701,1493,2.701,1494,3.135,1495,3.135,1496,3.135,1497,6.417,1498,5.809,1499,7.232,1500,3.135,1501,6.159,1502,6.159,1503,5.809,1504,6.615,1505,4.523,1506,4.523,1507,5.809,1508,2.701,1509,2.701,1510,2.701,1511,5.809,1512,3.135,1513,2.701,1514,2.701,1515,3.135,1516,3.135]],["title/dependencies.html",[59,2.262,1517,2.705]],["body/dependencies.html",[16,0.018,24,1.113,26,0.251,36,0.014,37,0.014,59,2.509,83,3.869,85,4.327,87,2.136,90,4.357,98,3.527,99,3.527,195,3.869,429,2.249,457,2.661,542,1.462,732,3.869,789,1.843,953,4.78,1518,7.033,1519,6.205,1520,5.022,1521,5.022,1522,5.022,1523,5.022,1524,5.022,1525,5.022,1526,5.022,1527,5.022,1528,5.022,1529,5.022,1530,5.022,1531,5.022,1532,5.022,1533,5.022,1534,5.022,1535,5.022,1536,5.022,1537,5.022,1538,5.022,1539,5.022,1540,5.022,1541,5.022,1542,5.022,1543,5.022,1544,5.022,1545,5.022,1546,5.022,1547,5.022,1548,5.022,1549,5.022,1550,5.022,1551,5.022,1552,5.022,1553,5.022]],["title/miscellaneous/enumerations.html",[1554,1.892,1555,3.901]],["body/miscellaneous/enumerations.html",[9,0.275,16,0.018,34,3.347,36,0.013,37,0.013,160,6.07,378,3.347,382,1.805,388,3.41,430,3.974,431,3.974,638,4.272,639,3.666,771,3.19,778,3.19,872,4.272,875,3.542,878,3.974,905,3.347,906,4.683,918,4.978,968,3.347,1000,4.876,1001,4.876,1002,4.876,1003,4.876,1004,4.876,1005,4.876,1006,4.876,1007,4.876,1008,4.876,1009,4.876,1010,4.876,1100,3.347,1109,4.876,1110,4.876,1111,4.876,1112,4.876,1184,3.051,1199,3.347,1338,3.347,1345,3.347,1356,4.876,1554,2.618,1555,3.743,1556,4.345,1557,4.345,1558,4.345,1559,4.345,1560,5.66,1561,4.345,1562,4.345]],["title/miscellaneous/functions.html",[1554,1.892,1563,3.901]],["body/miscellaneous/functions.html",[9,0.358,15,2.126,16,0.017,17,1.772,18,0.385,19,2.031,36,0.015,37,0.015,196,5.135,211,4.873,306,4.873,545,4.016,726,4.318,727,3.971,738,4.357,742,4.357,1508,4.873,1509,4.873,1510,6.107,1554,3.408,1563,4.873,1564,5.656,1565,5.656,1566,5.656]],["title/index.html",[9,0.199,512,2.205,1567,3.14]],["body/index.html",[16,0.016,36,0.016,37,0.016,150,4.693,1568,6.093,1569,6.093]],["title/modules.html",[58,2.569]],["body/modules.html",[16,0.015,36,0.015,37,0.015,57,3.981,58,2.833,63,3.673,64,3.196,65,3.416,66,3.416,67,3.673,1570,7.571,1571,7.571,1572,7.571,1573,7.571]],["title/overview.html",[1574,4.43]],["body/overview.html",[2,3.405,16,0.018,36,0.013,37,0.013,40,1.787,46,3.824,57,5.377,58,2.208,59,2.859,60,3.808,61,3.808,62,3.808,63,4.886,64,4.142,65,4.368,66,4.474,67,4.696,68,3.226,69,2.342,70,2.089,145,2.208,162,3.824,171,3.362,346,3.808,350,3.808,377,2.663,441,1.23,480,3.104,551,3.824,602,3.808,603,3.808,617,4.087,618,3.841,1063,3.808,1064,3.808,1065,3.808,1159,3.808,1160,3.808,1161,3.808,1239,4.368,1251,3.808,1253,3.808,1254,3.808,1454,3.808,1455,3.808,1574,3.808,1575,5.723,1576,4.42,1577,4.42,1578,4.42]],["title/properties.html",[379,0.914,1517,2.705]],["body/properties.html",[16,0.017,36,0.016,37,0.016,49,3.346,379,1.198,568,1.808,1579,5.935,1580,5.935,1581,5.935,1582,5.935,1583,5.935,1584,5.935]],["title/miscellaneous/variables.html",[1554,1.892,1585,3.901]],["body/miscellaneous/variables.html",[9,0.337,12,3.442,16,0.018,18,0.307,20,3.442,27,2.26,28,2.655,29,4.094,30,4.578,31,1.619,36,0.015,37,0.015,71,4.094,88,4.947,89,4.578,90,3.731,160,5.524,163,4.094,182,3.731,201,4.947,208,4.578,396,1.741,547,3.62,548,3.731,1459,4.947,1466,4.578,1513,4.578,1514,5.533,1554,3.202,1585,4.578,1586,5.314,1587,5.314,1588,5.314,1589,5.314,1590,5.314,1591,5.314,1592,5.314,1593,5.314]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1579,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1506,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1497,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1505,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1501,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1502,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1503,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":764,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["01'})@isstring()@isnotempty",{"_index":765,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["01'})@isstring()@isnotempty()@isoptional",{"_index":1330,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["01t00:00:00.000z",{"_index":888,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["01t00:00:00.000z'})@isstring()@isnotempty",{"_index":825,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["01t00:00:00.000z'})@isstring()@isnotempty()@isoptional",{"_index":1302,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["04",{"_index":562,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["06:00",{"_index":843,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["09",{"_index":1055,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["1",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["1.1.0",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"controllers/SeatsController.html":{}}}],["100",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["1000",{"_index":890,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["1000)@isnotempty",{"_index":848,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["1000)@isnotempty()@isoptional",{"_index":1312,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["1000.00",{"_index":891,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["1000.00'})@isdecimal()@isnotempty",{"_index":870,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["1000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1321,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["10000",{"_index":716,"title":{},"body":{"injectables/BookingsService.html":{}}}],["10:00",{"_index":827,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["123456",{"_index":941,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["123456'})@isnotempty()@isstring()@minlength(6",{"_index":929,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["123456789",{"_index":795,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["123456789'})@isstring()@isnotempty()@length(1",{"_index":768,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["16.0.0",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":763,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["1a",{"_index":919,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["1a'})@isstring()@length(1",{"_index":915,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["1h",{"_index":1470,"title":{},"body":{"modules/UsersModule.html":{}}}],["2",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["2.0",{"_index":1569,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["2.0.44",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":885,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["20)@isnotempty",{"_index":916,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["20)@isnotempty()@isoptional",{"_index":1343,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["200",{"_index":769,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"entities/User.html":{}}}],["200)@isnotempty",{"_index":821,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["200)@isnotempty()@isoptional",{"_index":1300,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["200)@isoptional",{"_index":1332,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["2000.00",{"_index":892,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["2000.00'})@isdecimal()@isnotempty",{"_index":873,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["2000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1323,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["2020",{"_index":824,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["2022",{"_index":561,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["20})@isnumber()@isnotempty",{"_index":831,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["20})@isnumber()@isnotempty()@isoptional",{"_index":1306,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["24",{"_index":1578,"title":{},"body":{"overview.html":{}}}],["3",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["3.0.2",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["3000.00",{"_index":893,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["3000.00'})@isdecimal()@isnotempty",{"_index":876,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["3000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1325,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["32",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.3.0",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":581,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":593,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":577,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["5",{"_index":1576,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1575,"title":{},"body":{"overview.html":{}}}],["6.4.4",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["6.7.3",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1577,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["8202",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["96",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["987654321",{"_index":1198,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["987654321'})@isnotempty()@isstring()@minlength(6",{"_index":1195,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["_scrypt",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["a[x",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["ab",{"_index":819,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ab123",{"_index":884,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ab123'})@isstring()@length(1",{"_index":859,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["admin",{"_index":1184,"title":{},"body":{"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["adminguard",{"_index":1,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"coverage.html":{}}}],["adresse",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["afterinsert",{"_index":420,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["afterremove",{"_index":421,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["afterupdate",{"_index":422,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["airline",{"_index":802,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["airport",{"_index":852,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["airport'})@isstring()@length(1",{"_index":856,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["align",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowed",{"_index":519,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["already",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["am'})@isstring()@isnotempty",{"_index":844,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["am'})@isstring()@isnotempty()@isoptional",{"_index":1311,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["amount",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["api",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["api/auth",{"_index":1430,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/bookings",{"_index":564,"title":{},"body":{"controllers/BookingsController.html":{}}}],["api/flights",{"_index":1054,"title":{},"body":{"controllers/FlightsController.html":{}}}],["api/passengers",{"_index":1152,"title":{},"body":{"controllers/PassengersController.html":{}}}],["api/seats",{"_index":1243,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apibadrequestresponse",{"_index":535,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":536,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":537,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":538,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":539,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":783,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{}}}],["apiproperty({default",{"_index":1091,"title":{},"body":{"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["apiproperty({type",{"_index":759,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{}}}],["apitags",{"_index":540,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apitags('bookings",{"_index":563,"title":{},"body":{"controllers/BookingsController.html":{}}}],["apitags('flights",{"_index":1053,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('passengers",{"_index":1150,"title":{},"body":{"controllers/PassengersController.html":{}}}],["apitags('seats",{"_index":1241,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('users",{"_index":1428,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":541,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_pipe",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":39,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["apply",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":57,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":46,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":736,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["argument",{"_index":1011,"title":{},"body":{"entities/Flight.html":{}}}],["arrival",{"_index":823,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["arrival_date",{"_index":803,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["arrival_time",{"_index":804,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["arrived",{"_index":1007,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["assigned",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["async",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attrs",{"_index":633,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["attrs.flightid",{"_index":701,"title":{},"body":{"injectables/BookingsService.html":{}}}],["attrs.seatid",{"_index":702,"title":{},"body":{"injectables/BookingsService.html":{}}}],["auth.service",{"_index":1419,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["authguard",{"_index":153,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["author",{"_index":1582,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":162,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["autogenerated",{"_index":1358,"title":{},"body":{"entities/User.html":{}}}],["availability",{"_index":673,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["available",{"_index":497,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["avez",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["aviation",{"_index":838,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["aviation'})@isstring()@length(1",{"_index":820,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["avoir",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["avons",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1568,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('a",{"_index":703,"title":{},"body":{"injectables/BookingsService.html":{}}}],["badrequestexception('email",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["badrequestexception('failed",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('invalid",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["base",{"_index":869,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["before",{"_index":746,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["besoin",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["birth",{"_index":762,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["bis.dto.ts",{"_index":443,"title":{},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["bis.dto.ts:12",{"_index":454,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:15",{"_index":449,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:18",{"_index":456,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:26",{"_index":451,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:34",{"_index":455,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:42",{"_index":453,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:6",{"_index":452,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:9",{"_index":448,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["block",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["body.newpassword",{"_index":1441,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.password",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{}}}],["booking",{"_index":376,"title":{"entities/Booking.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["booking'})@apiinternalservererrorresponse({description",{"_index":521,"title":{},"body":{"controllers/BookingsController.html":{}}}],["booking.booking_type",{"_index":667,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.date_of_birth",{"_index":660,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.document_number",{"_index":658,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.document_type",{"_index":656,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.dto",{"_index":554,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["booking.dto.ts",{"_index":758,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["booking.dto.ts:23",{"_index":775,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:24",{"_index":1296,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:33",{"_index":770,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:42",{"_index":766,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:52",{"_index":780,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:63",{"_index":761,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:71",{"_index":777,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:79",{"_index":782,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.entity",{"_index":458,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.flight",{"_index":974,"title":{},"body":{"entities/Flight.html":{}}}],["booking.flight.id",{"_index":461,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["booking.gender",{"_index":662,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.passenger",{"_index":1101,"title":{},"body":{"entities/Passenger.html":{}}}],["booking.passenger.id",{"_index":463,"title":{},"body":{"classes/BookingBisDto.html":{},"injectables/BookingsService.html":{}}}],["booking.seat.id",{"_index":462,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["booking.seatid",{"_index":648,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking_type",{"_index":380,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["bookingbisdto",{"_index":440,"title":{"classes/BookingBisDto.html":{}},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["bookingdto",{"_index":464,"title":{"classes/BookingDto.html":{}},"body":{"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"coverage.html":{}}}],["bookingevent",{"_index":479,"title":{"interfaces/BookingEvent.html":{}},"body":{"interfaces/BookingEvent.html":{},"injectables/SeatsService.html":{},"coverage.html":{}}}],["bookings",{"_index":510,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["bookings'})@apiinternalservererrorresponse({description",{"_index":511,"title":{},"body":{"controllers/BookingsController.html":{}}}],["bookings.controller",{"_index":609,"title":{},"body":{"modules/BookingsModule.html":{}}}],["bookings.dto",{"_index":556,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["bookings.dto.ts",{"_index":1090,"title":{},"body":{"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["bookings.dto.ts:11",{"_index":1094,"title":{},"body":{"classes/GetBookingsDto.html":{}}}],["bookings.dto.ts:19",{"_index":1093,"title":{},"body":{"classes/GetBookingsDto.html":{}}}],["bookings.service",{"_index":552,"title":{},"body":{"controllers/BookingsController.html":{},"modules/BookingsModule.html":{}}}],["bookings/bookings.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["bookingscontroller",{"_index":483,"title":{"controllers/BookingsController.html":{}},"body":{"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"coverage.html":{}}}],["bookingsmodule",{"_index":63,"title":{"modules/BookingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules.html":{},"overview.html":{}}}],["bookingsservice",{"_index":551,"title":{"injectables/BookingsService.html":{}},"body":{"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"coverage.html":{},"overview.html":{}}}],["bookingtypes",{"_index":388,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["bookingtypes})@isstring()@isnotempty()@isenum(bookingtypes",{"_index":760,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["bookingtypes})@isstring()@isnotempty()@isenum(bookingtypes)@isoptional",{"_index":1295,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["boolean",{"_index":22,"title":{},"body":{"guards/AdminGuard.html":{},"interfaces/BookingEvent.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":1510,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["border",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["bouton",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["box",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["browse",{"_index":1573,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1570,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["business",{"_index":872,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["callhandler",{"_index":730,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["canactivate",{"_index":8,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":11,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["cancelled",{"_index":1008,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["capacity",{"_index":805,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["car",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["cascade",{"_index":402,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{}}}],["cascade'})@joincolumn",{"_index":408,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["case",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["catch",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":587,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["catch(async",{"_index":574,"title":{},"body":{"controllers/BookingsController.html":{}}}],["ce",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["cet",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["ci",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":1013,"title":{},"body":{"entities/Flight.html":{}}}],["class",{"_index":26,"title":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["class_type",{"_index":907,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["classconstructor",{"_index":726,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":441,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["classtypes",{"_index":638,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["classtypes.business",{"_index":723,"title":{},"body":{"injectables/BookingsService.html":{}}}],["classtypes.economy",{"_index":1207,"title":{},"body":{"entities/Seat.html":{}}}],["classtypes.first",{"_index":721,"title":{},"body":{"injectables/BookingsService.html":{}}}],["cliquez",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bookingsmodule",{"_index":602,"title":{},"body":{"modules/BookingsModule.html":{},"overview.html":{}}}],["cluster_bookingsmodule_imports",{"_index":604,"title":{},"body":{"modules/BookingsModule.html":{}}}],["cluster_bookingsmodule_providers",{"_index":603,"title":{},"body":{"modules/BookingsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule",{"_index":1063,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":1065,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":1064,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_passengersmodule",{"_index":1159,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_passengersmodule_exports",{"_index":1160,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_passengersmodule_providers",{"_index":1161,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1251,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1253,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_imports",{"_index":1252,"title":{},"body":{"modules/SeatsModule.html":{}}}],["cluster_seatsmodule_providers",{"_index":1254,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1454,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1455,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["color",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["column({type",{"_index":389,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["comoros",{"_index":846,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["comoros'})@isstring()@length(1",{"_index":861,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["company",{"_index":834,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["company_logo",{"_index":806,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["compléter",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["compris",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["compte",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["configure",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["confirmation",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirme",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmer",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecter",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"i'm",{"_index":749,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["console.log('booking",{"_index":434,"title":{},"body":{"entities/Booking.html":{}}}],["console.log('flight",{"_index":1016,"title":{},"body":{"entities/Flight.html":{}}}],["console.log('passenger",{"_index":1114,"title":{},"body":{"entities/Passenger.html":{}}}],["console.log('seat",{"_index":1208,"title":{},"body":{"entities/Seat.html":{}}}],["console.log('user",{"_index":1360,"title":{},"body":{"entities/User.html":{}}}],["console.log(removedpassenger",{"_index":1191,"title":{},"body":{"injectables/PassengersService.html":{}}}],["const",{"_index":27,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1460,"title":{},"body":{"modules/UsersModule.html":{}}}],["constructor",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(flight",{"_index":1079,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(@injectrepository(user",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(dto",{"_index":1290,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingsController.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{}}}],["constructor(repo",{"_index":615,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{}}}],["consumer",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(currentusermiddleware).forroutes",{"_index":1471,"title":{},"body":{"modules/UsersModule.html":{}}}],["contactez",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["content/uploads/2019/12/ab",{"_index":837,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["context",{"_index":20,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":29,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":38,"title":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controllers",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["cookiesession",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":850,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["coverage",{"_index":1493,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(body",{"_index":571,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["create(booking",{"_index":623,"title":{},"body":{"injectables/BookingsService.html":{}}}],["create(flight",{"_index":1072,"title":{},"body":{"injectables/FlightsService.html":{}}}],["create(passenger",{"_index":1168,"title":{},"body":{"injectables/PassengersService.html":{}}}],["create(seat",{"_index":1261,"title":{},"body":{"injectables/SeatsService.html":{}}}],["create(user",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["createbooking",{"_index":485,"title":{},"body":{"controllers/BookingsController.html":{}}}],["createbooking(body",{"_index":490,"title":{},"body":{"controllers/BookingsController.html":{}}}],["createbookingdto",{"_index":491,"title":{"classes/CreateBookingDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"coverage.html":{}}}],["created",{"_index":493,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":381,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["createdatecolumn",{"_index":423,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["createdatecolumn({type",{"_index":394,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["createdbooking",{"_index":671,"title":{},"body":{"injectables/BookingsService.html":{}}}],["createdflight",{"_index":1082,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createdpassenger",{"_index":1180,"title":{},"body":{"injectables/PassengersService.html":{}}}],["createdseat",{"_index":1278,"title":{},"body":{"injectables/SeatsService.html":{}}}],["createduser",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["createflight",{"_index":1019,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflight(@body",{"_index":1056,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflight(body",{"_index":1024,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflightdto",{"_index":799,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpassenger",{"_index":1126,"title":{},"body":{"controllers/PassengersController.html":{}}}],["createpassenger(body",{"_index":1131,"title":{},"body":{"controllers/PassengersController.html":{}}}],["createpassengerdto",{"_index":896,"title":{"classes/CreatePassengerDto.html":{}},"body":{"classes/CreatePassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"coverage.html":{}}}],["creates",{"_index":565,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SeatsController.html":{}}}],["createseat",{"_index":1219,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseat(@body",{"_index":1244,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseat(body",{"_index":1224,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseatdto",{"_index":904,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":180,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":502,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["credentials'})@apiinternalservererrorresponse({description",{"_index":1409,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto",{"_index":1426,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto.ts",{"_index":1363,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:12",{"_index":1365,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["credentials.dto.ts:22",{"_index":1366,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["cross",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["current_timestamp(6",{"_index":397,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["currentuser",{"_index":547,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentusermiddleware",{"_index":944,"title":{"injectables/CurrentUserMiddleware.html":{}},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["customer",{"_index":1356,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["d'avoir",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'informations",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'un",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":393,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["date_of_birth",{"_index":659,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["de",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["declare",{"_index":954,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["decodedtoken",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.email",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["decorators/current",{"_index":1420,"title":{},"body":{"controllers/UsersController.html":{}}}],["default",{"_index":396,"title":{},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["delayed",{"_index":1001,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["delete('/:id",{"_index":599,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["delete('/:id')@useguards(adminguard)@apiokresponse({description",{"_index":1227,"title":{},"body":{"controllers/SeatsController.html":{}}}],["delete('/:id')@useguards(adminguard)@httpcode(200)@apiokresponse({description",{"_index":1029,"title":{},"body":{"controllers/FlightsController.html":{}}}],["delete('/:id')@useguards(authguard",{"_index":505,"title":{},"body":{"controllers/BookingsController.html":{}}}],["delete(':id",{"_index":1158,"title":{},"body":{"controllers/PassengersController.html":{}}}],["delete(':id')@useguards(authguard)@apiokresponse({description",{"_index":1135,"title":{},"body":{"controllers/PassengersController.html":{}}}],["delete(id",{"_index":600,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["deletebooking",{"_index":486,"title":{},"body":{"controllers/BookingsController.html":{}}}],["deletebooking(id",{"_index":504,"title":{},"body":{"controllers/BookingsController.html":{}}}],["deleted",{"_index":1030,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["deleteflight",{"_index":1020,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deleteflight(@param('id",{"_index":1062,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deleteflight(id",{"_index":1028,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deletepassenger",{"_index":1127,"title":{},"body":{"controllers/PassengersController.html":{}}}],["deletepassenger(id",{"_index":1134,"title":{},"body":{"controllers/PassengersController.html":{}}}],["deletes",{"_index":1249,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat",{"_index":1220,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat(@param('id",{"_index":1250,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat(id",{"_index":1226,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleting",{"_index":601,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["delimiter",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["demand",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["departure",{"_index":841,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["departure_date",{"_index":807,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["departure_time",{"_index":808,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1014,"title":{},"body":{"entities/Flight.html":{}}}],["des",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["desc",{"_index":685,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["description",{"_index":568,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"controllers/SeatsController.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["dessous",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["destination",{"_index":809,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["destination_airport_name",{"_index":810,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["detectors",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["difficultés",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["disable",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["display",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["diverted",{"_index":1004,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["document",{"_index":767,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["document_number",{"_index":657,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["document_type",{"_index":655,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["documentation",{"_index":1494,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":772,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["documenttypes",{"_index":771,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdatePassengerDto.html":{},"miscellaneous/enumerations.html":{}}}],["documenttypes.passport",{"_index":793,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/UpdatePassengerDto.html":{}}}],["doe",{"_index":940,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":927,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dotenv",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":742,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dtos/booking.dto",{"_index":553,"title":{},"body":{"controllers/BookingsController.html":{}}}],["dtos/create",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/email",{"_index":1421,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":555,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dtos/passenger.dto",{"_index":1148,"title":{},"body":{"controllers/PassengersController.html":{}}}],["dtos/password",{"_index":1423,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/seat.dto",{"_index":1238,"title":{},"body":{"controllers/SeatsController.html":{}}}],["dtos/update",{"_index":557,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["dtos/user",{"_index":1425,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/user.dto",{"_index":1427,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["economy",{"_index":918,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["economy'})@isstring()@isnotempty()@isenum(classtypes",{"_index":909,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["economy'})@isstring()@isnotempty()@isenum(classtypes)@isoptional",{"_index":1339,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["email",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email')@httpcode(200)@apiokresponse({description",{"_index":1401,"title":{},"body":{"controllers/UsersController.html":{}}}],["email'})@apiinternalservererrorresponse({description",{"_index":1397,"title":{},"body":{"controllers/UsersController.html":{}}}],["email'})@apinotfoundresponse({description",{"_index":1402,"title":{},"body":{"controllers/UsersController.html":{}}}],["emaildata",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["emailverificationdto",{"_index":961,"title":{"classes/EmailVerificationDto.html":{}},"body":{"classes/EmailVerificationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["emit",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{}}}],["emitted",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{},"injectables/SeatsService.html":{},"dependencies.html":{}}}],["entities",{"_index":377,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":375,"title":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":390,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1555,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["env.${process.env.node_env",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["err.response?.message",{"_index":578,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/UsersController.html":{}}}],["err.response?.statuscode",{"_index":576,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["error",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["event",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{}}}],["eventemitter",{"_index":619,"title":{},"body":{"injectables/BookingsService.html":{}}}],["eventemitter2",{"_index":620,"title":{},"body":{"injectables/BookingsService.html":{}}}],["eventemittermodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":1286,"title":{},"body":{"injectables/SeatsService.html":{}}}],["everything",{"_index":791,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["excludeextraneousvalues",{"_index":756,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["executioncontext",{"_index":12,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exists",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["expected",{"_index":1003,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["expiresin",{"_index":1469,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":1067,"title":{},"body":{"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{}}}],["expose",{"_index":447,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{},"classes/UserDto.html":{}}}],["express",{"_index":953,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["extra",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlbwfpbci6inlpbwthym9zc0bnbwfpbc5jb20ilcjpyxqioje2ndgzmtiwmtqsimv4cci6mty0odmxntyxnh0.slrcrne_1wkyrm5",{"_index":934,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["failed",{"_index":495,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["false",{"_index":32,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"entities/Booking.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"entities/User.html":{}}}],["false})@isboolean()@isnotempty",{"_index":867,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["false})@isboolean()@isnotempty()@isoptional",{"_index":1319,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["false})@isstring()@isoptional",{"_index":1092,"title":{},"body":{"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["female",{"_index":1112,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["fetched",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["finaliser",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["find",{"_index":641,"title":{},"body":{"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/UsersService.html":{}}}],["find(email",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":612,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["findall(options",{"_index":626,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["findall(query",{"_index":585,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{}}}],["findbyuser",{"_index":1166,"title":{},"body":{"injectables/PassengersService.html":{}}}],["findbyuser(user",{"_index":1156,"title":{},"body":{"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["finding",{"_index":1036,"title":{},"body":{"controllers/FlightsController.html":{}}}],["findone",{"_index":613,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":590,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":875,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["first_name",{"_index":923,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["fixed",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["flight",{"_index":382,"title":{"entities/Flight.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["flight'})@apiinternalservererrorresponse({description",{"_index":1026,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@isnumber()@isnotempty",{"_index":776,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["flight'})@isnumber()@isnotempty()@isoptional",{"_index":1297,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["flight.bookings",{"_index":400,"title":{},"body":{"entities/Booking.html":{}}}],["flight.dto",{"_index":1050,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flight.dto.ts",{"_index":801,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:108",{"_index":842,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:109",{"_index":1305,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:117",{"_index":826,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:119",{"_index":1310,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:126",{"_index":868,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:129",{"_index":1303,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:136",{"_index":840,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:139",{"_index":1320,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:146",{"_index":849,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:150",{"_index":1309,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:155",{"_index":871,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:161",{"_index":1313,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:164",{"_index":874,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:171",{"_index":1322,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:173",{"_index":877,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:181",{"_index":1324,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:184",{"_index":880,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:191",{"_index":1326,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:203",{"_index":1328,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:22",{"_index":822,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:24",{"_index":1301,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:32",{"_index":860,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:35",{"_index":1316,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:41",{"_index":832,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:45",{"_index":1307,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:51",{"_index":862,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:56",{"_index":1317,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:61",{"_index":851,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":1314,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:71",{"_index":865,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:78",{"_index":1318,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:81",{"_index":857,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:89",{"_index":1315,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:90",{"_index":845,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:99",{"_index":829,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.entity",{"_index":883,"title":{},"body":{"classes/CreateFlightDto.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.seat_base_price",{"_index":725,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seat_price_business_class",{"_index":724,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seat_price_first_class",{"_index":722,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seats",{"_index":1201,"title":{},"body":{"entities/Seat.html":{}}}],["flight_number",{"_index":811,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["flightid",{"_index":444,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"classes/SeatDto.html":{},"classes/UpdateBookingDto.html":{}}}],["flights",{"_index":1041,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apiinternalservererrorresponse({description",{"_index":1042,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1068,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.dto",{"_index":1051,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights.dto.ts",{"_index":1097,"title":{},"body":{"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["flights.dto.ts:11",{"_index":1099,"title":{},"body":{"classes/GetFlightsDto.html":{}}}],["flights.dto.ts:19",{"_index":1098,"title":{},"body":{"classes/GetFlightsDto.html":{}}}],["flights.service",{"_index":1052,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["flightscontroller",{"_index":1017,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":64,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":618,"title":{"injectables/FlightsService.html":{}},"body":{"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["flightstatuses",{"_index":878,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{},"miscellaneous/enumerations.html":{}}}],["flightstatuses.scheduled",{"_index":894,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["forroutes",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apibadrequestresponse({description",{"_index":1032,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["found'})@apiinternalservererrorresponse({description",{"_index":498,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":518,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["foundbooking",{"_index":696,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.flight",{"_index":706,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.flight.id",{"_index":708,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.price",{"_index":705,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.seat",{"_index":700,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.seat.id",{"_index":713,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundflight",{"_index":642,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["foundflight.seats.find",{"_index":646,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassenger",{"_index":1182,"title":{},"body":{"injectables/PassengersService.html":{}}}],["foundpassenger.user.id",{"_index":1185,"title":{},"body":{"injectables/PassengersService.html":{}}}],["foundpassengers",{"_index":651,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassengers.length",{"_index":653,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassengers[0",{"_index":663,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundseat",{"_index":645,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/SeatsService.html":{}}}],["foundseat.id",{"_index":675,"title":{},"body":{"injectables/BookingsService.html":{}}}],["function",{"_index":737,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":1563,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":661,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["genders",{"_index":778,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdatePassengerDto.html":{},"miscellaneous/enumerations.html":{}}}],["genders})@isstring()@isnotempty()@isenum(genders",{"_index":779,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["genders})@isstring()@isnotempty()@isenum(genders)@isoptional",{"_index":1336,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["generate",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{}}}],["generateprice",{"_index":614,"title":{},"body":{"injectables/BookingsService.html":{}}}],["generateprice(seat",{"_index":631,"title":{},"body":{"injectables/BookingsService.html":{}}}],["get('/:id",{"_index":588,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get('/:id')@apiokresponse({description",{"_index":1035,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get('/:id')@serialize(bookingdto)@useguards(authguard)@apiokresponse({description",{"_index":516,"title":{},"body":{"controllers/BookingsController.html":{}}}],["get('/me",{"_index":1154,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('/me')@useguards(authguard)@apiokresponse({description",{"_index":1138,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('whoami",{"_index":1450,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('whoami')@useguards(authguard)@apiokresponse({description",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apiokresponse({description",{"_index":1040,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get()@useguards(adminguard)@apiokresponse({description",{"_index":509,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{}}}],["getallbookings",{"_index":487,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getallbookings(@query",{"_index":584,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getallbookings(query",{"_index":507,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbooking",{"_index":488,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbooking(id",{"_index":515,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbookingsdto",{"_index":508,"title":{"classes/GetBookingsDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["getflight",{"_index":1021,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflight(@param('id",{"_index":1060,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflight(id",{"_index":1034,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights",{"_index":1022,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights(@query",{"_index":1059,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights(query",{"_index":1038,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflightsdto",{"_index":1039,"title":{"classes/GetFlightsDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["getpassenger",{"_index":1128,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassenger(@currentuser",{"_index":1155,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassenger(user",{"_index":1137,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassengers",{"_index":1129,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getseat",{"_index":1221,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseat(@param('id",{"_index":1247,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseat(id",{"_index":1230,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseats",{"_index":1222,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getting",{"_index":512,"title":{"index.html":{}},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["getwelcomemessage",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["global",{"_index":955,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"overview.html":{}}}],["guards/admin.guard",{"_index":1049,"title":{},"body":{"controllers/FlightsController.html":{}}}],["handle",{"_index":1285,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handlebookingevents",{"_index":1259,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handlebookingevents(payload",{"_index":1266,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handled",{"_index":747,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["handler",{"_index":748,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["hash",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.tostring('hex",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["height",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["helpers/email",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["hotel",{"_index":430,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["html",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":1048,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(200",{"_index":1061,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["https://www.abaviation.com/wp",{"_index":836,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ibrahim",{"_index":864,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei",{"_index":943,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei'})@isnotempty()@isjwt",{"_index":935,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["icons",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":383,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["id'})@isnotempty()@isnumber",{"_index":911,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["id_card",{"_index":1110,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["identification",{"_index":858,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["identifier",{"_index":1495,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":773,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["ignoreerrors",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["implements",{"_index":7,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["import",{"_index":23,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apinotfoundresponse({description",{"_index":1407,"title":{},"body":{"controllers/UsersController.html":{}}}],["in_air",{"_index":1002,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["includes",{"_index":933,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["incorrect",{"_index":1408,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherit",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":144,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":635,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(booking",{"_index":640,"title":{},"body":{"injectables/BookingsService.html":{}}}],["injectrepository(passenger",{"_index":1176,"title":{},"body":{"injectables/PassengersService.html":{}}}],["injectrepository(seat",{"_index":1273,"title":{},"body":{"injectables/SeatsService.html":{}}}],["inner",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["inscription",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["inserted",{"_index":435,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["int",{"_index":976,"title":{},"body":{"entities/Flight.html":{}}}],["intercept",{"_index":743,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["intercept(context",{"_index":1292,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["interface",{"_index":478,"title":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{}},"body":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":480,"title":{},"body":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":529,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["international",{"_index":855,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["invalid",{"_index":1385,"title":{},"body":{"controllers/UsersController.html":{}}}],["is_available",{"_index":482,"title":{},"body":{"interfaces/BookingEvent.html":{},"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["is_email_verified",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":881,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isdecimal",{"_index":882,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["isemail",{"_index":966,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isenum",{"_index":784,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(bookingtypes",{"_index":798,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["isenum(classtypes",{"_index":920,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(documenttypes",{"_index":794,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["isenum(flightstatuses",{"_index":895,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["isenum(genders",{"_index":797,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["isglobal",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":937,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["isnotempty",{"_index":785,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isnumber",{"_index":786,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isoptional",{"_index":1095,"title":{},"body":{"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isstring",{"_index":787,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{}}}],["issue",{"_index":1015,"title":{},"body":{"entities/Flight.html":{}}}],["je",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["john",{"_index":939,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":925,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@email.com",{"_index":967,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isnotempty()@isemail",{"_index":1364,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isstring()@isnotempty()@isemail",{"_index":964,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["join",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["joincolumn",{"_index":424,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["json.stringify",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["jsonwebtoken",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["julius",{"_index":853,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["jwt",{"_index":932,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["jwtconstants",{"_index":1459,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":1467,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule",{"_index":1458,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":1465,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["kassai",{"_index":1584,"title":{},"body":{"properties.html":{}}}],["kaym",{"_index":1583,"title":{},"body":{"properties.html":{}}}],["keys",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["landed",{"_index":1006,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["last",{"_index":558,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["last_name",{"_index":924,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["layout",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["le",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["leak",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["length",{"_index":788,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{}}}],["length(1",{"_index":796,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{}}}],["license",{"_index":1580,"title":{},"body":{"properties.html":{}}}],["lien",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["limit",{"_index":679,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["line",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["linked",{"_index":1183,"title":{},"body":{"injectables/PassengersService.html":{}}}],["listeners",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["logged",{"_index":1406,"title":{},"body":{"controllers/UsersController.html":{}}}],["logging",{"_index":1410,"title":{},"body":{"controllers/UsersController.html":{}}}],["loginsert",{"_index":433,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["logo",{"_index":835,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["logo.png",{"_index":889,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["logo.png'})@isstring()@isnotempty",{"_index":839,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["logo.png'})@isstring()@isnotempty()@isoptional",{"_index":1308,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["logremove",{"_index":438,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["logupdate",{"_index":436,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["mail",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["male",{"_index":1111,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["manytoone",{"_index":425,"title":{},"body":{"entities/Booking.html":{},"entities/Seat.html":{}}}],["manytoone(undefined",{"_index":399,"title":{},"body":{"entities/Booking.html":{},"entities/Seat.html":{}}}],["map",{"_index":733,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["map((data",{"_index":752,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["margin",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":37,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["maximum",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["maxlisteners",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["media",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["memory",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["merci",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["message",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["messageviewbody",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/current",{"_index":1461,"title":{},"body":{"modules/UsersModule.html":{}}}],["minlength",{"_index":938,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["minlength(6",{"_index":942,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["miscellaneous",{"_index":1554,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["module",{"_index":56,"title":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mon",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["mot",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["name",{"_index":17,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateFlightDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":956,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["namespaces",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["nbsp",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["needed",{"_index":792,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["nestinterceptor",{"_index":729,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{},"injectables/SeatsService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":542,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"controllers/SeatsController.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":952,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["never",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newbooking",{"_index":665,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.flight",{"_index":668,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.passenger",{"_index":670,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.seat",{"_index":669,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newflight",{"_index":1080,"title":{},"body":{"injectables/FlightsService.html":{}}}],["newlistener",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["newpassenger",{"_index":1177,"title":{},"body":{"injectables/PassengersService.html":{}}}],["newpassenger.user",{"_index":1179,"title":{},"body":{"injectables/PassengersService.html":{}}}],["newpassword",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetDto.html":{}}}],["newseat",{"_index":1275,"title":{},"body":{"injectables/SeatsService.html":{}}}],["newseat.flight",{"_index":1277,"title":{},"body":{"injectables/SeatsService.html":{}}}],["newuser",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":744,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["next.handle().pipe",{"_index":751,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nextfunction",{"_index":949,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["no_takeoff_info",{"_index":1009,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["nodemailer",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('a",{"_index":598,"title":{},"body":{"controllers/BookingsController.html":{}}}],["notfoundexception('booking",{"_index":591,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["notfoundexception('flight",{"_index":579,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["notfoundexception('passenger",{"_index":592,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["notfoundexception('seat",{"_index":580,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["notfoundexception('user",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('users",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["nous",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":1439,"title":{},"body":{"controllers/UsersController.html":{}}}],["nullable",{"_index":391,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["number",{"_index":404,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["numeric",{"_index":410,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{}}}],["nyerere",{"_index":854,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["obj",{"_index":459,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["obj.bookings.foreach((booking",{"_index":460,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["obj.flight.id",{"_index":475,"title":{},"body":{"classes/BookingDto.html":{},"classes/SeatDto.html":{}}}],["obj.passenger.id",{"_index":477,"title":{},"body":{"classes/BookingDto.html":{}}}],["obj.seat.id",{"_index":476,"title":{},"body":{"classes/BookingDto.html":{}}}],["obj.user.id",{"_index":1123,"title":{},"body":{"classes/PassengerDto.html":{}}}],["object",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(foundbooking",{"_index":709,"title":{},"body":{"injectables/BookingsService.html":{}}}],["object.assign(foundflight",{"_index":1084,"title":{},"body":{"injectables/FlightsService.html":{}}}],["object.assign(foundpassenger",{"_index":1186,"title":{},"body":{"injectables/PassengersService.html":{}}}],["object.assign(foundseat",{"_index":1280,"title":{},"body":{"injectables/SeatsService.html":{}}}],["object.assign(user",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":731,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["old",{"_index":698,"title":{},"body":{"injectables/BookingsService.html":{}}}],["oldseat",{"_index":699,"title":{},"body":{"injectables/BookingsService.html":{}}}],["oldseat.id",{"_index":715,"title":{},"body":{"injectables/BookingsService.html":{}}}],["ondelete",{"_index":401,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{}}}],["one",{"_index":650,"title":{},"body":{"injectables/BookingsService.html":{}}}],["onetomany",{"_index":999,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["onetomany(undefined",{"_index":973,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["onetoone",{"_index":426,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["onetoone(undefined",{"_index":412,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["onevent",{"_index":1271,"title":{},"body":{"injectables/SeatsService.html":{}}}],["onevent('booking",{"_index":1267,"title":{},"body":{"injectables/SeatsService.html":{}}}],["onupdate",{"_index":415,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["optional",{"_index":19,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":629,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["order",{"_index":684,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["origin",{"_index":812,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["origin_airport_name",{"_index":813,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["ou",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["oubli",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"interfaces/ClassConstructor.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1574,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":594,"title":{},"body":{"controllers/BookingsController.html":{}}}],["p",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":1517,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["page",{"_index":677,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["param",{"_index":530,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["param('id",{"_index":589,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["parameters",{"_index":15,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseint(options.limit",{"_index":680,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["parseint(options.page",{"_index":678,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["parseintpipe",{"_index":531,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["partial",{"_index":627,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["passe",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["passenger",{"_index":384,"title":{"entities/Passenger.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["passenger'})@apiinternalservererrorresponse({description",{"_index":1132,"title":{},"body":{"controllers/PassengersController.html":{}}}],["passenger'})@apinotfoundresponse({description",{"_index":517,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{}}}],["passenger.bookings",{"_index":407,"title":{},"body":{"entities/Booking.html":{}}}],["passenger.dto",{"_index":1147,"title":{},"body":{"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["passenger.dto.ts",{"_index":898,"title":{},"body":{"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["passenger.dto.ts:15",{"_index":901,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:22",{"_index":1335,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:25",{"_index":900,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:33",{"_index":1333,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:34",{"_index":899,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:43",{"_index":1331,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:44",{"_index":902,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:54",{"_index":1337,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.entity",{"_index":903,"title":{},"body":{"classes/CreatePassengerDto.html":{},"classes/PassengerDto.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/UpdatePassengerDto.html":{}}}],["passenger.user.id",{"_index":692,"title":{},"body":{"injectables/BookingsService.html":{}}}],["passengerdto",{"_index":1115,"title":{"classes/PassengerDto.html":{}},"body":{"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"coverage.html":{}}}],["passengerid",{"_index":445,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{}}}],["passengers",{"_index":582,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["passengers'})@apiinternalservererrorresponse({description",{"_index":1141,"title":{},"body":{"controllers/PassengersController.html":{}}}],["passengers.controller",{"_index":1163,"title":{},"body":{"modules/PassengersModule.html":{}}}],["passengers.service",{"_index":1149,"title":{},"body":{"controllers/PassengersController.html":{},"modules/PassengersModule.html":{}}}],["passengers/passenger.entity",{"_index":790,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["passengers/passengers.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["passengerscontroller",{"_index":1124,"title":{"controllers/PassengersController.html":{}},"body":{"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"coverage.html":{}}}],["passengersmodule",{"_index":65,"title":{"modules/PassengersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/PassengersModule.html":{},"modules.html":{},"overview.html":{}}}],["passengersservice",{"_index":617,"title":{"injectables/PassengersService.html":{}},"body":{"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"coverage.html":{},"overview.html":{}}}],["passport",{"_index":1109,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["password",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{}}}],["passwordreset",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["passwordreset(@body",{"_index":1437,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(body",{"_index":1381,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(body.token",{"_index":1440,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(token",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetdto",{"_index":1192,"title":{"classes/PasswordResetDto.html":{}},"body":{"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["past_flight",{"_index":1010,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["patch",{"_index":532,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["patch('/:id",{"_index":595,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["patch('/:id')@serialize(bookingdto)@useguards(authguard)@apiokresponse({description",{"_index":525,"title":{},"body":{"controllers/BookingsController.html":{}}}],["patch('/:id')@useguards(adminguard)@apiokresponse({description",{"_index":1046,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["patch(':id",{"_index":1157,"title":{},"body":{"controllers/PassengersController.html":{}}}],["patch(':id')@useguards(authguard)@apiokresponse({description",{"_index":1145,"title":{},"body":{"controllers/PassengersController.html":{}}}],["path",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":1269,"title":{},"body":{"injectables/SeatsService.html":{}}}],["payload.is_available",{"_index":1289,"title":{},"body":{"injectables/SeatsService.html":{}}}],["peu",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["plaintoclass",{"_index":735,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plaintoclass(this.dto",{"_index":755,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plus",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["pm",{"_index":887,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["pm'})@isstring()@isnotempty",{"_index":828,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["pm'})@isstring()@isnotempty()@isoptional",{"_index":1304,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["post",{"_index":533,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["post('/password",{"_index":1382,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register')@apicreatedresponse({description",{"_index":1389,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/send",{"_index":1393,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin')@httpcode(200)@apiokresponse({description",{"_index":1405,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout",{"_index":1452,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout')@httpcode(200)@apiokresponse({description",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@serialize(bookingdto)@useguards(authguard)@apicreatedresponse({description",{"_index":492,"title":{},"body":{"controllers/BookingsController.html":{}}}],["post()@useguards(adminguard)@apicreatedresponse({description",{"_index":1025,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["pour",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["price",{"_index":385,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["primarygeneratedcolumn",{"_index":405,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["prince",{"_index":863,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["private",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["process.env.email",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.token_key",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["promisify",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["promisify(_scrypt",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":379,"title":{"properties.html":{}},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"properties.html":{}}}],["provide",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["query",{"_index":514,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{}}}],["randombytes",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(8).tostring('hex",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"controllers/AppController.html":{}}}],["recevez",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["recovery",{"_index":1005,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["reflect",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["refundable",{"_index":814,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["register",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(body",{"_index":1388,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(data",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["rejoint",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["related",{"_index":1287,"title":{},"body":{"injectables/SeatsService.html":{}}}],["relations",{"_index":686,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["remove",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(id",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["removed",{"_index":439,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["removedbooking",{"_index":717,"title":{},"body":{"injectables/BookingsService.html":{}}}],["removedflight",{"_index":1087,"title":{},"body":{"injectables/FlightsService.html":{}}}],["removedpassenger",{"_index":1189,"title":{},"body":{"injectables/PassengersService.html":{}}}],["removedseat",{"_index":1283,"title":{},"body":{"injectables/SeatsService.html":{}}}],["removeduser",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["removelistener",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["rencontrez",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["repo",{"_index":622,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":616,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":951,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["req.currentuser",{"_index":960,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["req.session",{"_index":958,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["request",{"_index":28,"title":{"interfaces/Request.html":{}},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser",{"_index":30,"title":{},"body":{"guards/AdminGuard.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser.role",{"_index":33,"title":{},"body":{"guards/AdminGuard.html":{}}}],["request.session.userid",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require('cookie",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":596,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["required'})@apinotfoundresponse({description",{"_index":526,"title":{},"body":{"controllers/BookingsController.html":{}}}],["res",{"_index":573,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["reset')@httpcode(200)@apiokresponse({description",{"_index":1383,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto",{"_index":1424,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto.ts",{"_index":1194,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:13",{"_index":1196,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["reset.dto.ts:23",{"_index":1197,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["resetting",{"_index":1442,"title":{},"body":{"controllers/UsersController.html":{}}}],["response",{"_index":753,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["restaurant",{"_index":431,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["result",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":36,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookingBisDto.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1139,"title":{},"body":{"controllers/PassengersController.html":{}}}],["returns",{"_index":21,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["reviewed",{"_index":560,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["rimraf",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":1346,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["row",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":745,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["running",{"_index":750,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["rxjs",{"_index":732,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":734,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["réinitialisation",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["réinitialise",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["réinitialiser",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["scheduled",{"_index":1000,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["scrypt",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(data.password",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(newpassword",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(password",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["seat",{"_index":386,"title":{"entities/Seat.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat'})@apiinternalservererrorresponse({description",{"_index":1228,"title":{},"body":{"controllers/SeatsController.html":{}}}],["seat'})@apinotfoundresponse({description",{"_index":496,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SeatsController.html":{}}}],["seat'})@isnumber()@isnotempty",{"_index":781,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["seat'})@isnumber()@isnotempty()@isoptional",{"_index":1298,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["seat.class_type",{"_index":720,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat.dto",{"_index":1237,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seat.dto.ts",{"_index":906,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["seat.dto.ts:26",{"_index":917,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:28",{"_index":1344,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:35",{"_index":914,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:38",{"_index":1342,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:46",{"_index":910,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:50",{"_index":1340,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:54",{"_index":912,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.entity",{"_index":1216,"title":{},"body":{"classes/SeatDto.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{}}}],["seat.flight",{"_index":993,"title":{},"body":{"entities/Flight.html":{}}}],["seat.id",{"_index":647,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat.is_available",{"_index":649,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat_base_price",{"_index":815,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seat_number",{"_index":908,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat_price_business_class",{"_index":816,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seat_price_first_class",{"_index":817,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seatdto",{"_index":1209,"title":{"classes/SeatDto.html":{}},"body":{"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"coverage.html":{}}}],["seatid",{"_index":446,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["seats",{"_index":830,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateFlightDto.html":{}}}],["seats'})@apiinternalservererrorresponse({description",{"_index":1232,"title":{},"body":{"controllers/SeatsController.html":{}}}],["seats.controller",{"_index":1256,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1240,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["seatscontroller",{"_index":1217,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":66,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1239,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["secret",{"_index":1466,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["segment",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["send",{"_index":1396,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendemailverification(@body",{"_index":1431,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(body",{"_index":1392,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(body.email",{"_index":1433,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemailwithnodemailer",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sendemailwithnodemailer(emaildata",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["sending",{"_index":1398,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendpasswordresetemail(@body",{"_index":1434,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(body",{"_index":1400,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(body.email",{"_index":1435,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(email",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":754,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":545,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(bookingdto",{"_index":566,"title":{},"body":{"controllers/BookingsController.html":{}}}],["serialize(dto",{"_index":738,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serialize(passengerdto",{"_index":1151,"title":{},"body":{"controllers/PassengersController.html":{}}}],["serialize(seatdto",{"_index":1242,"title":{},"body":{"controllers/SeatsController.html":{}}}],["serialize(userdto",{"_index":1429,"title":{},"body":{"controllers/UsersController.html":{}}}],["serializeinterceptor",{"_index":741,"title":{"classes/SerializeInterceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["serializeinterceptor(dto",{"_index":740,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["session",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session.userid",{"_index":1438,"title":{},"body":{"controllers/UsersController.html":{}}}],["set",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["settimeout",{"_index":714,"title":{},"body":{"injectables/BookingsService.html":{}}}],["show",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["si",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["signin(@body",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(body",{"_index":1404,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(body.email",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(email",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":1468,"title":{},"body":{"modules/UsersModule.html":{}}}],["signout",{"_index":1379,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(@session",{"_index":1453,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(session",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{}}}],["single",{"_index":1246,"title":{},"body":{"controllers/SeatsController.html":{}}}],["sizing",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["skip",{"_index":682,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["solving",{"_index":1012,"title":{},"body":{"entities/Flight.html":{}}}],["something",{"_index":499,"title":{},"body":{"controllers/BookingsController.html":{},"interfaces/ClassConstructor.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../app.module.ts",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../booking.entity.ts",{"_index":1556,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../create",{"_index":1558,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../current",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.ts",{"_index":1565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../flight.entity.ts",{"_index":1561,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../passenger.entity.ts",{"_index":1560,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../seat.entity.ts",{"_index":1557,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":1566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../update",{"_index":1559,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.entity.ts",{"_index":1562,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:58",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":146,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["src/bookings/booking.entity",{"_index":998,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["src/bookings/booking.entity.ts",{"_index":378,"title":{},"body":{"entities/Booking.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/bookings/booking.entity.ts:29",{"_index":406,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:36",{"_index":392,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:42",{"_index":411,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:49",{"_index":398,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:57",{"_index":416,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:60",{"_index":403,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:64",{"_index":413,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:70",{"_index":409,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/bookings.controller.ts",{"_index":484,"title":{},"body":{"controllers/BookingsController.html":{},"coverage.html":{}}}],["src/bookings/bookings.controller.ts:119",{"_index":513,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:157",{"_index":522,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:209",{"_index":528,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:255",{"_index":506,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:64",{"_index":503,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.module.ts",{"_index":605,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/bookings/bookings.service.ts",{"_index":611,"title":{},"body":{"injectables/BookingsService.html":{},"coverage.html":{}}}],["src/bookings/bookings.service.ts:109",{"_index":630,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:132",{"_index":634,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:208",{"_index":625,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:22",{"_index":621,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:229",{"_index":632,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:30",{"_index":624,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:90",{"_index":628,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/dtos/booking",{"_index":442,"title":{},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/booking.dto.ts",{"_index":465,"title":{},"body":{"classes/BookingDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/booking.dto.ts:12",{"_index":472,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:15",{"_index":467,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:18",{"_index":474,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:22",{"_index":469,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:26",{"_index":473,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:30",{"_index":471,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:6",{"_index":470,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:9",{"_index":466,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/create",{"_index":757,"title":{},"body":{"classes/CreateBookingDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/get",{"_index":1089,"title":{},"body":{"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/update",{"_index":1294,"title":{},"body":{"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["src/bookings/interfaces/bookingcreatedevent",{"_index":1272,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/bookings/interfaces/bookingcreatedevent.ts",{"_index":481,"title":{},"body":{"interfaces/BookingEvent.html":{},"coverage.html":{}}}],["src/flights/dtos/create",{"_index":800,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dtos/get",{"_index":1096,"title":{},"body":{"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["src/flights/dtos/update",{"_index":1299,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/flight.entity",{"_index":417,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Seat.html":{}}}],["src/flights/flight.entity.ts",{"_index":968,"title":{},"body":{"entities/Flight.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/flights/flight.entity.ts:103",{"_index":971,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:110",{"_index":989,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:116",{"_index":978,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:123",{"_index":982,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:129",{"_index":990,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:135",{"_index":991,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:141",{"_index":992,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:149",{"_index":996,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:156",{"_index":979,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:164",{"_index":997,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:168",{"_index":994,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:171",{"_index":975,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:31",{"_index":986,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:38",{"_index":970,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:45",{"_index":985,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:51",{"_index":977,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:58",{"_index":987,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:65",{"_index":983,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:72",{"_index":988,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:79",{"_index":984,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:85",{"_index":981,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:91",{"_index":972,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:97",{"_index":980,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":1018,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:118",{"_index":1043,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:147",{"_index":1037,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:181",{"_index":1033,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:51",{"_index":1027,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:84",{"_index":1047,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":606,"title":{},"body":{"modules/BookingsModule.html":{},"modules/SeatsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1066,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service",{"_index":636,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/SeatsService.html":{}}}],["src/flights/flights.service.ts",{"_index":1070,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:13",{"_index":1071,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:16",{"_index":1073,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:27",{"_index":1078,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:44",{"_index":1076,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:56",{"_index":1075,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:76",{"_index":1074,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/guards/admin.guard",{"_index":543,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["src/guards/admin.guard.ts",{"_index":6,"title":{},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["src/guards/admin.guard.ts:4",{"_index":14,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/guards/auth.guard",{"_index":544,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["src/guards/auth.guard.ts",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guards/auth.guard.ts:4",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/helpers/email.ts",{"_index":1508,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor",{"_index":546,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["src/interceptors/serialize.interceptor.ts",{"_index":727,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor.ts:19",{"_index":1291,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/interceptors/serialize.interceptor.ts:22",{"_index":1293,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/main.ts",{"_index":1509,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/passengers/dtos/create",{"_index":897,"title":{},"body":{"classes/CreatePassengerDto.html":{},"coverage.html":{}}}],["src/passengers/dtos/passenger.dto.ts",{"_index":1116,"title":{},"body":{"classes/PassengerDto.html":{},"coverage.html":{}}}],["src/passengers/dtos/passenger.dto.ts:12",{"_index":1118,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:15",{"_index":1117,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:18",{"_index":1120,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:22",{"_index":1122,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:6",{"_index":1121,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:9",{"_index":1119,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/update",{"_index":1329,"title":{},"body":{"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["src/passengers/passenger.entity",{"_index":418,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{}}}],["src/passengers/passenger.entity.ts",{"_index":1100,"title":{},"body":{"entities/Passenger.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/passengers/passenger.entity.ts:30",{"_index":1107,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:38",{"_index":1105,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:45",{"_index":1104,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:51",{"_index":1103,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:58",{"_index":1106,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:62",{"_index":1108,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:65",{"_index":1102,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passengers.controller.ts",{"_index":1125,"title":{},"body":{"controllers/PassengersController.html":{},"coverage.html":{}}}],["src/passengers/passengers.controller.ts:119",{"_index":1140,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:155",{"_index":1146,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:201",{"_index":1136,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:56",{"_index":1133,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:89",{"_index":1142,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.module",{"_index":607,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/passengers/passengers.module.ts",{"_index":1162,"title":{},"body":{"modules/PassengersModule.html":{}}}],["src/passengers/passengers.service",{"_index":637,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/passengers/passengers.service.ts",{"_index":1165,"title":{},"body":{"injectables/PassengersService.html":{},"coverage.html":{}}}],["src/passengers/passengers.service.ts:14",{"_index":1167,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:19",{"_index":1169,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:30",{"_index":1171,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:42",{"_index":1172,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:55",{"_index":1173,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:67",{"_index":1174,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:90",{"_index":1170,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/seats/dtos/create",{"_index":905,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/dtos/seat.dto.ts",{"_index":1210,"title":{},"body":{"classes/SeatDto.html":{},"coverage.html":{}}}],["src/seats/dtos/seat.dto.ts:12",{"_index":1214,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:15",{"_index":1211,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:19",{"_index":1212,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:6",{"_index":1213,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:9",{"_index":1215,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/update",{"_index":1338,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/seat.entity",{"_index":419,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{}}}],["src/seats/seat.entity.ts",{"_index":1199,"title":{},"body":{"entities/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/seat.entity.ts:23",{"_index":1203,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:30",{"_index":1205,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:37",{"_index":1204,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:45",{"_index":1200,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:48",{"_index":1202,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1218,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:117",{"_index":1231,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:151",{"_index":1236,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:190",{"_index":1229,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:55",{"_index":1225,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:87",{"_index":1233,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module",{"_index":608,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/seats/seats.module.ts",{"_index":1255,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1258,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:15",{"_index":1260,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:21",{"_index":1262,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:40",{"_index":1265,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:52",{"_index":1264,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:63",{"_index":1270,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:80",{"_index":1263,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:98",{"_index":1268,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/users/auth.service.ts",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/auth.service.ts:19",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:26",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:307",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:595",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:644",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:661",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/constants/index.ts",{"_index":1513,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/decorators/current",{"_index":548,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":921,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/email",{"_index":962,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["src/users/dtos/password",{"_index":1193,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["src/users/dtos/user",{"_index":1362,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts",{"_index":1368,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts:12",{"_index":1374,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:15",{"_index":1370,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:18",{"_index":1375,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:21",{"_index":1369,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:24",{"_index":1376,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:27",{"_index":1373,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:6",{"_index":1372,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:9",{"_index":1371,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/middlewares/current",{"_index":945,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/users/user.entity",{"_index":550,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{}}}],["src/users/user.entity.ts",{"_index":1345,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.entity.ts:22",{"_index":1350,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":1349,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:30",{"_index":1352,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":1348,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:41",{"_index":1353,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1354,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1347,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:64",{"_index":1355,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:71",{"_index":1351,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1378,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:118",{"_index":1387,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":1391,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:192",{"_index":1411,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:217",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:225",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:55",{"_index":1399,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:86",{"_index":1403,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1456,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:23",{"_index":1457,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["started",{"_index":1567,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1496,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":818,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["storedhash",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["subject",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["successful",{"_index":1436,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful'})@apibadrequestresponse({description",{"_index":1384,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":569,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibadrequestresponse({description",{"_index":494,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apinotfoundresponse({description",{"_index":1031,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["support",{"_index":1571,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["svg",{"_index":1572,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":575,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["sysadmin",{"_index":34,"title":{},"body":{"guards/AdminGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":683,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["tanzania",{"_index":886,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["tanzania'})@isstring()@length(1",{"_index":847,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["td",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["text",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["thats",{"_index":644,"title":{},"body":{"injectables/BookingsService.html":{}}}],["then((res",{"_index":586,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["then((user",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["then(async",{"_index":572,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.appservice.getwelcomemessage",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":1432,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.bookingsservice",{"_index":570,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.configservice.get('cookie_key",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["this.eventemitter.emit('booking.created",{"_index":674,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.deleted",{"_index":719,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.failed",{"_index":676,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.updated",{"_index":712,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.findone(id",{"_index":697,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.flightsservice",{"_index":1057,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.findone",{"_index":707,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(attrs.flightid",{"_index":704,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(booking.flightid",{"_index":643,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(seat.flightid",{"_index":1274,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.generateprice(foundseat",{"_index":664,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.jwtservice.sign",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(data.token",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passengersservice",{"_index":1153,"title":{},"body":{"controllers/PassengersController.html":{}}}],["this.passengersservice.create",{"_index":654,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.passengersservice.findbyuser(user",{"_index":652,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.passengersservice.findone",{"_index":691,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.create",{"_index":666,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.create(flight",{"_index":1081,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.create(passenger",{"_index":1178,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.create(seat",{"_index":1276,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.create(user",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.find",{"_index":681,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.repo.find()).length",{"_index":688,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["this.repo.findone(id",{"_index":690,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.repo.remove(flight",{"_index":1088,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.remove(foundbooking",{"_index":718,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.remove(foundpassenger",{"_index":1190,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.remove(seat",{"_index":1284,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.remove(user",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(foundbooking",{"_index":711,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.save(foundflight",{"_index":1086,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.save(foundpassenger",{"_index":1188,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.save(foundseat",{"_index":1282,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.save(newbooking",{"_index":672,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.save(newflight",{"_index":1083,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.save(newpassenger",{"_index":1181,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.save(newseat",{"_index":1279,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.save(newuser",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(user",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.seatsservice",{"_index":1245,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.update(payload.id",{"_index":1288,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.usersservice.create(userdata",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(decodedtoken.email",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(email",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(userid",{"_index":959,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["this.usersservice.update(user.id",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["throwing",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["time",{"_index":559,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"classes/UpdateFlightDto.html":{},"controllers/UsersController.html":{}}}],["timestamp",{"_index":395,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["token",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{}}}],["total_count",{"_index":689,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["totalcount",{"_index":687,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["tour",{"_index":151,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["tour@gmail.com",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["transform",{"_index":450,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["transformer",{"_index":457,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/ClassConstructor.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["true",{"_index":35,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{}}}],["true})@isboolean()@isnotempty",{"_index":913,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["true})@isboolean()@isnotempty()@isoptional",{"_index":1341,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["truthy",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["try",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":18,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":429,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"injectables/PassengersService.html":{},"entities/Seat.html":{},"injectables/SeatsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([booking",{"_index":610,"title":{},"body":{"modules/BookingsModule.html":{}}}],["typeormmodule.forfeature([flight",{"_index":1069,"title":{},"body":{"modules/FlightsModule.html":{}}}],["typeormmodule.forfeature([passenger",{"_index":1164,"title":{},"body":{"modules/PassengersModule.html":{}}}],["typeormmodule.forfeature([seat",{"_index":1257,"title":{},"body":{"modules/SeatsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1464,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["types/cookie",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception('incorrect",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["uncaughtexception",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":995,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["undefined.id)@expose",{"_index":468,"title":{},"body":{"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(documenttypes",{"_index":774,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(documenttypes)@isoptional",{"_index":1334,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(flightstatuses",{"_index":879,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(flightstatuses)@isoptional",{"_index":1327,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["une",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":427,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["unique(['email",{"_index":1357,"title":{},"body":{"entities/User.html":{}}}],["unique(['passenger",{"_index":432,"title":{},"body":{"entities/Booking.html":{}}}],["unique(['seat_number",{"_index":1206,"title":{},"body":{"entities/Seat.html":{}}}],["unique(['user",{"_index":1113,"title":{},"body":{"entities/Passenger.html":{}}}],["unknown",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1581,"title":{},"body":{"properties.html":{}}}],["update",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(attrs",{"_index":1077,"title":{},"body":{"injectables/FlightsService.html":{}}}],["update(body",{"_index":1058,"title":{},"body":{"controllers/FlightsController.html":{}}}],["update(id",{"_index":597,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["updatebooking",{"_index":489,"title":{},"body":{"controllers/BookingsController.html":{}}}],["updatebooking(id",{"_index":523,"title":{},"body":{"controllers/BookingsController.html":{}}}],["updatebookingdto",{"_index":524,"title":{"classes/UpdateBookingDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["updated",{"_index":437,"title":{},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"entities/User.html":{}}}],["updated_at",{"_index":387,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"entities/Flight.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["updatedatecolumn",{"_index":428,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["updatedatecolumn({type",{"_index":414,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["updatedbooking",{"_index":710,"title":{},"body":{"injectables/BookingsService.html":{}}}],["updatedflight",{"_index":1085,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updatedpassenger",{"_index":1187,"title":{},"body":{"injectables/PassengersService.html":{}}}],["updatedseat",{"_index":1281,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateduser",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updateflight",{"_index":1023,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateflight(id",{"_index":1044,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateflightdto",{"_index":1045,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updatepassenger",{"_index":1130,"title":{},"body":{"controllers/PassengersController.html":{}}}],["updatepassenger(id",{"_index":1143,"title":{},"body":{"controllers/PassengersController.html":{}}}],["updatepassengerdto",{"_index":1144,"title":{"classes/UpdatePassengerDto.html":{}},"body":{"controllers/PassengersController.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["updates",{"_index":1248,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseat",{"_index":1223,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseat(id",{"_index":1234,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseatdto",{"_index":1235,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updating",{"_index":527,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["url",{"_index":833,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["use",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/UsersController.html":{}}}],["use(req",{"_index":948,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["used",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["useguards",{"_index":534,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["useguards(adminguard",{"_index":583,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["useguards(authguard",{"_index":567,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":728,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["useinterceptors(new",{"_index":739,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["user",{"_index":206,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user'})@apiinternalservererrorresponse({description",{"_index":1390,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apinotfoundresponse({description",{"_index":1386,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.decorator",{"_index":549,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":922,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":926,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":928,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":930,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":936,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":693,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"controllers/UsersController.html":{}}}],["user.middleware",{"_index":1462,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":946,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["user.middleware.ts:15",{"_index":947,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.middleware.ts:18",{"_index":950,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.password.split",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":694,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{}}}],["usercredentialsdto",{"_index":1361,"title":{"classes/UserCredentialsDto.html":{}},"body":{"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userdata",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.token",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":1367,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userid",{"_index":957,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"classes/PassengerDto.html":{},"interfaces/Request.html":{}}}],["userrole",{"_index":639,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"entities/User.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":695,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{}}}],["userrole.customer",{"_index":1359,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1463,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.length",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["users.service",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":1175,"title":{},"body":{"injectables/PassengersService.html":{}}}],["users/users.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1377,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":67,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":171,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["util",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":931,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{}}}],["validationpipe",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":789,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UserCredentialsDto.html":{},"dependencies.html":{}}}],["value",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":969,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["variable",{"_index":1498,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1585,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbosememoryleak",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["verification",{"_index":1395,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification')@httpcode(200)@apiokresponse({description",{"_index":1394,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto",{"_index":1422,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto.ts",{"_index":963,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:13",{"_index":965,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verified",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["veuillez",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["view",{"_index":520,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["void",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["votre",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["vous",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["want",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["welcome",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["welcomemessage",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["went",{"_index":500,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["whether",{"_index":866,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["whitelist",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["whoami",{"_index":1380,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@currentuser",{"_index":1451,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(user",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["width",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["width:850px",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["wildcard",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["wildcards",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["wrong",{"_index":501,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["y",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["yvanig",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/admin.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/admin.guard.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\n\nexport class AdminGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    if (!request.currentUser) {\n      return false;\n    }\n    if (request.currentUser.role !== 'sysadmin') {\n      return false;\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \nwelcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller({\n  path: '',\n  version: '1',\n})\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  welcomeMessage(): { message: string } {\n    return this.appService.getWelcomeMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBookingsModule\n\nBookingsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingsModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nAppModule -->\n\nPassengersModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BookingsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            PassengersModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, ValidationPipe, MiddlewareConsumer } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nconst cookieSession = require('cookie-session');\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { PassengersModule } from './passengers/passengers.module';\nimport { BookingsModule } from './bookings/bookings.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n    }),\n    EventEmitterModule.forRoot({\n      // set this to `true` to use wildcards\n      wildcard: true,\n      // the delimiter used to segment namespaces\n      delimiter: '.',\n      // set this to `true` if you want to emit the newListener event\n      newListener: false,\n      // set this to `true` if you want to emit the removeListener event\n      removeListener: false,\n      // the maximum amount of listeners that can be assigned to an event\n      maxListeners: 10,\n      // show event name in memory leak message when more than maximum amount of listeners is assigned\n      verboseMemoryLeak: false,\n      // disable throwing uncaughtException if an error event is emitted and it has no listeners\n      ignoreErrors: false,\n    }),\n    TypeOrmModule.forRoot(),\n    UsersModule,\n    FlightsModule,\n    SeatsModule,\n    PassengersModule,\n    BookingsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n      }),\n    },\n  ],\n})\nexport class AppModule {\n  constructor(private configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(\n        cookieSession({\n          keys: [this.configService.get('COOKIE_KEY')],\n        }),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWelcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getWelcomeMessage\n                        \n                    \n                \n            \n            \n                \ngetWelcomeMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getWelcomeMessage(): { message: string } {\n    return {\n      message: 'Welcome to the YVANIG Tour API',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/auth.guard.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\n\nexport class AuthGuard implements CanActivate {\n  async canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    return request.session.userId; // truthy value if exist\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(token: string, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:661\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:595\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:644\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { sendEmailWithNodemailer } from '../helpers/email';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { randomBytes, scrypt as _scrypt } from 'crypto';\nimport { promisify } from 'util';\nimport { User } from './user.entity';\n\nconst scrypt = promisify(_scrypt);\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  async sendEmailVerification(email: string) {\n    const token = this.jwtService.sign({ email });\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: `YVANIG TOUR | Veuillez confirmer votre email`,\n      text: `Merci d'avoir rejoint YVANIG TOUR. Nous avons besoin d'un peu plus d'informations pour compléter votre inscription, y compris une confirmation de votre adresse e-mail.`,\n      html: `\n      \n      \n      \n      \n        \n        \n        \n        96\n        \n          * {\n            box-sizing: border-box;\n          }\n      \n          body {\n            margin: 0;\n            padding: 0;\n          }\n      \n          a[x-apple-data-detectors] {\n            color: inherit !important;\n            text-decoration: inherit !important;\n          }\n      \n          #MessageViewBody a {\n            color: inherit;\n            text-decoration: none;\n          }\n      \n          p {\n            line-height: inherit\n          }\n      \n          @media (max-width:850px) {\n            .icons-inner {\n              text-align: center;\n            }\n      \n            .icons-inner td {\n              margin: 0 auto;\n            }\n      \n            .row-content {\n              width: 100% !important;\n            }\n      \n            .column .border {\n              display: none;\n            }\n      \n            table {\n              table-layout: fixed !important;\n            }\n      \n            .stack .column {\n              width: 100%;\n              display: block;\n            }\n          }\n        \n      \n      \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      Confirmer votre adresse email\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Merci de nous avoir rejoint\n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                        \n                                          Pour finaliser votre inscription, cliquez sur le bouton ci-dessous.\n                                          &nbsp;\n                                          Si vous rencontrez des difficultés pour vous connecter à votre compte, contactez-nous à\n                                          yvanig-tour@gmail.com\n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Je confirme mon adresse email\n                                      \n                                    \n                                  \n                                \n                              \n                              \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        Ou cliquez sur ce lien: Confirmer mon adresse email\n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            \n                                            \n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n              \n            \n          \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return JSON.stringify({\n      success: true,\n    });\n  }\n\n  async sendPasswordResetEmail(email: string) {\n    // check if user exists\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const token = this.jwtService.sign({ email });\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: `YVANIG TOUR | Réinitialisation de votre mot de passe`,\n      text: `Vous recevez cet email car vous avez demandé une réinitialisation de votre mot de passe.`,\n      html: `\n      \n      \n      \n      \n        \n        \n        \n        96\n        \n          * {\n            box-sizing: border-box;\n          }\n      \n          body {\n            margin: 0;\n            padding: 0;\n          }\n      \n          a[x-apple-data-detectors] {\n            color: inherit !important;\n            text-decoration: inherit !important;\n          }\n      \n          #MessageViewBody a {\n            color: inherit;\n            text-decoration: none;\n          }\n      \n          p {\n            line-height: inherit\n          }\n      \n          @media (max-width:850px) {\n            .icons-inner {\n              text-align: center;\n            }\n      \n            .icons-inner td {\n              margin: 0 auto;\n            }\n      \n            .row-content {\n              width: 100% !important;\n            }\n      \n            .column .border {\n              display: none;\n            }\n      \n            table {\n              table-layout: fixed !important;\n            }\n      \n            .stack .column {\n              width: 100%;\n              display: block;\n            }\n          }\n        \n      \n      \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      Réinitialiser votre mot de passe\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Mot de passe oublié?\n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                        \n                                          Pour réinitialiser votre mot de passe, cliquez sur le bouton ci-dessous.\n                                          &nbsp;\n                                          Si vous rencontrez des difficultés pour vous connecter à votre compte, contactez-nous à\n                                          yvanig-tour@gmail.com\n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Je réinitialise mon mot de passe\n                                      \n                                    \n                                  \n                                \n                              \n                              \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        Ou cliquez sur ce lien: Réinitialiser mon mot de passe\n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            \n                                            \n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n              \n            \n          \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return JSON.stringify({\n      success: true,\n    });\n  }\n\n  async register(data: CreateUserDto) {\n    // check if email has been verified\n    let decodedToken;\n\n    try {\n      decodedToken = await this.jwtService.verify(data.token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // check if user already exists\n    const users = await this.usersService.find(decodedToken.email);\n\n    if (users.length) {\n      throw new BadRequestException('Email in use');\n    }\n\n    // Hash the user's password\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(data.password, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n    // 4- Create a new user and save it to the database\n\n    const userData = {\n      ...data,\n      email: decodedToken.email,\n      is_email_verified: true,\n      password: result,\n    };\n\n    delete userData.token;\n\n    try {\n      const user = await this.usersService.create(userData);\n      return user;\n    } catch (err) {\n      throw new BadRequestException('Failed to create user');\n    }\n  }\n\n  async signin(email: string, password: string) {\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const [salt, storedHash] = user.password.split('.');\n    const hash = (await scrypt(password, salt, 32)) as Buffer;\n\n    if (storedHash !== hash.toString('hex')) {\n      throw new UnauthorizedException('Incorrect credentials');\n    }\n\n    return user;\n  }\n\n  async passwordReset(token: string, newPassword: string): Promise {\n    let decodedToken: any;\n\n    try {\n      decodedToken = await this.jwtService.verify(token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    const [user] = await this.usersService.find(decodedToken.email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(newPassword, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n\n    // modify user's password\n    try {\n      const updatedUser = await this.usersService.update(user.id, {\n        password: result,\n      });\n\n      return updatedUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to update password of the user');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Booking.html":{"url":"entities/Booking.html","title":"entity - Booking","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Booking\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/booking.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flight\n                            \n                            \n                                id\n                            \n                            \n                                passenger\n                            \n                            \n                                price\n                            \n                            \n                                seat\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: BookingTypes, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Flight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, flight => flight.bookings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passenger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Passenger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, passenger => passenger.bookings, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Seat\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Flight } from 'src/flights/flight.entity';\nimport { Passenger } from 'src/passengers/passenger.entity';\nimport { Seat } from 'src/seats/seat.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum BookingTypes {\n  FLIGHT = 'flight',\n  HOTEL = 'hotel',\n  RESTAURANT = 'restaurant',\n}\n\n@Entity()\n@Unique(['passenger', 'flight'])\nexport class Booking {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: BookingTypes,\n    nullable: false,\n  })\n  booking_type: BookingTypes;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  price: number;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  @ManyToOne(() => Flight, (flight) => flight.bookings, { onDelete: 'CASCADE' })\n  flight: Flight;\n\n  @OneToOne(() => Seat, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  seat: Seat;\n\n  @ManyToOne(() => Passenger, (passenger) => passenger.bookings, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  passenger: Passenger;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Booking inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Booking updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Booking removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookingBisDto.html":{"url":"classes/BookingBisDto.html","title":"class - BookingBisDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookingBisDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/booking-bis.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                passengerId\n                            \n                            \n                                price\n                            \n                            \n                                seatId\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passengerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { BookingTypes } from '../booking.entity';\n\nexport class BookingBisDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  booking_type: BookingTypes;\n\n  @Expose()\n  price: number;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.flight.id;\n    });\n  })\n  @Expose()\n  flightId: number;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.seat.id;\n    });\n  })\n  @Expose()\n  seatId: number;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.passenger.id;\n    });\n  })\n  @Expose()\n  passengerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookingDto.html":{"url":"classes/BookingDto.html","title":"class - BookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                passengerId\n                            \n                            \n                                price\n                            \n                            \n                                seatId\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passengerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { BookingTypes } from '../booking.entity';\n\nexport class BookingDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  booking_type: BookingTypes;\n\n  @Expose()\n  price: number;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Transform(({ obj }) => obj.flight.id)\n  @Expose()\n  flightId: number;\n\n  @Transform(({ obj }) => obj.seat.id)\n  @Expose()\n  seatId: number;\n\n  @Transform(({ obj }) => obj.passenger.id)\n  @Expose()\n  passengerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookingEvent.html":{"url":"interfaces/BookingEvent.html","title":"interface - BookingEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookingEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/interfaces/BookingCreatedEvent.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            is_available\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_available\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        is_available:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookingEvent {\n  id: number;\n  is_available: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookingsController.html":{"url":"controllers/BookingsController.html","title":"controller - BookingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/bookings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBooking\n                            \n                            \n                                    Async\n                                deleteBooking\n                            \n                            \n                                    Async\n                                getAllBookings\n                            \n                            \n                                    Async\n                                getBooking\n                            \n                            \n                                    Async\n                                updateBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    createBooking(body: CreateBookingDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiCreatedResponse({description: 'The booking was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new booking | Failed to get the passenger | Failed to create a new passenger | Failed to update the seat'})@ApiNotFoundResponse({description: 'Flight not found | Seat not found or not available | Seat not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllBookings\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllBookings(query: GetBookingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AdminGuard)@ApiOkResponse({description: 'The bookings were found successfully'})@ApiBadRequestResponse({description: 'Failed to get the bookings'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the bookings'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetBookingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBooking(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The booking was found successfully'})@ApiBadRequestResponse({description: 'Failed to get the passenger'})@ApiNotFoundResponse({description: 'Booking not found | Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to view this booking'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateBooking(id: number, body: UpdateBookingDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The booking was updated successfully'})@ApiBadRequestResponse({description: 'Failed to update the booking | A new seat id is required'})@ApiNotFoundResponse({description: 'Booking not found | Passenger not found | Seat not found or not available| Flight not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to update this booking'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CurrentUser } from 'src/users/decorators/current-user.decorator';\nimport { User } from 'src/users/user.entity';\nimport { BookingsService } from './bookings.service';\nimport { BookingDto } from './dtos/booking.dto';\nimport { CreateBookingDto } from './dtos/create-booking.dto';\nimport { GetBookingsDto } from './dtos/get-bookings.dto';\nimport { UpdateBookingDto } from './dtos/update-booking.dto';\n\n// LAST TIME REVIEWED: 2022-04-10\n@ApiTags('bookings')\n@Controller({\n  path: 'api/bookings',\n  version: '1',\n})\nexport class BookingsController {\n  constructor(private bookingsService: BookingsService) {}\n\n  // Creates a new booking\n  @Post()\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiCreatedResponse({\n    description: 'The booking was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description:\n      'Failed to create a new booking | Failed to get the passenger | Failed to create a new passenger | Failed to update the seat',\n  })\n  @ApiNotFoundResponse({\n    description:\n      'Flight not found | Seat not found or not available | Seat not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new booking',\n  })\n  async createBooking(\n    @Body() body: CreateBookingDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .create(body, user)\n      .then(async (res) => {\n        return res;\n      })\n      .catch(async (err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            if (err.response?.message === 'Flight not found') {\n              throw new NotFoundException('Flight not found');\n            } else if (\n              err.response?.message === 'Seat not found or not available' ||\n              err.response?.message === 'Seat not found'\n            ) {\n              throw new NotFoundException('Seat not found or not available');\n            }\n          case 400:\n            if (err.response?.message === 'Failed to get the passengers') {\n              throw new BadRequestException('Failed to get the passenger');\n            } else if (\n              err.response?.message === 'Failed to create a new passenger'\n            ) {\n              throw new BadRequestException('Failed to create a new passenger');\n            } else if (\n              err.response?.message === 'Failed to create a new booking'\n            ) {\n              throw new BadRequestException('Failed to create a new booking');\n            } else if (err.response?.message === 'Failed to update the seat') {\n              throw new BadRequestException('Failed to update the seat');\n            }\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new booking',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns all bookings\n  @Get()\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The bookings were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the bookings',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the bookings',\n  })\n  async getAllBookings(@Query() query: GetBookingsDto) {\n    return this.bookingsService\n      .findAll(query)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the bookings');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the bookings',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns a booking\n  @Get('/:id')\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The booking was found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Booking not found | Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to view this booking',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the booking',\n  })\n  async getBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .findOne(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the passenger');\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to view this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the booking',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Update a booking if the user is the owner\n  @Patch('/:id')\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The booking was updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the booking | A new seat id is required',\n  })\n  @ApiNotFoundResponse({\n    description:\n      'Booking not found | Passenger not found | Seat not found or not available| Flight not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to update this booking',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the booking',\n  })\n  async updateBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateBookingDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .update(id, body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Failed to update the booking') {\n              throw new BadRequestException('Failed to update the booking');\n            } else if (err.response?.message === 'A new seat id is required') {\n              throw new NotFoundException('A new seat id is required');\n            }\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            } else if (\n              err.response?.message === 'Seat not found or not available'\n            ) {\n              throw new NotFoundException('Seat not found or not available');\n            } else if (err.response?.message === 'Flight not found') {\n              throw new NotFoundException('Flight not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to update this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the booking',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Delete a booking if the user is the owner\n  @Delete('/:id')\n  @UseGuards(AuthGuard)\n  async deleteBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .delete(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to delete the booking');\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to delete this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the booking',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookingsModule.html":{"url":"modules/BookingsModule.html","title":"module - BookingsModule","body":"\n                   \n\n\n\n\n    Modules\n    BookingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BookingsModule\n\n\n\ncluster_BookingsModule_providers\n\n\n\ncluster_BookingsModule_imports\n\n\n\n\nFlightsModule\n\nFlightsModule\n\n\n\nBookingsModule\n\nBookingsModule\n\nBookingsModule -->\n\nFlightsModule->BookingsModule\n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nBookingsModule -->\n\nPassengersModule->BookingsModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nBookingsModule -->\n\nSeatsModule->BookingsModule\n\n\n\n\n\nBookingsService\n\nBookingsService\n\nBookingsModule -->\n\nBookingsService->BookingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bookings/bookings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookingsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookingsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FlightsModule\n                        \n                        \n                            PassengersModule\n                        \n                        \n                            SeatsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { PassengersModule } from 'src/passengers/passengers.module';\nimport { SeatsModule } from 'src/seats/seats.module';\nimport { Booking } from './booking.entity';\nimport { BookingsController } from './bookings.controller';\nimport { BookingsService } from './bookings.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Booking]),\n    PassengersModule,\n    FlightsModule,\n    SeatsModule,\n  ],\n  controllers: [BookingsController],\n  providers: [BookingsService],\n})\nexport class BookingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingsService.html":{"url":"injectables/BookingsService.html","title":"injectable - BookingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/bookings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                generatePrice\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository, passengersService: PassengersService, flightsService: FlightsService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bookings/bookings.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passengersService\n                                                  \n                                                        \n                                                                        PassengersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightsService\n                                                  \n                                                        \n                                                                        FlightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(booking: CreateBookingDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    booking\n                                    \n                                                CreateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePrice\n                        \n                    \n                \n            \n            \n                \ngeneratePrice(seat: Seat, flight: Flight)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seat\n                                    \n                                                Seat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flight\n                                    \n                                                Flight\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Flight } from 'src/flights/flight.entity';\nimport { FlightsService } from 'src/flights/flights.service';\nimport { Passenger } from 'src/passengers/passenger.entity';\nimport { PassengersService } from 'src/passengers/passengers.service';\nimport { ClassTypes, Seat } from 'src/seats/seat.entity';\nimport { User, UserRole } from 'src/users/user.entity';\nimport { Repository } from 'typeorm';\nimport { Booking } from './booking.entity';\nimport { CreateBookingDto } from './dtos/create-booking.dto';\nimport { GetBookingsDto } from './dtos/get-bookings.dto';\nimport { UpdateBookingDto } from './dtos/update-booking.dto';\n\n@Injectable()\nexport class BookingsService {\n  constructor(\n    @InjectRepository(Booking) private repo: Repository,\n    private passengersService: PassengersService,\n    private flightsService: FlightsService,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async create(booking: CreateBookingDto, user: User) {\n    // Find the flight\n    const foundFlight = await this.flightsService.findOne(booking.flightId);\n    // Find the seat thats is available\n    const foundSeat = foundFlight.seats.find(\n      (seat) => seat.id === booking.seatId && seat.is_available === true,\n    );\n\n    if (!foundSeat) {\n      throw new NotFoundException('Seat not found or not available');\n    }\n\n    // Find a passenger if it exists. If not create one\n    let passenger: Passenger;\n    const foundPassengers = await this.passengersService.findByUser(user);\n    if (foundPassengers.length === 0) {\n      passenger = await this.passengersService.create(\n        {\n          document_type: booking.document_type,\n          document_number: booking.document_number,\n          date_of_birth: booking.date_of_birth,\n          gender: booking.gender,\n        },\n        user,\n      );\n    } else {\n      passenger = foundPassengers[0];\n    }\n\n    // Generate a price\n    let price = this.generatePrice(foundSeat, foundFlight);\n\n    try {\n      // Create the booking\n      const newBooking = this.repo.create({\n        booking_type: booking.booking_type,\n        price,\n      });\n\n      newBooking.flight = foundFlight;\n      newBooking.seat = foundSeat;\n      newBooking.passenger = passenger;\n\n      const createdBooking = await this.repo.save(newBooking);\n\n      // Emit an event to update the seat availability\n      this.eventEmitter.emit('booking.created', {\n        id: foundSeat.id,\n        is_available: false,\n      });\n      return createdBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundSeat.id,\n        is_available: true,\n      });\n      throw new BadRequestException('Failed to create a new booking');\n    }\n  }\n\n  async findAll(options: Partial) {\n    const page = parseInt(options.page) || 0;\n    const limit = parseInt(options.limit) || 10;\n    try {\n      const bookings = await this.repo.find({\n        skip: page * limit,\n        take: limit,\n        order: { created_at: 'DESC' },\n        relations: ['flight', 'seat', 'passenger'],\n      });\n      const totalCount = await (await this.repo.find()).length;\n\n      return { bookings, total_count: totalCount };\n    } catch (err) {\n      throw new BadRequestException('Failed to get the bookings');\n    }\n  }\n\n  // Find a booking by id\n  async findOne(id: number, user: User) {\n    const booking = await this.repo.findOne(id, {\n      relations: ['flight', 'seat', 'passenger'],\n    });\n\n    if (!booking) {\n      throw new NotFoundException('Booking not found');\n    }\n\n    // find passenger\n    const passenger = await this.passengersService.findOne(\n      booking.passenger.id,\n    );\n\n    if (passenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to view this booking',\n      );\n    }\n\n    return booking;\n  }\n\n  async update(id: number, attrs: Partial, user: User) {\n    const foundBooking = await this.findOne(id, user);\n    // old seat\n    const oldSeat = foundBooking.seat;\n\n    if (attrs.flightId) {\n      if (!attrs.seatId) {\n        throw new BadRequestException('A new seat id is required');\n      }\n      const foundFlight = await this.flightsService.findOne(attrs.flightId);\n      const foundSeat = foundFlight.seats.find(\n        (seat) => seat.id === attrs.seatId && seat.is_available === true,\n      );\n      if (!foundSeat) {\n        throw new NotFoundException('Seat not found or not available');\n      }\n      // Generate a price\n      let price = this.generatePrice(foundSeat, foundFlight);\n\n      foundBooking.price = price;\n      foundBooking.flight = foundFlight;\n      foundBooking.seat = foundSeat;\n    }\n\n    if (attrs.seatId && !attrs.flightId) {\n      // Find the flight\n      const foundFlight = await this.flightsService.findOne(\n        foundBooking.flight.id,\n      );\n\n      const foundSeat = foundFlight.seats.find(\n        (seat) => seat.id === attrs.seatId && seat.is_available === true,\n      );\n      if (!foundSeat) {\n        throw new NotFoundException('Seat not found or not available');\n      }\n\n      // Generate a price\n      let price = this.generatePrice(foundSeat, foundFlight);\n\n      foundBooking.price = price;\n      foundBooking.seat = foundSeat;\n    }\n\n    Object.assign(foundBooking, attrs);\n\n    try {\n      const updatedBooking = await this.repo.save(foundBooking);\n      this.eventEmitter.emit('booking.updated', {\n        id: foundBooking.seat.id,\n        is_available: false,\n      });\n\n      if (attrs.seatId) {\n        setTimeout(() => {\n          this.eventEmitter.emit('booking.updated', {\n            id: oldSeat.id,\n            is_available: true,\n          });\n        }, 10000);\n      }\n\n      return updatedBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundBooking.seat.id,\n        is_available: true,\n      });\n      this.eventEmitter.emit('booking.updated', {\n        id: oldSeat.id,\n        is_available: false,\n      });\n      throw new BadRequestException('Failed to update the booking');\n    }\n  }\n\n  async delete(id: number, user: User) {\n    const foundBooking = await this.findOne(id, user);\n\n    try {\n      const removedBooking = await this.repo.remove(foundBooking);\n\n      this.eventEmitter.emit('booking.deleted', {\n        id: foundBooking.seat.id,\n        is_available: true,\n      });\n\n      return removedBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundBooking.seat.id,\n        is_available: false,\n      });\n      throw new BadRequestException('Failed to delete the booking');\n    }\n  }\n\n  generatePrice(seat: Seat, flight: Flight) {\n    if (seat.class_type === ClassTypes.FIRST) {\n      return flight.seat_price_first_class;\n    } else if (seat.class_type === ClassTypes.BUSINESS) {\n      return flight.seat_price_business_class;\n    } else {\n      return flight.seat_base_price;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookingDto.html":{"url":"classes/CreateBookingDto.html","title":"class - CreateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/create-booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                flightId\n                            \n                            \n                                gender\n                            \n                            \n                                seatId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'flight | hotel | restaurant', enum: BookingTypes})@IsString()@IsNotEmpty()@IsEnum(BookingTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the flight'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the seat'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { DocumentTypes, Genders } from '../../passengers/passenger.entity';\nimport { BookingTypes } from '../booking.entity';\n\nexport class CreateBookingDto {\n  // Everything needed to create a passenger\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  gender: Genders;\n\n  // Everything needed to create a booking\n  @ApiProperty({\n    type: String,\n    description: 'flight | hotel | restaurant',\n    enum: BookingTypes,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingTypes)\n  booking_type: BookingTypes;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the flight',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  flightId: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the seat',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  seatId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/create-flight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airline', default: 'AB Aviation'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of arrival', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of arrival', default: '10:00 PM'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the maximum number of seats available', default: 20})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the url of the company logo', default: 'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of departure', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of departure', default: '06:00 AM'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the description of the flight', default: 'A flight from Comoros to Tanzania'})@IsString()@Length(1, 1000)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of destination of the flight', default: 'Tanzania'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of destination', default: 'Julius Nyerere International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the flight identification number', default: 'AB123'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of origin of the flight', default: 'Comoros'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of origin', default: 'Prince Said Ibrahim International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'whether the flight is refundable', default: false})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the base price of the flight', default: '1000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for business class', default: '2000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:164\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for first class', default: '3000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the status of the flight', enum: FlightStatuses, default: undefined})@IsString()@IsNotEmpty()@IsEnum(FlightStatuses)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:184\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDecimal,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { FlightStatuses } from '../flight.entity';\n\nexport class CreateFlightDto {\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airline',\n    default: 'AB Aviation',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  airline: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the flight identification number',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  flight_number: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the maximum number of seats available',\n    default: 20,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  capacity: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of origin of the flight',\n    default: 'Comoros',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  origin: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of destination of the flight',\n    default: 'Tanzania',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  destination: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of origin',\n    default: 'Prince Said Ibrahim International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  origin_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of destination',\n    default: 'Julius Nyerere International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  destination_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of departure',\n    default: '06:00 AM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  departure_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of arrival',\n    default: '10:00 PM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  arrival_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of departure',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  departure_date: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of arrival',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  arrival_date: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'whether the flight is refundable',\n    default: false,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  refundable: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the url of the company logo',\n    default:\n      'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png',\n  })\n  @IsString()\n  @IsNotEmpty()\n  company_logo: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the description of the flight',\n    default: 'A flight from Comoros to Tanzania',\n  })\n  @IsString()\n  @Length(1, 1000)\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the base price of the flight',\n    default: '1000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_base_price: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for business class',\n    default: '2000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_price_business_class: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for first class',\n    default: '3000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_price_first_class: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the status of the flight',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(FlightStatuses)\n  status: FlightStatuses;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePassengerDto.html":{"url":"classes/CreatePassengerDto.html","title":"class - CreatePassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/create-passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString, Length } from 'class-validator';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class CreatePassengerDto {\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  gender: Genders;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/create-seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flightId\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the class type of the seat', enum: ClassTypes, default: 'economy'})@IsString()@IsNotEmpty()@IsEnum(ClassTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the flight id'})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'the availability of the seat', default: true})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the seat number', default: '1A'})@IsString()@Length(1, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\nexport class CreateSeatDto {\n  @ApiProperty({\n    type: String,\n    description: 'the seat number',\n    default: '1A',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  seat_number: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'the availability of the seat',\n    default: true,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  is_available: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the class type of the seat',\n    enum: ClassTypes,\n    default: 'economy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ClassTypes)\n  class_type: ClassTypes;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the flight id',\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  flightId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first_name\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the first name of the user', default: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the last name of the user', default: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: String,\n    description: 'the first name of the user',\n    default: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the last name of the user',\n    default: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrentUserMiddleware.html":{"url":"injectables/CurrentUserMiddleware.html","title":"injectable - CurrentUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrentUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/middlewares/current-user.middleware.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/users/middlewares/current-user.middleware.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailVerificationDto.html":{"url":"classes/EmailVerificationDto.html","title":"class - EmailVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/email-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/email-verification.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class EmailVerificationDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Flight.html":{"url":"entities/Flight.html","title":"entity - Flight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                bookings\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                created_at\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                id\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                seats\n                            \n                            \n                                status\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'time', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bookings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Booking[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, booking => booking.flight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'time', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1000, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Seat[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, seat => seat.flight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: FlightStatuses, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:164\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Booking } from 'src/bookings/booking.entity';\nimport { Seat } from 'src/seats/seat.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum FlightStatuses {\n  SCHEDULED = 'scheduled',\n  DELAYED = 'delayed',\n  IN_AIR = 'in_air',\n  EXPECTED = 'expected',\n  DIVERTED = 'diverted',\n  RECOVERY = 'recovery',\n  LANDED = 'landed',\n  ARRIVED = 'arrived',\n  CANCELLED = 'cancelled',\n  NO_TAKEOFF_INFO = 'no_takeoff_info',\n  PAST_FLIGHT = 'past_flight',\n}\n@Entity()\nexport class Flight {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  airline: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  flight_number: string;\n\n  @Column({\n    type: 'int',\n    nullable: false,\n  })\n  capacity: number;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  origin: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  destination: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  origin_airport_name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  destination_airport_name: string;\n\n  @Column({\n    type: 'time',\n    nullable: false,\n  })\n  departure_time: string;\n\n  @Column({\n    type: 'time',\n    nullable: false,\n  })\n  arrival_time: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  departure_date: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  arrival_date: string;\n\n  @Column({\n    type: 'boolean',\n    nullable: false,\n    default: false,\n  })\n  refundable: boolean;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n  })\n  company_logo: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1000,\n    nullable: false,\n  })\n  description: string;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_base_price: number;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_price_business_class: number;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_price_first_class: number;\n\n  @Column({\n    type: 'enum',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n    nullable: false,\n  })\n  status: FlightStatuses;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  // The first argument is only for solving circular dependency issue\n  @OneToMany(() => Seat, (seat) => seat.flight)\n  seats: Seat[];\n\n  @OneToMany(() => Booking, (booking) => booking.flight)\n  bookings: Booking[];\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Flight inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Flight updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Flight removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFlight\n                            \n                            \n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Async\n                                getFlight\n                            \n                            \n                                    Async\n                                getFlights\n                            \n                            \n                                    Async\n                                updateFlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(body: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The flight was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AdminGuard)@HttpCode(200)@ApiOkResponse({description: 'The flight was deleted successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiBadRequestResponse({description: 'Failed to delete the flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'The flight was found successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while finding the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlights(query: GetFlightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'The flights were found successfully'})@ApiBadRequestResponse({description: 'Failed to find the flights'})@ApiInternalServerErrorResponse({description: 'Something went wrong while finding the flights'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetFlightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlight(id: number, body: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The flight was updated successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiBadRequestResponse({description: 'Failed to update the flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AdminGuard } from '../guards/admin.guard';\nimport { CreateFlightDto } from './dtos/create-flight.dto';\nimport { GetFlightsDto } from './dtos/get-flights.dto';\nimport { UpdateFlightDto } from './dtos/update-flight.dto';\nimport { FlightsService } from './flights.service';\n\n@ApiTags('flights')\n@Controller({\n  path: 'api/flights',\n  version: '1',\n})\nexport class FlightsController {\n  constructor(private flightsService: FlightsService) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post()\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The flight was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create a new flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new flight',\n  })\n  async createFlight(@Body() body: CreateFlightDto) {\n    return this.flightsService\n      .create(body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create a new flight');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Patch('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The flight was updated successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the flight',\n  })\n  async updateFlight(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateFlightDto,\n  ) {\n    return this.flightsService\n      .update(body, id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to update the flight');\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get()\n  @ApiOkResponse({\n    description: 'The flights were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to find the flights',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while finding the flights',\n  })\n  async getFlights(@Query() query: GetFlightsDto) {\n    return this.flightsService\n      .findAll(query)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to find the flights');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while finding the flights',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'The flight was found successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while finding the flight',\n  })\n  async getFlight(@Param('id', ParseIntPipe) id: number) {\n    return this.flightsService\n      .findOne(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while finding the flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Delete('/:id')\n  @UseGuards(AdminGuard)\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The flight was deleted successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the flight',\n  })\n  async deleteFlight(@Param('id', ParseIntPipe) id: number) {\n    return this.flightsService\n      .delete(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Flight not found');\n          case 400:\n            throw new BadRequestException('Failed to delete the flight');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the flight',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Flight } from './flight.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Flight])],\n  providers: [FlightsService],\n  controllers: [FlightsController],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(flight: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flight\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateFlightDto } from './dtos/create-flight.dto';\nimport { GetFlightsDto } from './dtos/get-flights.dto';\nimport { Flight } from './flight.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(@InjectRepository(Flight) private repo: Repository) {}\n\n  async create(flight: CreateFlightDto) {\n    try {\n      const newFlight = this.repo.create(flight);\n      const createdFlight = await this.repo.save(newFlight);\n\n      return createdFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new flight');\n    }\n  }\n\n  async update(attrs: Partial, id: number) {\n    const foundFlight = await this.findOne(id);\n\n    if (!foundFlight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    Object.assign(foundFlight, attrs);\n\n    try {\n      const updatedFlight = await this.repo.save(foundFlight);\n      return updatedFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the flight');\n    }\n  }\n\n  async findOne(id: number) {\n    const flight = await this.repo.findOne(id, {\n      relations: ['seats'],\n    });\n\n    if (!flight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    return flight;\n  }\n\n  async findAll(options: Partial) {\n    const page = parseInt(options.page) || 0;\n    const limit = parseInt(options.limit) || 10;\n    try {\n      const flights = await this.repo.find({\n        skip: page * limit,\n        take: limit,\n        order: { created_at: 'DESC' },\n      });\n      const totalCount = await (await this.repo.find()).length;\n\n      return {\n        flights,\n        total_count: totalCount,\n      };\n    } catch (err) {\n      throw new BadRequestException('Failed to get the flights');\n    }\n  }\n\n  async delete(id: number) {\n    const flight = await this.findOne(id);\n\n    if (!flight) {\n      throw new NotFoundException('flight not found');\n    }\n\n    try {\n      const removedFlight = await this.repo.remove(flight);\n      return removedFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the flight');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetBookingsDto.html":{"url":"classes/GetBookingsDto.html","title":"class - GetBookingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetBookingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/get-bookings.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 10, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/get-bookings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 0, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/get-bookings.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class GetBookingsDto {\n  @ApiProperty({\n    default: 0,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  page: string;\n\n  @ApiProperty({\n    default: 10,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  limit: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetFlightsDto.html":{"url":"classes/GetFlightsDto.html","title":"class - GetFlightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetFlightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/get-flights.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 10, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/get-flights.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 0, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/get-flights.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class GetFlightsDto {\n  @ApiProperty({\n    default: 0,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  page: string;\n\n  @ApiProperty({\n    default: 10,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  limit: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Passenger.html":{"url":"entities/Passenger.html","title":"entity - Passenger","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Passenger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passenger.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bookings\n                            \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bookings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Booking[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, booking => booking.passenger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: DocumentTypes, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Genders, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Booking } from 'src/bookings/booking.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\n\nexport enum DocumentTypes {\n  PASSPORT = 'passport',\n  ID_CARD = 'id_card',\n}\n\nexport enum Genders {\n  MALE = 'male',\n  Female = 'female',\n}\n\n@Entity()\n@Unique(['user'])\nexport class Passenger {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: DocumentTypes,\n    nullable: false,\n    default: DocumentTypes.PASSPORT,\n  })\n  document_type: DocumentTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  document_number: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  date_of_birth: string;\n\n  @Column({\n    type: 'enum',\n    enum: Genders,\n    nullable: false,\n  })\n  gender: Genders;\n\n  @OneToOne(() => User, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  user: User;\n\n  @OneToMany(() => Booking, (booking) => booking.passenger)\n  bookings: Booking[];\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Passenger inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Passenger updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Passenger removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PassengerDto.html":{"url":"classes/PassengerDto.html","title":"class - PassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class PassengerDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  document_type: DocumentTypes;\n\n  @Expose()\n  document_number: string;\n\n  @Expose()\n  date_of_birth: string;\n\n  @Expose()\n  gender: Genders;\n\n  @Transform(({ obj }) => obj.user.id)\n  @Expose()\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PassengersController.html":{"url":"controllers/PassengersController.html","title":"controller - PassengersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PassengersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passengers.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPassenger\n                            \n                            \n                                    Async\n                                deletePassenger\n                            \n                            \n                                    Async\n                                getPassenger\n                            \n                            \n                                    Async\n                                getPassengers\n                            \n                            \n                                    Async\n                                updatePassenger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPassenger(body: CreatePassengerDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The passenger was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePassenger(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was deleted successfully'})@ApiBadRequestResponse({description: 'Failed to delete the passenger'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to delete this passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPassenger(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was returned successfully'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPassengers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPassengers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AdminGuard)@ApiOkResponse({description: 'The passengers were returned successfully'})@ApiBadRequestResponse({description: 'Failed to get the passengers'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting passengers'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassenger(id: number, body: UpdatePassengerDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was updated successfully'})@ApiBadRequestResponse({description: 'Failed to update the passenger'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to update this passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CurrentUser } from 'src/users/decorators/current-user.decorator';\nimport { User } from 'src/users/user.entity';\nimport { CreatePassengerDto } from './dtos/create-passenger.dto';\nimport { PassengerDto } from './dtos/passenger.dto';\nimport { UpdatePassengerDto } from './dtos/update-passenger.dto';\nimport { PassengersService } from './passengers.service';\n\n@ApiTags('passengers')\n@Serialize(PassengerDto)\n@Controller({\n  path: 'api/passengers',\n  version: '1',\n})\nexport class PassengersController {\n  constructor(private passengersService: PassengersService) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post()\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The passenger was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create a new passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new passenger',\n  })\n  async createPassenger(\n    @Body() body: CreatePassengerDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .create(body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create a new passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get()\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The passengers were returned successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the passengers',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting passengers',\n  })\n  async getPassengers() {\n    return this.passengersService\n      .findAll()\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the passengers');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting passengers',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('/me')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was returned successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the passenger',\n  })\n  async getPassenger(@CurrentUser() user: User) {\n    return this.passengersService\n      .findByUser(user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Patch(':id')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to update this passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the passenger',\n  })\n  async updatePassenger(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdatePassengerDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .update(id, body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to update this passenger',\n            );\n          case 400:\n            throw new BadRequestException('Failed to update the passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Delete(':id')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was deleted successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to delete this passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the passenger',\n  })\n  async deletePassenger(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .delete(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to delete this passenger',\n            );\n          case 400:\n            throw new BadRequestException('Failed to delete the passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the passenger',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PassengersModule.html":{"url":"modules/PassengersModule.html","title":"module - PassengersModule","body":"\n                   \n\n\n\n\n    Modules\n    PassengersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PassengersModule\n\n\n\ncluster_PassengersModule_exports\n\n\n\ncluster_PassengersModule_providers\n\n\n\n\nPassengersService \n\nPassengersService \n\n\n\nPassengersModule\n\nPassengersModule\n\nPassengersService  -->\n\nPassengersModule->PassengersService \n\n\n\n\n\nPassengersService\n\nPassengersService\n\nPassengersModule -->\n\nPassengersService->PassengersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/passengers/passengers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PassengersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PassengersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PassengersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassengersService } from './passengers.service';\nimport { PassengersController } from './passengers.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Passenger } from './passenger.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Passenger])],\n  providers: [PassengersService],\n  controllers: [PassengersController],\n  exports: [PassengersService],\n})\nexport class PassengersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PassengersService.html":{"url":"injectables/PassengersService.html","title":"injectable - PassengersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PassengersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passengers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/passengers/passengers.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(passenger: CreatePassengerDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    passenger\n                                    \n                                                CreatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User, UserRole } from '../users/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePassengerDto } from './dtos/create-passenger.dto';\nimport { Passenger } from './passenger.entity';\n\n@Injectable()\nexport class PassengersService {\n  constructor(\n    @InjectRepository(Passenger) private repo: Repository,\n  ) {}\n\n  async create(passenger: CreatePassengerDto, user: User) {\n    try {\n      const newPassenger = this.repo.create(passenger);\n      newPassenger.user = user;\n      const createdPassenger = await this.repo.save(newPassenger);\n      return createdPassenger;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new passenger');\n    }\n  }\n\n  async findAll() {\n    try {\n      const passengers = await this.repo.find({\n        relations: ['user', 'bookings'],\n      });\n\n      return passengers;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the passengers');\n    }\n  }\n\n  async findByUser(user: User) {\n    try {\n      const passengers = await this.repo.find({\n        where: { user: user },\n        relations: ['user', 'bookings'],\n      });\n\n      return passengers;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the passengers');\n    }\n  }\n\n  async findOne(id: number) {\n    const passenger = await this.repo.findOne(id, {\n      relations: ['user', 'bookings'],\n    });\n\n    if (!passenger) {\n      throw new NotFoundException('Passenger not found');\n    }\n\n    return passenger;\n  }\n\n  async update(id: number, attrs: Partial, user: User) {\n    // Check if the passenger exists\n    const foundPassenger = await this.findOne(id);\n\n    // Check if the user is linked to the passenger or is an admin\n    if (foundPassenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to update this passenger',\n      );\n    }\n\n    // Update the passenger\n    Object.assign(foundPassenger, attrs);\n\n    try {\n      const updatedPassenger = await this.repo.save(foundPassenger);\n\n      return updatedPassenger;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the passenger');\n    }\n  }\n\n  async delete(id: number, user: User) {\n    // Check if the passenger exists\n\n    const foundPassenger = await this.findOne(id);\n\n    // Check if the user is linked to the passenger or is an admin\n    if (foundPassenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to delete this passenger',\n      );\n    }\n\n    try {\n      const removedPassenger = await this.repo.remove(foundPassenger);\n      console.log(removedPassenger);\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the passenger');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetDto.html":{"url":"classes/PasswordResetDto.html","title":"class - PasswordResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/password-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the new password of the user', default: '987654321'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class PasswordResetDto {\n  @ApiProperty({\n    type: String,\n    description: 'the new password of the user',\n    default: '987654321',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            currentUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Seat.html":{"url":"entities/Seat.html","title":"entity - Seat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seat.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flight\n                            \n                            \n                                id\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ClassTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Flight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, flight => flight.seats, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Flight } from 'src/flights/flight.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\n@Entity()\n@Unique(['seat_number', 'flight'])\nexport class Seat {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n    length: 20,\n  })\n  seat_number: string;\n\n  @Column({\n    type: 'boolean',\n    default: true,\n    nullable: false,\n  })\n  is_available: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: ClassTypes,\n    default: ClassTypes.ECONOMY,\n    nullable: false,\n  })\n  class_type: ClassTypes;\n\n  @ManyToOne(() => Flight, (flight) => flight.seats, { onDelete: 'CASCADE' })\n  flight: Flight;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Seat inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Seat updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Seat removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeatDto.html":{"url":"classes/SeatDto.html","title":"class - SeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { ClassTypes } from '../seat.entity';\n\nexport class SeatDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  seat_number: string;\n\n  @Expose()\n  is_available: boolean;\n\n  @Expose()\n  class_type: ClassTypes;\n\n  @Transform(({ obj }) => obj.flight.id)\n  @Expose()\n  flightId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSeat\n                            \n                            \n                                    Async\n                                deleteSeat\n                            \n                            \n                                    Async\n                                getSeat\n                            \n                            \n                                    Async\n                                getSeats\n                            \n                            \n                                    Async\n                                updateSeat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSeat(body: CreateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The seat was created successfully'})@ApiBadRequestResponse({description: 'Failed to create the seat'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSeat(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The seat was deleted successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiBadRequestResponse({description: 'Failed to delete the seat'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeat(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'The seat was found successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSeats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'The seats were found successfully'})@ApiBadRequestResponse({description: 'Failed to get the seats'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the seats'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeat(id: number, body: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The seat was updated successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiBadRequestResponse({description: 'Failed to update the seat'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CreateSeatDto } from './dtos/create-seat.dto';\nimport { SeatDto } from './dtos/seat.dto';\nimport { UpdateSeatDto } from './dtos/update-seat.dto';\nimport { SeatsService } from './seats.service';\n\n@ApiTags('seats')\n@Serialize(SeatDto)\n@Controller({\n  path: 'api/seats',\n  version: '1',\n})\nexport class SeatsController {\n  constructor(private seatsService: SeatsService) {}\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Creates a new seat and returns the created seat only for admin user\n  @Post()\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The seat was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create the seat',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new seat',\n  })\n  async createSeat(@Body() body: CreateSeatDto) {\n    return this.seatsService\n      .create(body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create the seat');\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns all seats\n  @Get()\n  @ApiOkResponse({\n    description: 'The seats were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the seats',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the seats',\n  })\n  async getSeats() {\n    return this.seatsService\n      .findAll()\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the seats');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the seats',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns a single seat\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'The seat was found successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the seat',\n  })\n  async getSeat(@Param('id', ParseIntPipe) id: number) {\n    return this.seatsService\n      .findOne(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Updates a single seat and returns the updated seat only for admin user\n  @Patch('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The seat was updated successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the seat',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the seat',\n  })\n  async updateSeat(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateSeatDto,\n  ) {\n    return this.seatsService\n      .update(id, body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          case 400:\n            throw new BadRequestException('Failed to update the seat');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Deletes a single seat and returns the deleted seat only for admin user\n  @Delete('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The seat was deleted successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the seat',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the seat',\n  })\n  async deleteSeat(@Param('id', ParseIntPipe) id: number) {\n    return this.seatsService\n      .delete(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          case 400:\n            throw new BadRequestException('Failed to delete the seat');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the seat',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_imports\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\n\nFlightsModule\n\nFlightsModule\n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsModule -->\n\nFlightsModule->SeatsModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FlightsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Seat } from './seat.entity';\nimport { FlightsModule } from 'src/flights/flights.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Seat]), FlightsModule],\n  providers: [SeatsService],\n  controllers: [SeatsController],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                handleBookingEvents\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository, flightsService: FlightsService)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightsService\n                                                  \n                                                        \n                                                                        FlightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(seat: CreateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seat\n                                    \n                                                CreateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleBookingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleBookingEvents(payload: BookingEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('booking.*', {async: true})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                BookingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BookingEvent } from 'src/bookings/interfaces/BookingCreatedEvent';\nimport { FlightsService } from 'src/flights/flights.service';\nimport { Repository } from 'typeorm';\nimport { CreateSeatDto } from './dtos/create-seat.dto';\nimport { Seat } from './seat.entity';\n\n@Injectable()\nexport class SeatsService {\n  constructor(\n    @InjectRepository(Seat) private repo: Repository,\n    private flightsService: FlightsService,\n  ) {}\n\n  async create(seat: CreateSeatDto) {\n    // Check if the flight exists\n    const flight = await this.flightsService.findOne(seat.flightId);\n\n    if (!flight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    try {\n      const newSeat = this.repo.create(seat);\n      newSeat.flight = flight;\n      const createdSeat = await this.repo.save(newSeat);\n\n      return createdSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to create the seat');\n    }\n  }\n\n  async findOne(id: number) {\n    const seat = await this.repo.findOne(id, {\n      relations: ['flight'],\n    });\n\n    if (!seat) {\n      throw new NotFoundException('Seat not found');\n    }\n\n    return seat;\n  }\n\n  async findAll() {\n    try {\n      const seats = await this.repo.find({\n        relations: ['flight'],\n      });\n      return seats;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the seats');\n    }\n  }\n\n  async update(id: number, attrs: Partial) {\n    const foundSeat = await this.findOne(id);\n\n    if (!foundSeat) {\n      throw new NotFoundException('Seat not found');\n    }\n    Object.assign(foundSeat, attrs);\n\n    try {\n      const updatedSeat = await this.repo.save(foundSeat);\n\n      return updatedSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the seat');\n    }\n  }\n\n  async delete(id: number) {\n    const seat = await this.findOne(id);\n\n    if (!seat) {\n      throw new NotFoundException('Seat not found');\n    }\n\n    try {\n      const removedSeat = await this.repo.remove(seat);\n\n      return removedSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the seat');\n    }\n  }\n\n  // handle events related to bookings\n  @OnEvent('booking.*', { async: true })\n  async handleBookingEvents(payload: BookingEvent) {\n    return this.update(payload.id, { is_available: payload.is_available });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeInterceptor.html":{"url":"classes/SerializeInterceptor.html","title":"class - SerializeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dto: ClassConstructor)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/serialize.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dto\n                                                  \n                                                        \n                                                                        ClassConstructor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/serialize.interceptor.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookingDto.html":{"url":"classes/UpdateBookingDto.html","title":"class - UpdateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/update-booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                flightId\n                            \n                            \n                                seatId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'flight | hotel | restaurant', enum: BookingTypes})@IsString()@IsNotEmpty()@IsEnum(BookingTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the flight'})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the seat'})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { DocumentTypes, Genders } from '../../passengers/passenger.entity';\nimport { BookingTypes } from '../booking.entity';\n\nexport class UpdateBookingDto {\n  // Everything needed to create a booking\n  @ApiProperty({\n    type: String,\n    description: 'flight | hotel | restaurant',\n    enum: BookingTypes,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingTypes)\n  @IsOptional()\n  booking_type: BookingTypes;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the flight',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  flightId: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the seat',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  seatId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/update-flight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airline', default: 'AB Aviation'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of arrival', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of arrival', default: '10:00 PM'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the maximum number of seats available', default: 20})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the url of the company logo', default: 'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of departure', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of departure', default: '06:00 AM'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the description of the flight', default: 'A flight from Comoros to Tanzania'})@IsString()@Length(1, 1000)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of destination of the flight', default: 'Tanzania'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of destination', default: 'Julius Nyerere International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the flight identification number', default: 'AB123'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of origin of the flight', default: 'Comoros'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of origin', default: 'Prince Said Ibrahim International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'whether the flight is refundable', default: false})@IsBoolean()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the base price of the flight', default: '1000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for business class', default: '2000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for first class', default: '3000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the status of the flight', enum: FlightStatuses, default: undefined})@IsString()@IsNotEmpty()@IsEnum(FlightStatuses)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:203\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDecimal,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { FlightStatuses } from '../flight.entity';\n\nexport class UpdateFlightDto {\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airline',\n    default: 'AB Aviation',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  airline: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the flight identification number',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  flight_number: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the maximum number of seats available',\n    default: 20,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  capacity: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of origin of the flight',\n    default: 'Comoros',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  origin: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of destination of the flight',\n    default: 'Tanzania',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  destination: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of origin',\n    default: 'Prince Said Ibrahim International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  origin_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of destination',\n    default: 'Julius Nyerere International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  destination_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of departure',\n    default: '06:00 AM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  departure_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of arrival',\n    default: '10:00 PM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  arrival_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of departure',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  departure_date: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of arrival',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  arrival_date: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'whether the flight is refundable',\n    default: false,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  @IsOptional()\n  refundable: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the url of the company logo',\n    default:\n      'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  company_logo: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the description of the flight',\n    default: 'A flight from Comoros to Tanzania',\n  })\n  @IsString()\n  @Length(1, 1000)\n  @IsNotEmpty()\n  @IsOptional()\n  description: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the base price of the flight',\n    default: '1000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_base_price: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for business class',\n    default: '2000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_price_business_class: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for first class',\n    default: '3000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_price_first_class: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the status of the flight',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(FlightStatuses)\n  @IsOptional()\n  status: FlightStatuses;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePassengerDto.html":{"url":"classes/UpdatePassengerDto.html","title":"class - UpdatePassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/update-passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:54\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class UpdatePassengerDto {\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  @IsOptional()\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  @IsOptional()\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  @IsOptional()\n  gender: Genders;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/update-seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the class type of the seat', enum: ClassTypes, default: 'economy'})@IsString()@IsNotEmpty()@IsEnum(ClassTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'the availability of the seat', default: true})@IsBoolean()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the seat number', default: '1A'})@IsString()@Length(1, 20)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\nexport class UpdateSeatDto {\n  @ApiProperty({\n    type: String,\n    description: 'the seat number',\n    default: '1A',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  @IsOptional()\n  seat_number: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'the availability of the seat',\n    default: true,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  @IsOptional()\n  is_available: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the class type of the seat',\n    enum: ClassTypes,\n    default: 'economy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ClassTypes)\n  @IsOptional()\n  class_type: ClassTypes;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                is_email_verified\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', unique: true, length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  Unique,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum UserRole {\n  ADMIN = 'sysadmin',\n  CUSTOMER = 'customer',\n}\n@Entity()\n@Unique(['email'])\nexport class User {\n  // user's autogenerated id\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // user's first name\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  first_name: string;\n\n  // user's last name\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  last_name: string;\n\n  @Column({\n    type: 'varchar',\n    unique: true,\n    length: 200,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  password: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.CUSTOMER,\n    nullable: false,\n  })\n  role: UserRole;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n    nullable: false,\n  })\n  is_email_verified: boolean;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('User inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('User updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('User removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCredentialsDto.html":{"url":"classes/UserCredentialsDto.html","title":"class - UserCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserCredentialsDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                is_email_verified\n                            \n                            \n                                last_name\n                            \n                            \n                                role\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose } from 'class-transformer';\nimport { UserRole } from '../user.entity';\n\nexport class UserDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  first_name: string;\n\n  @Expose()\n  last_name: string;\n\n  @Expose()\n  email: string;\n\n  @Expose()\n  role: UserRole;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Expose()\n  is_email_verified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                signOut\n                            \n                            \n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(body: PasswordResetDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/password-reset')@HttpCode(200)@ApiOkResponse({description: 'The password reset was successful'})@ApiBadRequestResponse({description: 'Invalid token // Failed to update password of the user'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PasswordResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: CreateUserDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiCreatedResponse({description: 'The user was created successfully'})@ApiBadRequestResponse({description: 'Invalid token | Email in use | Failed to create a user'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating the user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-email-verification')@HttpCode(200)@ApiOkResponse({description: 'The email verification email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send email verification email'})@ApiInternalServerErrorResponse({description: 'Something went wrong while sending email verification email'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-password-reset-email')@HttpCode(200)@ApiOkResponse({description: 'The password reset email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send password reset email'})@ApiInternalServerErrorResponse({description: 'Something went wrong while sending password reset email'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(body: UserCredentialsDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged in'})@ApiNotFoundResponse({description: 'User not found'})@ApiUnauthorizedResponse({description: 'Incorrect credentials'})@ApiInternalServerErrorResponse({description: 'Something went wrong while logging in the user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signout')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged out'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoAmI\n                        \n                    \n                \n            \n            \n                \nwhoAmI(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('whoami')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The user was successfully fetched'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  InternalServerErrorException,\n  NotFoundException,\n  Post,\n  Session,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './decorators/current-user.decorator';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { EmailVerificationDto } from './dtos/email-verification.dto';\nimport { PasswordResetDto } from './dtos/password-reset.dto';\nimport { UserCredentialsDto } from './dtos/user-credentials.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './user.entity';\n\n@ApiTags('users')\n@Serialize(UserDto)\n@Controller({\n  path: 'api/auth',\n  version: '1',\n})\nexport class UsersController {\n  constructor(private authService: AuthService) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/send-email-verification')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The email verification email was sent successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to send email verification email',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while sending email verification email',\n  })\n  async sendEmailVerification(@Body() body: EmailVerificationDto) {\n    return this.authService\n      .sendEmailVerification(body.email)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException(\n              'Failed to send email verification email',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while sending email verification email',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/send-password-reset-email')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset email was sent successfully',\n  })\n  @ApiBadRequestResponse({ description: 'Failed to send password reset email' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while sending password reset email',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async sendPasswordResetEmail(@Body() body: EmailVerificationDto) {\n    return this.authService\n      .sendPasswordResetEmail(body.email)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException(\n              'Failed to send password reset email',\n            );\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while sending password reset email',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/password-reset')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset was successful',\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid token // Failed to update password of the user',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async passwordReset(@Body() body: PasswordResetDto, @Session() session: any) {\n    session.userId = null;\n    return this.authService\n      .passwordReset(body.token, body.newPassword)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Invalid token') {\n              throw new BadRequestException('Invalid token');\n            } else {\n              throw new BadRequestException(\n                'Failed to update password of the user',\n              );\n            }\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while resetting password',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/register')\n  @ApiCreatedResponse({\n    description: 'The user was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid token | Email in use | Failed to create a user',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating the user',\n  })\n  async register(@Body() body: CreateUserDto, @Session() session: any) {\n    return this.authService\n      .register(body)\n      .then((user) => {\n        session.userId = user.id;\n        return user;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Invalid token') {\n              throw new BadRequestException('Invalid token');\n            } else if (err.response?.message === 'Email in use') {\n              throw new BadRequestException('Email in use');\n            } else {\n              throw new BadRequestException('Failed to create user');\n            }\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating the user',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The user was successfully logged in',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  @ApiUnauthorizedResponse({ description: 'Incorrect credentials' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while logging in the user',\n  })\n  async signin(@Body() body: UserCredentialsDto, @Session() session: any) {\n    return this.authService\n      .signin(body.email, body.password)\n      .then((user) => {\n        session.userId = user.id;\n        return user;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('User not found');\n          case 401:\n            throw new UnauthorizedException('Incorrect credentials');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while logging in the user',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('whoami')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({ description: 'The user was successfully fetched' })\n  whoAmI(@CurrentUser() user: User) {\n    return user;\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/signout')\n  @HttpCode(200)\n  @ApiOkResponse({ description: 'The user was successfully logged out' })\n  signOut(@Session() session: any) {\n    session.userId = null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { CurrentUserMiddleware } from './middlewares/current-user.middleware';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, AuthService],\n})\nexport class UsersModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(CurrentUserMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(User) private repo: Repository) {}\n\n  async create(user: CreateUserDto) {\n    try {\n      const newUser = this.repo.create(user);\n      const createdUser = await this.repo.save(newUser);\n\n      return createdUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new user');\n    }\n  }\n\n  async findOne(id: number) {\n    const user = await this.repo.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  async find(email: string) {\n    const users = await this.repo.find({ email });\n\n    if (!users) {\n      throw new NotFoundException('Users not found');\n    }\n\n    return users;\n  }\n\n  async update(id: number, attrs: Partial) {\n    const user = await this.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    Object.assign(user, attrs);\n\n    const updatedUser = await this.repo.save(user);\n\n    return updatedUser;\n  }\n\n  async remove(id: number) {\n    const user = await this.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const removedUser = await this.repo.remove(user);\n\n    return removedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            cookieSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bookings/booking.entity.ts\n            \n            entity\n            Booking\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bookings/booking.entity.ts\n            \n            class\n            Booking\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/bookings/bookings.controller.ts\n            \n            controller\n            BookingsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bookings/bookings.service.ts\n            \n            injectable\n            BookingsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bookings/dtos/booking-bis.dto.ts\n            \n            class\n            BookingBisDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/bookings/dtos/booking.dto.ts\n            \n            class\n            BookingDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/bookings/dtos/create-booking.dto.ts\n            \n            class\n            CreateBookingDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bookings/dtos/get-bookings.dto.ts\n            \n            class\n            GetBookingsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bookings/dtos/update-booking.dto.ts\n            \n            class\n            UpdateBookingDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bookings/interfaces/BookingCreatedEvent.ts\n            \n            interface\n            BookingEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/flights/dtos/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/flights/dtos/get-flights.dto.ts\n            \n            class\n            GetFlightsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/flights/dtos/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/flights/flight.entity.ts\n            \n            entity\n            Flight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guards/admin.guard.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helpers/email.ts\n            \n            function\n            sendEmailWithNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializeInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            function\n            Serialize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/passengers/dtos/create-passenger.dto.ts\n            \n            class\n            CreatePassengerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/passengers/dtos/passenger.dto.ts\n            \n            class\n            PassengerDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/passengers/dtos/update-passenger.dto.ts\n            \n            class\n            UpdatePassengerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/passengers/passenger.entity.ts\n            \n            entity\n            Passenger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/passengers/passenger.entity.ts\n            \n            class\n            Passenger\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/passengers/passengers.controller.ts\n            \n            controller\n            PassengersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/passengers/passengers.service.ts\n            \n            injectable\n            PassengersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/seats/dtos/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/seats/dtos/seat.dto.ts\n            \n            class\n            SeatDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/seats/dtos/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/seat.entity.ts\n            \n            entity\n            Seat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/constants/index.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/email-verification.dto.ts\n            \n            class\n            EmailVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/password-reset.dto.ts\n            \n            class\n            PasswordResetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/user-credentials.dto.ts\n            \n            class\n            UserCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            injectable\n            CurrentUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/event-emitter : ^1.1.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/cookie-session : ^2.0.44\n        \n            @types/nodemailer : ^6.4.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-session : ^2.0.0\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.0\n        \n            helmet : ^5.0.2\n        \n            jsonwebtoken : ^8.5.1\n        \n            nodemailer : ^6.7.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BookingTypes   (src/.../booking.entity.ts)\n                        \n                        \n                            ClassTypes   (src/.../seat.entity.ts)\n                        \n                        \n                            ClassTypes   (src/.../create-seat.dto.ts)\n                        \n                        \n                            ClassTypes   (src/.../update-seat.dto.ts)\n                        \n                        \n                            DocumentTypes   (src/.../passenger.entity.ts)\n                        \n                        \n                            FlightStatuses   (src/.../flight.entity.ts)\n                        \n                        \n                            Genders   (src/.../passenger.entity.ts)\n                        \n                        \n                            UserRole   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/bookings/booking.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        BookingTypes\n                    \n                \n                        \n                            \n                                 FLIGHT\n                            \n                        \n                        \n                            \n                                Value : flight\n                            \n                        \n                        \n                            \n                                 HOTEL\n                            \n                        \n                        \n                            \n                                Value : hotel\n                            \n                        \n                        \n                            \n                                 RESTAURANT\n                            \n                        \n                        \n                            \n                                Value : restaurant\n                            \n                        \n            \n        \n\n    src/seats/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/seats/dtos/create-seat.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/seats/dtos/update-seat.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/passengers/passenger.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        DocumentTypes\n                    \n                \n                        \n                            \n                                 PASSPORT\n                            \n                        \n                        \n                            \n                                Value : passport\n                            \n                        \n                        \n                            \n                                 ID_CARD\n                            \n                        \n                        \n                            \n                                Value : id_card\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Genders\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n\n    src/flights/flight.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        FlightStatuses\n                    \n                \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 DELAYED\n                            \n                        \n                        \n                            \n                                Value : delayed\n                            \n                        \n                        \n                            \n                                 IN_AIR\n                            \n                        \n                        \n                            \n                                Value : in_air\n                            \n                        \n                        \n                            \n                                 EXPECTED\n                            \n                        \n                        \n                            \n                                Value : expected\n                            \n                        \n                        \n                            \n                                 DIVERTED\n                            \n                        \n                        \n                            \n                                Value : diverted\n                            \n                        \n                        \n                            \n                                 RECOVERY\n                            \n                        \n                        \n                            \n                                Value : recovery\n                            \n                        \n                        \n                            \n                                 LANDED\n                            \n                        \n                        \n                            \n                                Value : landed\n                            \n                        \n                        \n                            \n                                 ARRIVED\n                            \n                        \n                        \n                            \n                                Value : arrived\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n                        \n                            \n                                 NO_TAKEOFF_INFO\n                            \n                        \n                        \n                            \n                                Value : no_takeoff_info\n                            \n                        \n                        \n                            \n                                 PAST_FLIGHT\n                            \n                        \n                        \n                            \n                                Value : past_flight\n                            \n                        \n            \n        \n\n    src/users/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : sysadmin\n                            \n                        \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : customer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            sendEmailWithNodemailer   (src/.../email.ts)\n                        \n                        \n                            Serialize   (src/.../serialize.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/helpers/email.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sendEmailWithNodemailer\n                        \n                    \n                \n            \n            \n                \nsendEmailWithNodemailer(emailData: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Serialize\n                        \n                    \n                \n            \n            \n                \nSerialize(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYVANIG BACKEND 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PassengersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_BookingsModule\n\n\n\ncluster_BookingsModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_PassengersModule\n\n\n\ncluster_PassengersModule_exports\n\n\n\ncluster_PassengersModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nBookingsModule\n\nBookingsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingsModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nBookingsModule -->\n\nFlightsModule->BookingsModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsModule -->\n\nFlightsModule->SeatsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nBookingsModule -->\n\nPassengersModule->BookingsModule\n\n\n\nAppModule -->\n\nPassengersModule->AppModule\n\n\n\n\n\nPassengersService \n\nPassengersService \n\nPassengersService  -->\n\nPassengersModule->PassengersService \n\n\n\nBookingsModule -->\n\nSeatsModule->BookingsModule\n\n\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBookingsService\n\nBookingsService\n\nBookingsModule -->\n\nBookingsService->BookingsModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nPassengersService\n\nPassengersService\n\nPassengersModule -->\n\nPassengersService->PassengersModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Kaym Kassai\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cookieSession   (src/.../app.module.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../index.ts)\n                        \n                        \n                            scrypt   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie-session')\n                    \n                \n\n\n        \n    \n\n    src/users/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: never, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return request.currentUser;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/users/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.TOKEN_KEY,\n}\n                    \n                \n\n\n        \n    \n\n    src/users/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(_scrypt)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
