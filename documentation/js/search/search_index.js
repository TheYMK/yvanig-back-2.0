var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminGuard.html",[0,3.075,1,2.06]],["body/guards/AdminGuard.html",[1,3.504,2,4.31,3,0.202,4,0.202,5,0.179,6,4.79,7,4.16,8,6.668,9,0.321,10,1.937,11,5.813,12,4.982,13,0.423,14,5.518,15,1.596,16,0.015,17,1.321,18,0.296,19,1.537,20,3.666,21,1.596,22,2.896,23,0.225,24,1.134,25,0.202,26,0.255,27,2.386,28,2.887,29,4.31,30,4.79,31,2.086,32,2.896,33,5.518,34,4.31,35,2.284,36,0.012,37,0.012]],["title/controllers/AppController.html",[38,1.438,39,2.819]],["body/controllers/AppController.html",[1,2.27,3,0.159,4,0.159,5,0.141,9,0.252,10,1.663,13,0.441,16,0.015,18,0.233,21,1.663,23,0.279,24,0.891,25,0.159,26,0.2,31,1.865,36,0.01,37,0.01,38,2.1,39,4.117,40,1.585,41,3.766,42,4.744,43,6.864,44,0.892,45,4.338,46,4.441,47,5.362,48,5.679,49,5.362,50,3.767,51,4.338,52,3.206,53,3.558,54,3.558,55,4.283,56,4.338,57,4.338,58,3.766,59,1.651,60,3.173,61,2.394,62,3.359,63,3.359,64,1.039,65,4.005,66,3.766,67,3.766,68,2.394,69,3.766,70,2.27,71,1.962,72,1.962,73,4.338,74,3.389,75,0.891,76,4.338,77,4.338,78,2.695,79,1.429,80,4.338,81,2.535,82,2.27,83,2.535,84,2.394,85,2.394,86,2.27,87,2.394,88,4.49,89,2.612,90,2.143,91,2.454,92,0.891]],["title/modules/AppModule.html",[93,1.498,94,2.819]],["body/modules/AppModule.html",[3,0.132,4,0.132,5,0.117,10,1.045,13,0.277,15,1.045,16,0.015,17,1.214,18,0.194,19,1.006,21,1.045,23,0.316,24,0.742,25,0.132,26,0.167,27,1.562,32,2.749,35,2.875,36,0.009,37,0.009,39,4.199,40,1.853,65,4.314,66,3.135,72,1.634,74,2.821,90,1.128,93,1.93,94,5.712,95,1.711,96,2.403,97,3.135,98,3.135,99,3.135,100,4.614,101,4.614,102,4.057,103,4.314,104,4.314,105,4.614,106,4.614,107,2.654,108,1.796,109,1.634,110,2.821,111,2.8,112,3.151,113,3.135,114,4.403,115,5.519,116,3.612,117,4.403,118,2.821,119,5.072,120,3.612,121,5.089,122,2.821,123,5.072,124,3.135,125,2.244,126,1.634,127,3.962,128,3.135,129,2.587,130,3.612,131,3.612,132,3.612,133,3.612,134,3.612,135,3.612,136,3.612,137,2.587,138,2.587,139,3.612,140,3.612,141,3.612,142,3.612,143,3.612,144,3.612,145,3.612,146,5.863,147,2.587,148,3.612,149,3.612,150,5.072,151,2.587,152,3.612,153,3.612,154,5.072,155,4.403,156,5.072,157,5.814,158,5.072,159,3.962,160,5.072,161,5.863,162,5.072,163,3.612,164,1.993,165,3.612,166,3.612,167,3.612,168,3.612,169,3.612,170,3.612,171,3.612,172,3.612,173,3.612,174,3.612,175,3.612,176,3.612,177,3.612,178,3.612,179,3.612,180,3.612,181,3.612,182,3.612,183,3.612]],["title/injectables/AppService.html",[65,2.445,184,1.183]],["body/injectables/AppService.html",[3,0.176,4,0.176,5,0.156,9,0.28,10,1.779,13,0.52,15,1.392,16,0.015,17,1.153,18,0.33,19,1.341,21,1.779,23,0.291,24,0.989,25,0.176,26,0.222,27,2.931,31,1.779,36,0.011,37,0.011,42,4.746,58,4.179,65,3.821,69,4.179,74,4.805,75,0.989,184,1.848,185,2.281,186,4.179,187,2.477,188,7.143,189,2.782,190,4.814,191,3.95,192,3.816,193,4.483,194,4.814,195,4.814,196,1.91,197,4.814,198,4.814,199,4.814,200,4.814,201,3.741,202,4.814,203,3.76,204,4.179,205,4.814,206,6.151,207,3.371,208,4.814,209,6.151,210,4.814,211,6.151,212,4.814]],["title/guards/AuthGuard.html",[0,3.075,213,2.3]],["body/guards/AuthGuard.html",[2,4.37,3,0.205,4,0.205,5,0.182,7,4.195,8,6.694,9,0.325,10,1.953,11,5.862,12,5.005,13,0.429,15,1.618,16,0.015,17,1.339,18,0.3,19,1.558,20,3.717,21,1.618,23,0.228,24,1.15,25,0.205,26,0.258,27,2.419,28,2.927,29,4.37,31,1.618,36,0.012,37,0.012,187,2.65,196,2.22,213,3.946,214,4.857,215,5.595,216,5.595,217,5.595,218,4.37,219,5.595]],["title/injectables/AuthService.html",[184,1.183,220,2.445]],["body/injectables/AuthService.html",[3,0.062,4,0.062,5,0.055,9,0.098,10,0.813,13,0.414,15,1.56,16,0.015,17,1.291,18,0.289,19,1.502,21,1.47,22,1.566,23,0.239,24,0.346,25,0.062,26,0.078,27,3.109,31,1.47,35,1.75,36,0.005,37,0.005,49,1.316,59,0.641,71,1.272,75,1.467,86,1.894,89,2.513,90,2.093,91,1.378,121,4.681,122,1.316,147,1.206,184,0.845,185,0.798,187,2.54,189,1.272,192,2.527,196,1.865,201,1.998,203,3.969,204,3.671,207,3.379,220,1.747,221,1.316,222,2.441,223,2.441,224,2.441,225,2.441,226,2.441,227,2.441,228,1.462,229,5.392,230,1.684,231,2.813,232,3.143,233,1.684,234,4.229,235,2.197,236,2.813,237,2.627,238,1.684,239,3.029,240,2.813,241,3.671,242,1.684,243,3.219,244,2.813,245,1.684,246,2.813,247,3.764,248,1.684,249,2.441,250,2.211,251,1.684,252,0.798,253,1.046,254,1.119,255,1.316,256,1.316,257,1.684,258,0.798,259,1.316,260,1.684,261,2.197,262,1.684,263,1.684,264,1.684,265,1.684,266,0.984,267,1.462,268,2.813,269,4.229,270,2.813,271,4.229,272,6.491,273,2.813,274,2.813,275,1.684,276,2.813,277,4.229,278,1.684,279,1.684,280,1.684,281,1.684,282,1.684,283,1.684,284,4.702,285,1.684,286,2.813,287,1.684,288,1.684,289,3.621,290,2.813,291,6.491,292,5.081,293,3.621,294,3.621,295,2.813,296,1.684,297,1.684,298,2.813,299,1.684,300,1.684,301,1.684,302,1.316,303,1.684,304,4.702,305,3.621,306,3.621,307,3.621,308,3.621,309,1.684,310,2.813,311,2.813,312,1.684,313,1.684,314,1.684,315,2.441,316,2.813,317,5.651,318,2.813,319,2.813,320,4.229,321,2.813,322,4.229,323,1.552,324,4.229,325,2.969,326,2.813,327,2.813,328,2.813,329,2.813,330,4.229,331,5.651,332,5.651,333,4.229,334,2.813,335,4.229,336,2.813,337,2.813,338,2.813,339,2.813,340,2.813,341,2.813,342,4.229,343,4.229,344,2.813,345,2.813,346,2.813,347,2.441,348,2.813,349,2.813,350,4.229,351,4.229,352,2.627,353,4.229,354,3.671,355,2.813,356,2.813,357,2.813,358,2.813,359,4.229,360,1.684,361,4.229,362,2.813,363,2.813,364,2.813,365,5.081,366,2.813,367,2.813,368,2.813,369,2.813,370,2.813,371,2.813,372,2.813,373,2.813,374,1.684,375,4.229,376,2.813,377,2.813,378,2.441,379,2.441,380,2.441,381,4.414,382,2.593,383,2.813,384,2.828,385,1.716,386,2.813,387,5.392,388,5.392,389,1.684,390,1.684,391,1.684,392,1.684,393,1.684,394,3.621,395,1.684,396,1.684,397,2.441,398,5.871,399,2.659,400,1.684,401,2.659,402,2.527,403,4.411,404,3.621,405,4.229,406,2.813,407,3.621,408,1.462,409,1.462,410,5.651,411,2.441,412,3.671,413,6.365,414,2.813,415,2.441,416,1.684,417,3.621,418,3.621,419,2.441,420,2.813,421,3.671,422,3.621,423,1.684,424,1.216,425,1.684,426,1.684,427,1.684,428,2.197,429,0.881,430,1.684,431,1.684,432,2.813,433,1.684,434,1.684,435,1.462,436,1.462,437,2.813,438,1.684,439,1.684,440,3.671,441,1.684,442,0.728,443,1.684,444,1.684,445,1.462]],["title/entities/Booking.html",[446,1.865,447,1.865]],["body/entities/Booking.html",[3,0.127,4,0.127,5,0.113,9,0.202,13,0.563,16,0.015,18,0.414,23,0.254,25,0.21,26,0.16,32,3.215,36,0.009,37,0.009,44,1.137,92,1.409,352,3.881,446,2.337,447,2.337,448,2.157,449,2.712,450,0.901,451,3.564,452,3.167,453,2.667,454,1.598,455,3.317,456,3.564,457,2.919,458,3.167,459,3.564,460,4.099,461,3.812,462,2.95,463,4.94,464,3.472,465,2.825,466,2.712,467,4.88,468,5.355,469,3.472,470,4.282,471,4.932,472,5.355,473,4.88,474,3.472,475,1.496,476,3.812,477,3.472,478,4.932,479,4.282,480,3.472,481,4.282,482,3.472,483,3.013,484,3.472,485,4.384,486,2.306,487,3.472,488,2.712,489,3.853,490,3.472,491,2.712,492,3.013,493,2.712,494,3.277,495,3.277,496,3.277,497,3.853,498,4.98,499,4.98,500,4.282,501,2.486,502,3.853,503,1.645,504,3.533,505,3.533,506,4.282,507,3.277,508,3.533,509,3.472,510,3.013,511,2.306,512,5.737,513,2.306,514,2.306,515,1.645,516,2.306,517,2.306]],["title/classes/BookingBisDto.html",[26,0.182,518,3.075]],["body/classes/BookingBisDto.html",[3,0.159,4,0.159,5,0.141,9,0.252,13,0.583,16,0.015,18,0.408,23,0.234,25,0.159,26,0.266,31,1.866,36,0.01,37,0.01,44,1.179,450,1.051,451,4.009,452,3.561,454,1.797,456,4.009,459,4.009,460,4.009,465,3.107,475,1.86,518,4.496,519,1.081,520,6.681,521,3.773,522,4.009,523,5.601,524,4.622,525,5.356,526,4.346,527,4.346,528,5.364,529,4.346,530,4.346,531,4.346,532,4.346,533,4.346,534,4.346,535,2.399,536,2.539,537,4.622,538,6.453,539,4.346,540,4.346,541,3.773]],["title/classes/BookingDto.html",[26,0.182,542,2.819]],["body/classes/BookingDto.html",[3,0.168,4,0.168,5,0.149,9,0.267,13,0.59,16,0.015,18,0.413,23,0.243,25,0.168,26,0.275,36,0.011,37,0.011,44,1.193,450,1.09,451,4.119,452,3.659,454,1.846,456,4.119,459,4.119,460,4.119,465,3.175,475,1.879,519,1.142,522,4.119,523,5.755,524,4.748,525,5.333,528,5.437,535,2.536,536,2.684,537,4.748,542,4.275,543,3.988,544,4.594,545,4.594,546,5.179,547,4.594,548,4.594,549,4.594,550,4.594,551,4.594,552,4.594,553,3.988,554,4.594,555,4.594]],["title/interfaces/BookingEvent.html",[556,2.06,557,2.819]],["body/interfaces/BookingEvent.html",[3,0.217,4,0.217,5,0.193,9,0.345,16,0.014,18,0.375,22,3.217,25,0.217,36,0.013,37,0.013,450,1.278,454,2.139,475,1.781,556,3.107,557,5.012,558,4.254,559,5.155,560,4.489]],["title/controllers/BookingsController.html",[38,1.438,561,2.819]],["body/controllers/BookingsController.html",[1,0.856,3,0.06,4,0.06,5,0.053,9,0.095,10,0.794,13,0.384,15,1.448,16,0.015,17,1.199,18,0.269,19,1.394,21,1.615,23,0.262,24,0.336,25,0.06,26,0.075,31,1.824,36,0.005,37,0.005,38,1.003,40,0.598,44,0.777,46,4.074,50,3.262,52,3.201,53,3.615,54,3.615,55,3.327,59,0.623,60,2.937,61,0.903,62,2.703,63,2.703,64,0.392,68,0.903,70,0.856,71,0.74,72,0.74,78,1.706,79,1.698,81,2.703,82,2.784,83,2.703,84,2.764,85,2.764,86,3.427,87,2.764,88,5.447,89,2.854,90,2.441,91,2.209,92,1.029,164,2.553,187,2.523,193,2.072,196,1.987,213,0.956,250,2.394,252,0.775,253,2.579,258,0.775,323,3.552,385,3.684,402,0.814,424,2.414,429,2.172,442,2.783,447,3.691,453,1.758,454,1.756,455,3.088,457,2.792,458,1.515,475,1.51,515,1.301,542,1.172,561,1.966,562,1.421,563,3.547,564,3.547,565,2.745,566,3.547,567,3.547,568,3.079,569,1.636,570,2.759,571,1.636,572,1.824,573,2.579,574,1.421,575,3.998,576,1.087,577,2.356,578,1.636,579,1.636,580,1.636,581,1.636,582,1.636,583,2.759,584,1.421,585,1.636,586,1.636,587,3.079,588,1.636,589,1.636,590,1.421,591,2.145,592,3.811,593,3.079,594,2.745,595,1.636,596,1.636,597,2.759,598,1.636,599,1.636,600,2.579,601,1.636,602,2.383,603,2.974,604,2.745,605,1.636,606,1.636,607,1.172,608,3.314,609,1.017,610,1.706,611,1.824,612,2.759,613,2.579,614,1.017,615,2.77,616,1.172,617,1.172,618,1.017,619,1.172,620,2.926,621,1.172,622,1.278,623,1.172,624,1.421,625,1.636,626,2.383,627,1.172,628,1.421,629,1.515,630,1.636,631,2.553,632,2.553,633,3.074,634,3.074,635,3.074,636,1.636,637,1.636,638,1.421,639,4.152,640,2.974,641,2.579,642,5.008,643,1.172,644,1.636,645,1.636,646,3.074,647,1.824,648,1.966,649,1.278,650,1.636,651,1.421,652,1.278,653,2.974,654,0.856,655,3.604,656,3.243,657,2.77,658,2.745,659,1.278,660,2.54,661,1.017,662,1.636,663,1.636,664,1.636,665,1.636,666,1.278,667,0.903,668,1.172]],["title/modules/BookingsModule.html",[93,1.498,100,2.615]],["body/modules/BookingsModule.html",[3,0.18,4,0.18,5,0.159,16,0.015,23,0.318,24,1.009,25,0.18,26,0.227,36,0.011,37,0.011,40,2.277,93,2.371,95,2.328,96,2.952,100,5.356,102,4.434,103,4.714,104,4.714,107,3.26,108,2.443,109,2.222,111,3.439,112,3.871,125,3.051,126,2.222,193,4.689,447,2.328,536,2.87,561,4.901,624,4.264,669,4.264,670,4.264,671,4.264,672,4.912,673,4.912,674,4.139,675,4.264,676,4.912,677,4.912,678,4.912,679,4.912]],["title/injectables/BookingsService.html",[184,1.183,193,2.3]],["body/injectables/BookingsService.html",[3,0.067,4,0.067,5,0.059,9,0.106,10,0.87,13,0.464,15,1.69,16,0.015,17,1.399,18,0.313,19,1.627,21,1.69,23,0.275,24,0.375,25,0.067,26,0.084,27,3.177,31,1.803,32,2.126,35,2.419,36,0.005,37,0.005,42,2.954,48,2.747,50,2.873,59,0.695,71,1.735,89,2.484,90,2.108,91,2.013,126,0.826,137,1.309,138,1.309,155,1.586,157,1.586,164,1.008,184,0.904,185,0.866,187,2.65,189,1.361,191,2.926,193,1.758,196,2.219,201,2.454,207,3.485,250,2.407,252,0.866,253,1.869,258,0.866,325,3.09,382,1.309,385,2.107,399,2.767,401,2.767,402,2.631,412,3.33,424,2.126,429,2.007,442,2.126,447,3.092,451,1.135,452,1.008,453,2.243,454,1.93,455,2.89,456,3.761,457,2.795,458,3.225,475,1.562,485,2.954,491,1.427,492,1.586,493,1.427,503,0.866,510,1.586,536,1.068,541,1.586,560,3.642,568,2.612,570,2.954,575,3.185,583,1.214,592,1.309,593,1.586,597,1.214,602,2.612,623,1.309,626,2.612,627,1.309,628,1.586,629,1.008,648,2.747,654,1.574,655,1.586,660,1.309,661,1.869,667,1.661,680,1.586,681,1.869,682,1.999,683,3.009,684,1.214,685,2.954,686,3.267,687,3.836,688,4.447,689,1.827,690,1.999,691,3.009,692,1.827,693,1.827,694,2.612,695,3.514,696,1.827,697,1.586,698,1.827,699,3.009,700,1.827,701,1.827,702,2.954,703,1.827,704,1.827,705,1.214,706,1.586,707,1.827,708,1.135,709,1.135,710,1.827,711,4.132,712,5.072,713,1.827,714,1.827,715,5.255,716,3.836,717,3.836,718,1.827,719,3.836,720,1.827,721,1.827,722,1.827,723,1.827,724,1.827,725,1.135,726,1.827,727,1.135,728,1.827,729,1.135,730,1.827,731,1.135,732,1.827,733,1.827,734,3.836,735,1.827,736,1.827,737,1.827,738,1.827,739,1.827,740,1.827,741,3.009,742,1.827,743,1.427,744,1.827,745,3.009,746,3.836,747,2.155,748,1.586,749,2.747,750,1.586,751,1.999,752,1.586,753,1.586,754,1.586,755,1.586,756,2.155,757,2.612,758,1.586,759,1.586,760,1.214,761,1.827,762,1.827,763,1.427,764,1.427,765,1.427,766,3.836,767,2.548,768,1.827,769,1.827,770,3.836,771,3.009,772,4.917,773,1.827,774,1.827,775,3.009,776,1.827,777,1.827,778,1.827,779,1.827,780,4.447,781,3.009,782,3.836,783,5.289,784,1.827,785,3.009,786,1.827,787,1.827,788,3.009,789,1.827,790,3.009,791,1.827,792,1.827,793,3.009,794,1.827,795,1.827,796,3.009,797,1.827,798,1.827,799,1.827,800,1.827,801,1.827,802,1.427,803,1.827,804,1.586,805,1.827,806,1.586,807,1.827,808,1.827,809,3.836,810,1.827,811,1.586,812,1.827]],["title/interfaces/ClassConstructor.html",[556,2.06,813,2.615]],["body/interfaces/ClassConstructor.html",[3,0.181,4,0.181,5,0.161,7,3.077,12,4.161,16,0.015,20,4.161,23,0.294,24,1.018,25,0.229,26,0.289,28,3.277,31,1.987,35,2.05,36,0.011,37,0.011,52,3.115,72,2.24,90,1.546,109,2.833,235,3.868,239,4.486,535,2.733,556,2.591,558,3.547,813,4.795,814,3.547,815,4.299,816,5.437,817,5.437,818,5.437,819,3.868,820,4.299,821,4.299,822,4.299,823,4.299,824,3.868,825,3.868,826,4.299,827,4.299,828,3.547,829,3.868,830,4.299,831,3.547,832,5.437,833,6.266,834,4.299,835,5.437,836,5.437,837,5.437,838,4.299,839,4.299,840,4.486,841,4.892,842,4.299,843,4.299]],["title/controllers/CloudinaryController.html",[38,1.438,844,2.819]],["body/controllers/CloudinaryController.html",[3,0.158,4,0.158,5,0.14,9,0.251,10,1.659,13,0.44,15,1.659,16,0.015,17,1.373,18,0.308,19,1.597,21,1.659,23,0.29,24,0.888,25,0.158,26,0.199,31,1.982,36,0.01,37,0.01,38,2.095,40,1.58,44,0.889,52,2.852,53,3.165,54,3.165,59,1.645,60,3.552,61,2.386,68,2.386,70,2.262,71,1.955,72,1.955,81,3.351,82,3,83,3.351,84,3.165,85,3.165,86,3,87,3.165,89,2.609,90,2.14,91,2.183,92,1.178,187,2.679,196,2.275,213,2.526,323,2.386,610,2.685,617,3.096,640,4.107,844,4.107,845,3.752,846,4.609,847,5.027,848,4.323,849,4.909,850,4.323,851,4.323,852,4.323,853,4.909,854,4.323,855,4.323,856,3.998,857,3.752,858,4.323,859,5.735,860,4.323,861,4.323,862,4.323,863,4.323,864,5.109,865,5.735,866,3.752,867,4.323,868,4.323,869,4.323,870,3.377,871,3.752,872,4.323]],["title/modules/CloudinaryModule.html",[93,1.498,101,2.615]],["body/modules/CloudinaryModule.html",[3,0.207,4,0.207,5,0.184,16,0.015,23,0.297,24,1.166,25,0.207,26,0.262,36,0.012,37,0.012,40,2.488,93,2.592,95,2.688,96,3.227,101,5.222,107,3.563,108,2.822,109,2.566,111,3.759,844,5.227,856,4.883,857,4.925,873,4.925,874,4.925,875,5.674,876,5.674]],["title/injectables/CloudinaryService.html",[184,1.183,856,2.445]],["body/injectables/CloudinaryService.html",[3,0.173,4,0.173,5,0.153,9,0.275,10,1.759,13,0.516,15,1.759,16,0.015,17,1.456,18,0.326,19,1.693,21,1.759,23,0.248,24,0.972,25,0.173,26,0.218,31,1.759,35,1.958,36,0.011,37,0.011,59,1.8,75,1.544,89,2.315,90,1.899,91,2.315,184,1.827,185,2.241,187,2.745,189,3.04,196,1.876,207,2.352,347,4.105,379,5.279,380,4.105,399,2.474,401,2.474,402,3.343,421,5.279,846,4.815,847,5.251,856,3.778,864,4.815,866,5.279,870,5.251,871,5.279,877,4.105,878,4.729,879,4.729,880,4.729,881,5.279,882,4.105,883,4.729,884,4.729,885,4.729,886,4.729,887,4.729,888,4.729,889,4.729,890,4.729,891,4.729,892,4.729,893,4.729,894,3.694,895,4.729,896,6.082,897,4.729]],["title/classes/CreateBookingDto.html",[26,0.182,570,2.615]],["body/classes/CreateBookingDto.html",[3,0.135,4,0.135,5,0.12,9,0.214,13,0.55,16,0.015,18,0.422,23,0.261,25,0.135,26,0.237,36,0.009,37,0.009,44,1.112,64,0.882,75,1.6,79,1.936,92,1.436,151,3.683,424,2.224,447,1.745,450,0.939,451,3.681,453,2.08,454,1.786,455,3.244,457,1.525,460,3.984,462,2.772,465,2.326,475,1.802,504,3.683,505,3.683,519,0.916,522,3.681,524,4.244,536,2.152,570,3.417,725,3.681,727,3.681,729,3.681,731,4.191,898,6.351,899,2.877,900,2.518,901,3.683,902,3.683,903,4.017,904,4.017,905,3.936,906,3.197,907,3.197,908,4.017,909,2.877,910,2.838,911,3.197,912,4.191,913,4.017,914,4.017,915,3.197,916,3.683,917,3.683,918,3.683,919,3.984,920,3.197,921,3.683,922,3.683,923,3.683,924,2.374,925,1.832,926,2.568,927,3.681,928,2.358,929,1.745,930,1.15,931,3.683,932,4.464,933,4.464,934,2.638,935,2.877,936,2.877,937,2.152,938,2.877,939,3.197]],["title/classes/CreateFlightDto.html",[26,0.182,940,2.615]],["body/classes/CreateFlightDto.html",[3,0.079,4,0.079,5,0.071,9,0.126,13,0.57,16,0.015,17,1.372,18,0.426,22,2.13,23,0.176,25,0.079,26,0.264,32,0.94,36,0.006,37,0.006,44,1.153,64,0.521,75,1.666,79,1.989,92,1.631,159,2.706,450,0.633,453,2.609,456,3.56,458,2.969,462,1.374,465,2.228,475,1.779,519,0.541,575,2.481,632,2.718,894,2.706,900,2.609,905,3.272,910,3.163,924,2.427,925,1.081,926,2.625,927,2.152,928,2.431,929,1.03,930,0.679,937,3.758,940,2.302,941,6.491,942,1.698,943,4.201,944,3.373,945,3.373,946,3.373,947,3.373,948,3.373,949,3.373,950,5.024,951,3.373,952,3.373,953,3.373,954,5.024,955,3.373,956,3.373,957,4.201,958,3.373,959,3.373,960,3.373,961,3.007,962,1.887,963,5.731,964,2.174,965,4.275,966,4.275,967,3.464,968,2.174,969,3.007,970,2.174,971,2.174,972,2.152,973,2.174,974,2.174,975,3.007,976,3.007,977,3.007,978,3.007,979,3.748,980,2.174,981,2.174,982,4.275,983,2.174,984,3.007,985,2.174,986,2.174,987,3.748,988,3.007,989,2.174,990,2.174,991,4.275,992,2.174,993,5.723,994,4.275,995,3.748,996,3.007,997,2.174,998,3.007,999,3.007,1000,4.275,1001,3.007,1002,2.174,1003,3.007,1004,2.174,1005,1.887,1006,2.174,1007,2.174,1008,3.007,1009,3.007,1010,2.174,1011,3.007,1012,2.174,1013,2.174,1014,3.007,1015,2.174,1016,2.174,1017,2.152,1018,2.174,1019,2.174,1020,1.723,1021,2.174,1022,1.887,1023,3.573,1024,2.174,1025,2.174,1026,2.302,1027,4.275,1028,1.557,1029,3.748,1030,2.682,1031,3.007,1032,1.887,1033,3.007,1034,1.887,1035,1.698,1036,1.887,1037,1.887,1038,1.887,1039,1.698,1040,1.887]],["title/classes/CreatePassengerDto.html",[26,0.182,1041,2.615]],["body/classes/CreatePassengerDto.html",[3,0.16,4,0.16,5,0.142,9,0.255,13,0.529,16,0.015,18,0.417,23,0.264,25,0.16,26,0.267,36,0.01,37,0.01,44,1.069,64,1.05,75,1.623,79,1.894,92,1.513,151,4.147,450,1.058,455,3.329,462,2.735,465,2.619,475,1.386,519,1.09,725,4.027,727,4.027,729,4.027,731,4.452,900,2.42,903,4.523,904,4.523,905,4.306,906,3.807,908,4.523,909,3.426,910,3.196,912,4.452,913,4.523,914,4.523,915,3.807,919,4.282,920,3.807,924,2.326,925,2.181,926,2.516,928,2.418,929,2.078,930,1.369,934,3.141,935,3.426,936,3.426,937,2.562,938,3.426,1041,3.847,1042,6.221,1043,3.426,1044,4.386,1045,4.386,1046,4.386,1047,4.386,1048,2.914]],["title/classes/CreateSeatDto.html",[26,0.182,1049,2.615]],["body/classes/CreateSeatDto.html",[3,0.162,4,0.162,5,0.144,9,0.257,13,0.531,16,0.015,18,0.418,22,2.992,23,0.237,25,0.213,26,0.319,35,1.832,36,0.01,37,0.01,44,1.073,64,1.06,75,1.516,79,1.898,92,1.516,450,1.064,453,2.045,454,1.232,457,3.055,462,2.583,475,1.767,519,1.1,522,4.045,560,3.804,708,4.465,743,4.55,900,2.428,924,2.333,925,2.201,926,2.523,927,3.618,928,2.197,929,2.097,930,1.382,937,2.586,996,3.842,1017,3.618,1020,2.897,1026,3.87,1030,2.749,1049,3.87,1050,5.615,1051,3.17,1052,4.663,1053,4.663,1054,4.426,1055,4.426,1056,4.426,1057,4.426,1058,4.426,1059,4.426,1060,3.842,1061,4.426,1062,4.663,1063,3.842,1064,3.842]],["title/classes/CreateUserDto.html",[26,0.182,237,2.445]],["body/classes/CreateUserDto.html",[3,0.164,4,0.164,5,0.145,9,0.26,13,0.533,16,0.015,17,1.665,18,0.411,23,0.239,25,0.164,26,0.271,36,0.011,37,0.011,44,1.078,64,1.073,75,1.657,79,1.903,92,1.573,234,4.795,237,3.649,243,2.784,247,4.484,250,2.39,450,1.073,519,1.115,631,3.242,900,2.441,924,2.342,926,2.534,928,2.346,930,1.4,1020,2.922,1065,6.266,1066,3.502,1067,4.693,1068,4.693,1069,4.483,1070,4.483,1071,4.483,1072,4.483,1073,3.892,1074,4.483,1075,4.589,1076,4.589,1077,4.589,1078,4.589,1079,3.502,1080,4.483,1081,4.589,1082,3.502,1083,3.892,1084,3.892,1085,3.892,1086,3.502,1087,3.502]],["title/injectables/CurrentUserMiddleware.html",[184,1.183,1088,2.615]],["body/injectables/CurrentUserMiddleware.html",[3,0.176,4,0.176,5,0.156,7,2.991,9,0.28,10,1.779,13,0.472,15,1.779,16,0.015,17,1.473,18,0.33,19,1.713,21,1.392,23,0.291,24,0.989,25,0.176,26,0.222,27,2.66,28,3.862,36,0.011,37,0.011,72,2.177,82,3.547,147,4.406,184,1.848,185,2.281,187,2.477,189,2.177,192,3.754,207,2.394,228,4.179,250,2.23,254,3.198,266,2.813,556,2.519,620,2.813,831,5.116,840,5.116,1088,4.087,1089,5.295,1090,3.76,1091,4.814,1092,5.34,1093,6.201,1094,4.814,1095,4.814,1096,5.34,1097,4.805,1098,4.179,1099,4.179,1100,4.179,1101,4.805,1102,4.179,1103,4.179,1104,4.179]],["title/classes/EmailVerificationDto.html",[26,0.182,1105,2.819]],["body/classes/EmailVerificationDto.html",[3,0.189,4,0.189,5,0.168,9,0.301,13,0.494,16,0.015,18,0.412,22,3.171,23,0.262,25,0.189,26,0.297,35,2.142,36,0.012,37,0.012,44,0.998,64,1.239,75,1.507,79,1.823,92,1.507,241,6.084,243,3.574,250,2.01,450,1.176,519,1.287,900,2.26,924,2.274,926,2.26,928,2.172,930,1.616,1026,4.277,1105,4.611,1106,6.084,1107,4.492,1108,4.492,1109,5.175,1110,6.438,1111,5.175,1112,5.175,1113,5.029,1114,3.486,1115,4.043]],["title/entities/Flight.html",[446,1.865,453,1.382]],["body/entities/Flight.html",[3,0.083,4,0.083,5,0.074,9,0.132,13,0.589,16,0.015,18,0.432,22,2.185,23,0.181,25,0.131,26,0.105,32,3.476,36,0.006,37,0.006,44,1.19,50,2.6,75,1.594,79,1.107,92,1.303,352,4.68,446,1.703,447,2.77,448,1.414,450,0.656,452,2.456,453,1.261,454,1.239,457,2.42,458,2.456,459,2.765,461,4.976,462,2.183,463,5.326,465,2.869,466,1.778,467,3.948,468,4.567,475,1.6,476,2.957,481,5.075,486,1.513,488,1.778,489,2.807,493,1.778,494,2.387,495,2.387,496,2.387,497,2.807,502,2.807,503,1.079,507,2.387,511,1.513,513,1.513,514,1.513,515,1.079,516,1.513,517,1.513,632,2.789,910,3.827,929,3.502,943,3.477,944,3.477,945,3.477,946,3.477,947,3.477,948,3.477,949,3.477,950,3.477,951,3.477,952,3.477,953,3.477,954,3.477,955,3.477,956,3.477,957,3.477,958,3.477,959,3.477,960,3.477,972,2.765,1020,1.132,1023,3.655,1030,3.14,1035,2.807,1039,1.778,1116,1.778,1117,5.365,1118,2.277,1119,2.277,1120,2.277,1121,3.119,1122,3.593,1123,2.277,1124,3.593,1125,2.277,1126,2.277,1127,2.277,1128,2.277,1129,2.277,1130,2.277,1131,2.277,1132,2.277,1133,2.277,1134,2.277,1135,2.277,1136,2.277,1137,2.277,1138,2.277,1139,2.277,1140,2.277,1141,2.277,1142,2.277,1143,3.593,1144,2.277,1145,2.277,1146,2.277,1147,1.976,1148,3.863,1149,3.119,1150,3.119,1151,3.119,1152,3.119,1153,3.119,1154,3.119,1155,3.119,1156,3.119,1157,3.119,1158,3.119,1159,2.277,1160,2.277,1161,2.277,1162,2.277,1163,2.277,1164,4.451]],["title/controllers/FlightsController.html",[38,1.438,1165,2.819]],["body/controllers/FlightsController.html",[1,1.264,3,0.088,4,0.088,5,0.078,9,0.14,10,1.089,13,0.434,15,1.637,16,0.015,17,1.355,18,0.304,19,1.576,21,1.637,23,0.255,24,0.496,25,0.088,26,0.111,31,1.967,36,0.007,37,0.007,38,1.375,40,0.883,44,0.878,46,3.782,47,4.889,52,3.625,53,4.023,54,4.023,59,0.919,60,3.308,61,1.333,62,3.306,63,3.502,64,0.578,67,2.097,68,1.333,70,1.264,71,1.093,72,1.093,78,2.873,79,1.844,81,3.306,82,2.96,83,3.306,84,3.123,85,3.123,86,3.274,87,2.881,89,2.678,90,2.332,91,1.987,92,1.163,187,2.663,191,2.419,196,2.245,252,1.145,258,1.145,323,3.454,385,3.222,424,2,429,2.731,442,2,453,2.771,454,1.743,475,1.592,515,1.783,572,2.501,573,2.338,576,1.605,577,3.072,587,4.014,600,2.873,607,1.73,608,3.739,609,1.501,610,2.338,611,2.501,612,3.468,613,3.515,614,1.501,627,1.73,629,1.333,631,3.123,632,3.123,633,3.759,634,3.759,635,3.759,641,3.515,643,1.73,646,3.072,647,3.072,651,2.097,652,1.887,653,1.73,654,1.264,659,1.887,666,1.887,667,1.333,668,3.312,711,3.612,940,3.468,1165,2.696,1166,2.097,1167,3.764,1168,3.764,1169,3.764,1170,3.764,1171,4.624,1172,2.416,1173,2.097,1174,4.624,1175,2.416,1176,2.416,1177,2.416,1178,2.94,1179,3.612,1180,3.267,1181,2.416,1182,2.416,1183,2.097,1184,5.994,1185,2.416,1186,2.416,1187,3.468,1188,2.097,1189,2.416,1190,2.416,1191,2.416,1192,3.739,1193,2.097,1194,2.416,1195,2.097,1196,3.267,1197,2.097,1198,2.097,1199,2.416,1200,2.416,1201,4.42,1202,2.416,1203,5.659,1204,2.416,1205,2.416,1206,2.416,1207,2.097,1208,2.416]],["title/modules/FlightsModule.html",[93,1.498,102,2.3]],["body/modules/FlightsModule.html",[3,0.197,4,0.197,5,0.175,16,0.015,23,0.311,24,1.106,25,0.197,26,0.248,36,0.012,37,0.012,40,2.41,93,2.511,95,2.551,96,3.126,102,4.594,107,3.451,108,2.677,109,2.435,111,3.641,112,3.344,125,3.344,126,2.435,191,4.25,453,1.89,674,4.383,1028,3.855,1165,5.108,1198,4.673,1209,4.673,1210,4.673,1211,4.673,1212,5.383,1213,5.383,1214,5.383]],["title/injectables/FlightsService.html",[184,1.183,191,2.06]],["body/injectables/FlightsService.html",[3,0.101,4,0.101,5,0.09,9,0.161,10,1.21,13,0.504,15,1.831,16,0.015,17,1.516,18,0.34,19,1.763,21,1.831,23,0.258,24,0.57,25,0.101,26,0.128,27,3.099,31,1.831,36,0.008,37,0.008,42,3.728,47,4.946,48,4.313,59,1.056,71,3.242,89,2.575,90,2.162,91,2.292,126,1.255,164,1.531,184,1.257,185,1.314,187,2.791,189,1.255,191,2.189,196,2.512,201,1.531,207,3.509,252,1.314,258,1.314,325,4.292,385,2.388,399,3.151,401,3.151,402,2.995,424,2.179,429,2.636,442,2.179,452,1.531,453,2.516,454,1.677,475,1.658,503,1.314,627,1.987,647,3.348,654,2.189,667,2.31,681,2.6,682,2.78,684,1.843,685,3.728,690,2.78,694,3.632,695,4.207,697,2.408,702,2.78,705,1.843,712,3.632,747,2.997,748,2.408,749,3.609,750,2.408,751,2.78,752,2.408,753,2.408,754,2.408,755,2.408,756,1.987,757,3.632,758,2.408,759,2.408,760,1.843,767,2.78,802,3.269,804,2.408,811,3.632,940,3.728,972,1.723,1023,1.843,1028,1.987,1187,1.843,1196,2.408,1197,2.408,1215,2.408,1216,2.774,1217,4.185,1218,2.774,1219,2.774,1220,2.774,1221,2.774,1222,2.774,1223,4.185,1224,2.774,1225,2.774,1226,2.774,1227,2.774,1228,4.185,1229,2.774,1230,2.774,1231,4.185,1232,2.774,1233,4.185,1234,2.774,1235,2.774,1236,2.774,1237,2.774,1238,2.774,1239,2.774,1240,2.774,1241,2.774,1242,2.774,1243,2.774,1244,2.774,1245,2.774,1246,2.774,1247,2.774,1248,4.185,1249,2.774,1250,4.185,1251,2.774,1252,4.185,1253,2.774,1254,4.185,1255,2.774,1256,4.185,1257,2.774,1258,4.185,1259,2.774,1260,4.185,1261,2.774,1262,4.185,1263,2.774,1264,2.774,1265,4.185,1266,2.774,1267,4.185]],["title/classes/GetBookingsDto.html",[26,0.182,583,2.615]],["body/classes/GetBookingsDto.html",[3,0.196,4,0.196,5,0.174,9,0.312,13,0.505,16,0.015,18,0.353,23,0.268,25,0.196,26,0.304,32,2.849,36,0.012,37,0.012,44,1.022,64,1.286,75,1.526,92,1.354,164,3.636,325,3.849,450,1.203,519,1.335,583,4.377,660,5.321,747,5.103,749,5.103,924,2.312,928,2.404,930,1.677,1114,3.544,1268,6.185,1269,4.662,1270,5.718,1271,5.718,1272,5.371,1273,5.371]],["title/classes/GetFlightsDto.html",[26,0.182,1187,2.615]],["body/classes/GetFlightsDto.html",[3,0.196,4,0.196,5,0.174,9,0.312,13,0.505,16,0.015,18,0.353,23,0.268,25,0.196,26,0.304,32,2.849,36,0.012,37,0.012,44,1.022,64,1.286,75,1.526,92,1.354,164,3.636,325,3.849,450,1.203,519,1.335,660,5.321,747,5.103,749,5.103,924,2.312,928,2.404,930,1.677,1114,3.544,1187,4.377,1270,5.718,1271,5.718,1274,6.185,1275,4.662,1276,5.371,1277,5.371]],["title/entities/Passenger.html",[446,1.865,455,1.78]],["body/entities/Passenger.html",[3,0.145,4,0.145,5,0.128,9,0.23,13,0.561,16,0.015,18,0.413,23,0.25,25,0.225,26,0.182,32,3.219,36,0.01,37,0.01,44,1.134,50,3.594,75,1.358,92,1.11,250,2.283,352,4.299,446,2.559,447,3.385,448,2.457,450,0.987,454,1.713,455,2.443,461,4.392,462,3.029,463,4.945,465,2.443,472,4.219,473,3.089,475,1.293,476,4.087,479,3.433,483,3.433,486,2.627,494,3.589,495,3.589,496,3.589,498,4.689,500,4.689,501,2.832,503,1.874,511,2.627,513,2.627,514,2.627,515,1.874,516,2.627,517,2.627,623,2.832,725,3.821,727,3.821,729,3.821,731,3.821,910,2.981,912,4.299,919,4.299,929,2.559,934,2.832,1117,3.869,1121,3.433,1147,3.433,1148,4.689,1278,3.089,1279,5.401,1280,3.955,1281,3.955,1282,3.955,1283,3.955,1284,3.955,1285,3.955,1286,3.955,1287,4.689,1288,4.689,1289,4.689,1290,4.689,1291,3.955,1292,6.151]],["title/classes/PassengerDto.html",[26,0.182,1293,2.819]],["body/classes/PassengerDto.html",[3,0.181,4,0.181,5,0.161,9,0.288,13,0.584,16,0.015,18,0.408,23,0.255,25,0.181,26,0.289,36,0.011,37,0.011,44,1.18,75,1.484,450,1.146,454,1.915,475,1.729,519,1.234,525,5.34,528,4.924,535,2.739,537,3.554,546,3.876,725,4.271,727,4.271,729,4.271,731,4.271,912,4.271,919,4.271,1048,3.297,1101,5.371,1293,4.491,1294,4.308,1295,4.963,1296,4.963,1297,4.963,1298,4.963,1299,4.963,1300,4.963,1301,4.963]],["title/controllers/PassengersController.html",[38,1.438,1302,2.819]],["body/controllers/PassengersController.html",[1,1.075,3,0.075,4,0.075,5,0.067,9,0.119,10,0.957,13,0.429,15,1.512,16,0.015,17,1.251,18,0.28,19,1.456,21,1.616,23,0.27,24,0.422,25,0.075,26,0.095,31,1.952,36,0.006,37,0.006,38,1.209,40,0.751,44,0.866,46,3.785,52,3.605,53,4.001,54,4.001,55,4.193,59,0.782,60,3.243,61,1.134,62,3.264,63,3.433,64,0.492,68,1.134,70,1.075,71,0.929,72,0.929,78,2.582,79,1.853,81,3.264,82,2.923,83,3.264,84,3.084,85,3.084,86,3.389,87,2.885,89,2.709,90,2.326,91,1.989,92,1.148,187,2.649,196,2.217,213,1.2,250,2.428,252,0.973,253,2.582,258,0.973,323,3.483,385,2.647,424,1.798,429,3.074,442,2.416,454,1.556,455,3.589,475,1.511,515,1.568,572,2.199,573,3.247,576,1.365,577,2.762,584,1.783,590,2.873,591,2.585,592,4.001,600,2.582,607,1.471,608,3.414,609,1.276,610,2.056,611,2.199,612,3.167,613,3.471,614,1.276,615,3.247,616,1.471,617,1.471,618,1.276,619,1.471,620,3.054,621,1.471,622,1.605,623,1.471,629,1.134,631,2.885,632,2.885,633,3.473,634,3.473,635,3.473,640,2.977,641,3.471,643,1.471,646,2.762,649,4.59,653,2.977,654,1.075,656,3.247,657,2.585,661,1.276,667,1.134,668,2.977,681,1.276,686,2.429,1041,3.167,1178,2.585,1179,1.605,1201,4.083,1293,1.471,1302,2.371,1303,1.783,1304,4.157,1305,4.157,1306,3.31,1307,4.157,1308,4.767,1309,4.157,1310,2.054,1311,2.054,1312,4.767,1313,2.054,1314,2.054,1315,2.054,1316,2.054,1317,2.054,1318,2.054,1319,5.587,1320,2.054,1321,2.054,1322,2.054,1323,2.054,1324,2.054,1325,2.054,1326,2.054,1327,3.414,1328,2.054,1329,2.054,1330,2.873,1331,2.054,1332,1.783,1333,2.054,1334,2.054,1335,4.157,1336,5.587,1337,2.054,1338,2.054,1339,2.054,1340,2.054,1341,1.783,1342,2.054,1343,2.054]],["title/modules/PassengersModule.html",[93,1.498,103,2.445]],["body/modules/PassengersModule.html",[3,0.197,4,0.197,5,0.175,16,0.015,23,0.311,24,1.106,25,0.197,26,0.248,36,0.012,37,0.012,40,2.41,93,2.511,95,2.551,96,3.126,103,4.884,107,3.451,108,2.677,109,2.435,111,3.641,112,3.344,125,3.344,126,2.435,455,2.435,674,4.383,686,4.746,1048,3.576,1302,5.108,1332,4.673,1344,4.673,1345,4.673,1346,4.673,1347,5.383,1348,5.383,1349,5.383]],["title/injectables/PassengersService.html",[184,1.183,686,2.3]],["body/injectables/PassengersService.html",[3,0.111,4,0.111,5,0.099,9,0.177,10,1.297,13,0.52,15,1.895,16,0.015,17,1.569,18,0.351,19,1.825,21,1.895,23,0.267,24,0.625,25,0.111,26,0.14,27,3.069,31,1.812,36,0.008,37,0.008,50,3.111,59,1.158,89,2.646,90,2.216,91,2.384,126,1.376,184,1.347,185,1.442,187,2.829,189,2.028,196,2.485,201,1.679,207,3.458,250,2.513,252,1.442,253,3.307,258,1.442,381,4.589,382,3.211,385,1.442,399,3.277,401,3.277,402,3.115,424,2.302,429,3.074,442,2.708,454,1.483,455,3.463,475,1.699,503,1.442,592,3.211,649,4.892,654,2.346,656,2.377,661,2.785,667,2.475,681,3.649,682,2.979,684,2.022,685,3.903,686,2.62,690,2.979,695,3.537,702,3.903,705,2.022,709,1.89,751,2.979,756,3.813,760,2.022,763,3.502,764,3.502,765,3.502,767,2.979,1041,3.903,1048,2.022,1330,2.641,1341,3.892,1350,2.641,1351,4.484,1352,3.043,1353,4.484,1354,3.043,1355,3.043,1356,3.043,1357,3.043,1358,3.043,1359,3.043,1360,3.043,1361,3.043,1362,3.043,1363,3.043,1364,3.043,1365,4.484,1366,3.043,1367,4.484,1368,4.484,1369,3.211,1370,4.484,1371,3.043,1372,4.484,1373,3.043,1374,3.043,1375,3.043,1376,3.043]],["title/classes/PasswordResetDto.html",[26,0.182,1377,2.819]],["body/classes/PasswordResetDto.html",[3,0.185,4,0.185,5,0.164,9,0.294,13,0.487,16,0.015,18,0.39,23,0.259,25,0.185,26,0.293,36,0.011,37,0.011,44,0.985,64,1.213,75,1.613,79,1.809,90,1.984,92,1.495,232,6.025,234,4.98,243,3.011,247,3.947,250,2.272,450,1.161,519,1.26,900,2.23,924,2.252,926,2.437,928,2.144,930,1.582,1075,4.963,1076,4.963,1077,4.963,1078,4.963,1079,3.958,1081,4.963,1082,3.958,1086,3.958,1087,3.958,1377,4.55,1378,6.025,1379,4.398,1380,5.067,1381,5.067,1382,5.067,1383,5.067]],["title/classes/RemoveImageDto.html",[26,0.182,849,2.819]],["body/classes/RemoveImageDto.html",[3,0.203,4,0.203,5,0.18,9,0.322,13,0.425,16,0.015,18,0.36,23,0.273,25,0.203,26,0.31,36,0.012,37,0.012,44,0.86,64,1.327,75,1.543,79,1.67,92,1.38,450,1.227,454,1.87,519,1.378,846,4.81,849,4.81,864,4.81,870,5.644,900,1.946,924,2.179,926,2.357,928,2.266,930,1.731,1384,5.83,1385,4.33,1386,6.716,1387,4.812,1388,4.812]],["title/interfaces/Request.html",[28,2.06,556,2.06]],["body/interfaces/Request.html",[3,0.187,4,0.187,5,0.166,7,3.181,9,0.297,16,0.015,18,0.275,19,1.781,23,0.297,24,1.052,25,0.187,26,0.236,27,2.766,28,3.822,36,0.012,37,0.012,72,2.316,82,2.679,184,1.922,187,1.871,192,3.469,207,2.547,250,2.394,254,3.402,266,2.992,450,1.168,556,2.679,558,3.667,620,4.268,831,4.581,840,4.581,1088,3.402,1089,4,1090,4,1092,4.445,1093,5.552,1096,5.552,1097,4.996,1098,4.445,1099,4.445,1100,4.445,1101,4.996,1102,4.445,1103,4.445,1104,4.445]],["title/entities/Seat.html",[446,1.865,457,1.63]],["body/entities/Seat.html",[3,0.158,4,0.158,5,0.14,9,0.251,13,0.547,16,0.015,18,0.407,22,2.962,23,0.233,25,0.209,26,0.199,32,3.169,35,2.371,36,0.01,37,0.01,44,1.106,75,1.177,92,1.407,352,4.255,446,2.714,448,2.681,450,1.046,453,2.724,454,1.79,457,2.371,461,4.272,462,2.828,463,4.868,470,3.746,472,4.474,473,4.474,475,1.371,476,4.272,486,2.867,491,3.371,494,3.806,495,3.806,496,3.806,499,4.972,501,3.091,503,2.045,511,2.867,513,2.867,514,2.867,515,2.045,516,2.867,517,2.867,560,3.757,708,4.428,929,2.714,1017,3.558,1020,2.849,1030,3.558,1052,4.605,1053,4.605,1062,4.103,1117,4.103,1389,3.371,1390,4.315,1391,5.728,1392,4.315,1393,4.315,1394,4.315,1395,4.315,1396,4.315,1397,4.315,1398,6.43]],["title/classes/SeatDto.html",[26,0.182,1399,2.819]],["body/classes/SeatDto.html",[3,0.187,4,0.187,5,0.166,9,0.297,13,0.576,16,0.015,18,0.403,22,2.762,23,0.26,25,0.187,26,0.295,36,0.011,37,0.011,44,1.165,75,1.312,450,1.167,454,1.94,475,1.748,519,1.27,522,4.329,525,5.305,528,4.99,535,2.82,537,3.66,546,3.991,553,4.435,560,4.071,708,4.329,1052,4.99,1053,4.99,1399,4.575,1400,4.435,1401,5.11,1402,5.11,1403,5.11,1404,5.11,1405,5.11,1406,3.991]],["title/controllers/SeatsController.html",[38,1.438,1407,2.819]],["body/controllers/SeatsController.html",[1,1.224,3,0.085,4,0.085,5,0.076,9,0.136,10,1.061,13,0.427,15,1.483,16,0.015,17,1.228,18,0.275,19,1.428,21,1.949,23,0.261,24,0.481,25,0.085,26,0.108,31,1.949,36,0.007,37,0.007,38,1.341,40,0.854,44,0.864,46,3.741,52,3.601,53,3.997,54,3.997,55,3.928,59,0.89,60,3.264,61,1.291,62,3.256,63,3.455,64,0.56,68,1.291,70,1.224,71,1.058,72,1.058,78,2.813,79,1.846,81,3.256,82,2.915,83,3.256,84,3.076,85,3.076,86,3.35,87,2.831,89,2.694,90,2.301,91,1.952,92,1.145,164,3.076,187,2.646,196,2.211,250,1.414,252,1.108,258,1.108,323,3.534,385,3.307,424,1.958,429,2.683,442,1.958,453,1.288,454,1.647,457,3.302,475,1.576,515,2.146,572,3.009,573,2.28,574,2.03,576,2.438,577,3.009,600,2.813,607,1.675,608,3.673,609,1.453,610,2.28,611,2.438,612,3.702,613,3.462,614,1.453,616,1.675,618,1.453,619,1.675,629,1.291,631,3.076,632,3.076,633,3.702,634,3.702,635,3.702,638,2.03,641,3.462,643,1.675,646,3.408,647,1.554,648,3.243,652,1.827,653,1.675,654,1.224,659,1.827,661,1.453,666,1.827,667,1.291,668,3.243,681,1.453,972,3.977,1049,3.408,1173,2.03,1178,3.537,1179,3.537,1180,3.185,1183,2.03,1188,2.03,1193,2.03,1369,3.243,1399,1.675,1407,2.628,1408,2.03,1409,3.67,1410,3.67,1411,3.67,1412,5.129,1413,4.529,1414,2.339,1415,2.339,1416,2.339,1417,2.339,1418,3.67,1419,2.339,1420,2.339,1421,2.339,1422,2.339,1423,2.339,1424,2.339,1425,3.673,1426,2.339,1427,3.185,1428,2.339,1429,2.813,1430,2.03,1431,2.339,1432,2.339,1433,2.339,1434,2.339,1435,5.572,1436,4.529,1437,2.339,1438,2.339,1439,2.339,1440,2.339]],["title/modules/SeatsModule.html",[93,1.498,104,2.445]],["body/modules/SeatsModule.html",[3,0.19,4,0.19,5,0.169,16,0.015,23,0.314,24,1.07,25,0.19,26,0.24,36,0.012,37,0.012,40,2.362,93,2.46,95,2.468,96,3.063,102,4.5,104,4.942,107,3.382,108,2.591,109,2.356,111,3.568,112,4.016,125,3.236,126,2.356,457,2.156,674,4.295,675,4.521,1406,4.069,1407,5.034,1429,5.025,1430,4.521,1441,4.521,1442,4.521,1443,5.209,1444,4.521,1445,5.209,1446,5.209,1447,5.209]],["title/injectables/SeatsService.html",[184,1.183,1429,2.445]],["body/injectables/SeatsService.html",[3,0.116,4,0.116,5,0.103,9,0.184,10,1.335,13,0.526,15,1.922,16,0.015,17,1.591,18,0.356,19,1.85,21,1.922,23,0.286,24,0.651,25,0.116,26,0.146,27,3.101,31,1.922,35,1.911,36,0.008,37,0.008,44,0.491,50,1.85,59,1.205,89,2.676,90,2.195,91,2.279,126,1.432,137,2.268,138,2.268,184,1.387,185,1.5,187,2.869,189,2.088,191,3.589,196,2.636,201,2.548,207,3.497,252,1.5,258,1.5,381,2.473,382,2.268,385,2.837,399,3.133,401,3.133,402,2.978,424,2.356,429,2.85,442,2.356,453,2.333,454,1.517,457,3.016,475,1.717,503,1.5,557,4.288,560,1.85,647,2.104,648,3.902,654,2.415,661,2.868,667,2.548,681,3.72,682,3.067,684,2.104,685,3.978,690,3.067,695,3.62,702,3.978,705,2.104,706,2.749,715,4.007,751,2.104,756,3.306,760,2.104,767,3.067,972,3.385,1049,3.978,1406,2.473,1427,2.749,1429,2.868,1448,2.749,1449,4.617,1450,3.167,1451,4.617,1452,3.167,1453,3.167,1454,3.167,1455,3.167,1456,4.617,1457,4.617,1458,3.167,1459,4.617,1460,3.167,1461,3.167,1462,3.167,1463,3.167,1464,3.167,1465,3.167,1466,3.167,1467,3.167,1468,4.617,1469,3.167,1470,3.167,1471,4.617,1472,3.167,1473,4.617,1474,3.167,1475,3.167,1476,3.167,1477,3.167,1478,3.167,1479,3.167,1480,3.167]],["title/classes/SerializeInterceptor.html",[26,0.182,828,2.819]],["body/classes/SerializeInterceptor.html",[3,0.168,4,0.168,5,0.149,7,3.703,9,0.266,10,1.724,12,4.66,13,0.457,15,1.724,16,0.015,17,1.427,18,0.32,19,1.66,20,4.401,21,1.326,23,0.286,24,0.942,25,0.218,26,0.275,28,3.119,31,1.916,35,1.898,36,0.011,37,0.011,52,2.965,72,2.074,90,1.432,109,2.696,189,2.074,235,4.657,239,4.27,519,1.14,535,2.531,556,2.399,813,4.83,814,3.284,815,3.981,816,5.75,817,6.088,818,5.75,819,3.582,820,3.981,821,3.981,822,3.981,823,3.981,824,3.582,825,3.582,826,3.981,827,3.981,828,4.27,829,4.657,830,5.75,831,4.744,832,5.175,833,6.088,834,3.981,835,5.175,836,5.175,837,5.175,838,3.981,839,3.981,840,4.27,841,4.657,842,3.981,843,3.981,1481,4.586,1482,4.586,1483,4.586,1484,4.586]],["title/controllers/SettingsController.html",[38,1.438,1485,2.819]],["body/controllers/SettingsController.html",[1,2.169,3,0.152,4,0.152,5,0.135,9,0.241,10,1.613,13,0.428,15,1.199,16,0.015,17,0.992,18,0.222,19,1.154,21,1.613,23,0.286,24,0.852,25,0.152,26,0.191,31,1.613,36,0.01,37,0.01,38,2.037,40,1.514,44,0.865,46,3.938,52,3.602,53,3.998,54,3.998,59,1.577,60,3.478,61,2.288,62,3.682,63,3.682,64,0.992,68,2.288,70,2.169,71,1.875,72,1.875,78,3.464,79,1.749,84,3.078,85,3.078,86,2.917,87,3.078,89,2.565,90,2.104,91,2.122,92,1.146,323,3.478,399,2.917,401,2.917,402,2.773,442,2.725,515,2.642,573,2.575,600,4.5,609,3.464,613,3.464,614,2.575,616,2.969,629,2.288,641,2.575,1485,3.994,1486,3.598,1487,5.85,1488,4.84,1489,4.145,1490,5.576,1491,6.796,1492,4.145,1493,4.145,1494,4.478,1495,4.145,1496,4.145,1497,3.598,1498,3.914,1499,3.598,1500,4.145,1501,4.145,1502,4.145,1503,4.145,1504,4.145]],["title/modules/SettingsModule.html",[93,1.498,105,2.615]],["body/modules/SettingsModule.html",[3,0.207,4,0.207,5,0.184,16,0.015,23,0.297,24,1.166,25,0.207,26,0.262,36,0.012,37,0.012,40,2.488,93,2.592,95,2.688,96,3.227,105,5.222,107,3.563,108,2.822,109,2.566,111,3.759,1485,5.227,1498,4.883,1499,4.925,1505,4.925,1506,4.925,1507,5.674,1508,5.674]],["title/injectables/SettingsService.html",[184,1.183,1498,2.445]],["body/injectables/SettingsService.html",[3,0.173,4,0.173,5,0.153,9,0.275,10,1.759,13,0.544,15,1.368,16,0.015,17,1.132,18,0.326,19,1.317,21,1.759,23,0.289,24,0.972,25,0.173,26,0.218,31,1.759,35,2.518,36,0.011,37,0.011,59,1.8,89,2.315,90,2.099,91,2.315,184,1.827,185,2.241,189,3.04,399,3.182,401,3.182,402,3.025,442,2.045,450,1.111,629,2.61,882,4.105,1487,6.16,1488,5.279,1491,6.372,1494,4.714,1497,4.105,1498,3.778,1509,4.105,1510,6.16,1511,6.082,1512,4.729,1513,6.082,1514,4.729,1515,6.722,1516,5.279,1517,5.279,1518,4.729,1519,4.729,1520,4.729,1521,4.729,1522,6.082,1523,6.722,1524,4.729,1525,4.729,1526,4.729]],["title/classes/UpdateBookingDto.html",[26,0.182,597,2.615]],["body/classes/UpdateBookingDto.html",[3,0.162,4,0.162,5,0.144,9,0.257,13,0.531,16,0.015,18,0.409,23,0.265,25,0.162,26,0.269,36,0.01,37,0.01,44,1.073,64,1.06,75,1.421,79,1.898,424,1.914,447,2.097,450,1.064,451,4.045,453,2.285,454,1.926,457,1.832,458,3.593,460,4.298,462,2.745,475,1.828,485,4.596,504,4.172,505,4.172,507,3.87,508,4.172,519,1.1,522,4.045,524,4.663,536,2.586,597,3.87,899,3.457,900,2.428,907,3.842,911,3.842,924,2.333,925,2.201,926,2.523,927,4.045,928,2.197,930,1.382,932,3.842,933,3.842,939,3.842,1114,3.575,1527,5.615,1528,4.426,1529,4.426,1530,4.426,1531,4.426,1532,4.426,1533,5.056,1534,4.426,1535,3.842]],["title/classes/UpdateBookingStatusDto.html",[26,0.182,603,2.819]],["body/classes/UpdateBookingStatusDto.html",[3,0.197,4,0.197,5,0.175,9,0.313,13,0.414,16,0.015,18,0.354,23,0.291,25,0.197,26,0.305,36,0.012,37,0.012,44,0.837,64,1.292,75,1.357,79,1.642,447,3.13,450,1.207,458,3.94,462,2.621,485,4.943,507,4.389,508,4.731,519,1.341,536,3.152,603,4.731,900,1.894,924,2.144,925,2.683,926,2.319,928,2.229,930,1.684,1114,2.683,1527,5.16,1533,5.734,1535,4.683,1536,4.683,1537,5.395,1538,5.395]],["title/classes/UpdateFlightDto.html",[26,0.182,1192,2.819]],["body/classes/UpdateFlightDto.html",[3,0.078,4,0.078,5,0.069,9,0.124,13,0.568,16,0.015,17,1.361,18,0.425,22,2.107,23,0.174,25,0.078,26,0.262,32,0.923,36,0.006,37,0.006,44,1.149,64,0.511,75,1.664,79,1.985,92,1.628,159,2.666,450,0.623,453,2.601,456,3.531,458,2.941,462,1.354,465,2.204,475,1.774,519,0.531,575,2.444,632,2.689,894,2.666,900,2.601,905,3.237,910,3.137,924,2.419,925,1.061,926,2.617,927,2.12,928,2.421,929,1.011,930,0.666,937,3.735,942,1.667,943,4.163,944,3.331,945,3.331,946,3.331,947,3.331,948,3.331,949,3.331,950,4.993,951,3.331,952,3.331,953,3.331,954,4.993,955,3.331,956,3.331,957,4.163,958,3.331,959,3.331,960,3.331,961,2.962,962,1.852,965,4.23,966,4.23,969,2.962,972,2.12,975,2.962,976,2.962,977,2.962,978,2.962,979,3.702,982,4.23,984,2.962,987,3.702,988,2.962,991,4.23,993,5.691,994,4.23,995,3.702,998,2.962,999,2.962,1000,4.23,1001,2.962,1003,2.962,1005,1.852,1008,2.962,1009,2.962,1011,2.962,1014,2.962,1017,2.12,1020,1.697,1022,1.852,1023,3.54,1026,2.267,1027,4.23,1028,1.528,1029,3.702,1030,2.649,1031,2.962,1032,1.852,1033,2.962,1034,1.852,1035,1.667,1036,1.852,1037,1.852,1038,1.852,1039,1.667,1040,1.852,1114,3.708,1192,2.444,1539,6.471,1540,5.683,1541,2.134,1542,3.413,1543,2.134,1544,2.134,1545,2.134,1546,2.134,1547,2.134,1548,2.134,1549,2.134,1550,2.134,1551,2.134,1552,2.134,1553,2.134,1554,2.134,1555,2.134,1556,2.962,1557,2.134,1558,2.134,1559,2.134,1560,2.134,1561,2.134,1562,2.134,1563,2.134,1564,2.134,1565,2.134,1566,2.134,1567,2.134,1568,2.134,1569,2.134,1570,2.134,1571,2.134]],["title/classes/UpdatePassengerDto.html",[26,0.182,1327,2.819]],["body/classes/UpdatePassengerDto.html",[3,0.159,4,0.159,5,0.141,9,0.252,13,0.527,16,0.015,18,0.417,23,0.263,25,0.159,26,0.266,36,0.01,37,0.01,44,1.065,64,1.04,75,1.62,79,1.891,92,1.509,151,4.122,450,1.051,455,3.321,462,2.725,465,2.603,475,1.378,519,1.081,725,4.009,727,4.009,729,4.009,731,4.439,900,2.411,903,4.496,904,4.496,905,4.287,908,4.496,909,3.395,910,2.399,912,4.439,913,4.496,914,4.496,919,4.267,924,2.319,925,2.162,926,2.508,928,2.411,929,2.059,930,1.357,934,3.113,935,3.395,936,3.395,937,2.539,938,3.395,1043,3.395,1048,2.888,1114,3.554,1327,4.122,1572,6.203,1573,4.346,1574,4.346,1575,4.346,1576,4.346,1577,4.346,1578,4.346,1579,4.346,1580,4.346]],["title/classes/UpdateSeatDto.html",[26,0.182,1425,2.819]],["body/classes/UpdateSeatDto.html",[3,0.169,4,0.169,5,0.15,9,0.268,13,0.51,16,0.015,18,0.413,22,3.039,23,0.244,25,0.219,26,0.324,35,1.909,36,0.011,37,0.011,44,1.03,64,1.104,75,1.534,79,1.856,92,1.534,450,1.093,457,3.09,462,2.635,475,1.432,519,1.147,560,3.881,708,4.525,743,4.674,900,2.332,924,2.281,925,2.294,926,2.467,927,2.865,928,2.241,929,2.185,930,1.44,937,2.695,1017,3.717,1020,2.976,1026,3.975,1030,2.865,1051,3.303,1052,4.757,1053,4.757,1060,4.003,1062,4.757,1063,4.003,1064,4.003,1114,3.496,1425,4.286,1556,4.003,1581,5.49,1582,4.612,1583,4.612,1584,4.612,1585,4.612,1586,4.612]],["title/classes/UpdateSettingsDto.html",[26,0.182,1494,2.615]],["body/classes/UpdateSettingsDto.html",[3,0.166,4,0.166,5,0.148,9,0.264,13,0.506,16,0.015,18,0.399,23,0.242,25,0.241,26,0.274,36,0.011,37,0.011,44,1.024,64,1.09,75,1.578,79,1.849,92,1.631,302,3.555,450,1.084,462,2.95,519,1.132,900,2.317,924,2.269,925,2.263,926,2.455,928,2.36,930,1.421,1114,3.478,1494,3.941,1587,5.463,1588,3.555,1589,6.6,1590,6.6,1591,6.6,1592,5.932,1593,4.551,1594,4.551,1595,6.296,1596,5.932,1597,5.932,1598,4.551,1599,4.551,1600,6.296,1601,5.932,1602,4.551,1603,4.551,1604,5.149,1605,5.149,1606,3.951,1607,3.951,1608,3.951,1609,4.551,1610,4.551,1611,4.551,1612,4.551,1613,4.551]],["title/classes/UpdateUserDto.html",[26,0.182,1614,2.819]],["body/classes/UpdateUserDto.html",[3,0.176,4,0.176,5,0.156,9,0.28,13,0.52,16,0.015,17,1.71,18,0.405,23,0.25,25,0.176,26,0.284,36,0.011,37,0.011,44,1.051,64,1.153,75,1.645,79,1.877,92,1.551,243,3.498,250,2.357,450,1.124,519,1.197,631,3.395,900,2.38,924,2.318,926,2.507,928,2.41,930,1.503,1020,3.059,1066,3.76,1067,4.855,1068,4.855,1083,4.179,1084,4.179,1108,4.179,1113,4.805,1114,3.553,1115,3.76,1614,4.406,1615,6.201,1616,4.814,1617,4.814,1618,4.814,1619,4.814,1620,4.814]],["title/classes/UploadImageDto.html",[26,0.182,853,2.819]],["body/classes/UploadImageDto.html",[3,0.205,4,0.205,5,0.182,9,0.325,13,0.429,16,0.015,18,0.362,23,0.275,25,0.205,26,0.312,36,0.012,37,0.012,44,0.868,64,1.339,75,1.548,79,1.679,92,1.388,450,1.234,519,1.391,847,5.275,853,4.837,864,5.523,900,1.964,924,2.192,926,2.371,928,2.279,930,1.747,1385,4.37,1387,4.857,1388,4.857,1621,5.862]],["title/entities/User.html",[250,1.229,446,1.865]],["body/entities/User.html",[3,0.13,4,0.13,5,0.116,9,0.207,13,0.566,16,0.015,17,1.203,18,0.422,22,2.733,23,0.145,25,0.184,26,0.164,32,3.419,34,2.784,35,2.08,36,0.009,37,0.009,44,1.144,75,1.491,92,1.491,243,2.758,247,3.616,250,1.569,352,4.414,411,5.052,428,4.546,446,2.381,448,2.214,450,0.918,452,3.212,454,1.76,459,3.616,461,4.594,462,2.644,463,5.206,465,2.859,466,2.784,467,4.937,468,5.401,475,1.203,476,3.867,486,2.368,488,2.784,489,3.925,494,3.338,495,3.338,496,3.338,497,3.925,501,4.169,502,3.925,503,1.689,511,2.368,513,2.368,514,2.368,515,1.689,516,2.368,517,2.368,631,1.967,709,4.14,910,4.005,929,3.438,1020,1.772,1067,4.169,1068,4.169,1117,5.197,1369,2.552,1622,2.784,1623,5.052,1624,3.564,1625,3.564,1626,3.564,1627,3.564,1628,3.564,1629,3.564,1630,3.564,1631,3.564,1632,3.564,1633,4.362,1634,3.564,1635,3.564,1636,3.093,1637,5.82]],["title/classes/UserCredentialsDto.html",[26,0.182,1638,2.819]],["body/classes/UserCredentialsDto.html",[3,0.19,4,0.19,5,0.169,9,0.302,13,0.495,16,0.015,18,0.394,23,0.263,25,0.19,26,0.298,36,0.012,37,0.012,44,1.001,64,1.244,75,1.621,79,1.826,92,1.509,243,3.578,247,4.692,250,2.293,450,1.179,519,1.292,900,2.266,924,2.279,926,2.465,928,2.178,930,1.623,1073,4.512,1082,4.06,1085,4.512,1086,4.06,1113,5.043,1115,4.06,1638,4.623,1639,6.095,1640,4.512,1641,5.198,1642,5.198,1643,5.198]],["title/classes/UserDto.html",[26,0.182,1644,2.819]],["body/classes/UserDto.html",[3,0.175,4,0.175,5,0.156,9,0.279,13,0.596,16,0.015,18,0.416,22,2.653,23,0.25,25,0.175,26,0.283,36,0.011,37,0.011,44,1.204,75,1.55,243,3.206,266,2.802,428,5.285,450,1.121,452,3.734,454,1.884,459,4.203,465,3.226,475,1.469,519,1.192,525,5.411,535,2.646,709,4.203,1067,4.846,1068,4.846,1623,5.873,1644,4.394,1645,4.162,1646,4.795,1647,4.795,1648,4.795,1649,4.795,1650,4.795,1651,4.795,1652,4.795,1653,4.795]],["title/controllers/UsersController.html",[38,1.438,1654,2.819]],["body/controllers/UsersController.html",[3,0.059,4,0.059,5,0.052,9,0.094,10,0.786,13,0.443,15,1.671,16,0.015,17,1.383,18,0.31,19,1.609,21,1.671,23,0.27,24,0.332,25,0.059,26,0.075,31,1.918,36,0.005,37,0.005,38,0.993,40,0.591,44,0.896,46,3.928,52,3.459,53,3.838,54,3.838,59,1.568,60,3.065,61,0.892,62,3.091,63,3.091,64,0.387,68,0.892,70,0.846,71,0.731,79,1.828,81,2.685,82,2.404,83,3.091,84,2.92,85,2.92,86,3.287,87,2.747,88,3.589,89,2.734,90,2.243,91,1.338,92,1.087,108,3.189,109,1.229,118,1.263,129,4.749,147,2.951,187,2.423,189,0.731,192,1.352,196,1.823,201,1.5,213,0.945,220,2.184,222,2.359,223,2.359,224,2.359,225,2.359,226,2.359,227,2.359,234,4.077,237,2.56,243,3.597,247,4.177,249,2.359,250,2.471,252,0.766,253,1.004,254,1.074,258,0.766,259,2.123,266,0.945,323,3.874,384,3.589,385,2.977,397,2.359,403,3.052,409,1.403,424,1.52,435,1.403,436,2.359,442,2.152,445,3.577,515,1.288,572,1.806,573,2.854,576,1.806,577,2.336,591,1.263,600,2.184,609,1.004,610,1.004,611,1.806,612,3.306,613,3.589,614,1.004,615,2.123,617,1.158,618,1.004,619,1.158,620,0.945,622,1.263,629,0.892,631,2.92,632,2.92,633,3.515,634,3.515,635,3.515,640,2.518,641,3.812,646,3.053,657,1.263,763,2.123,841,3.219,1105,3.789,1195,1.403,1201,4.133,1207,3.988,1377,2.951,1614,2.951,1638,2.951,1644,1.158,1654,1.946,1655,1.403,1656,2.718,1657,2.718,1658,2.718,1659,1.617,1660,2.718,1661,1.617,1662,1.617,1663,5.777,1664,2.718,1665,1.617,1666,2.718,1667,1.617,1668,1.617,1669,1.617,1670,1.617,1671,4.12,1672,1.617,1673,5.777,1674,4.977,1675,2.718,1676,4.977,1677,1.617,1678,1.617,1679,1.617,1680,1.617,1681,1.617,1682,1.617,1683,1.617,1684,4.12,1685,1.617,1686,2.718,1687,1.617,1688,3.516,1689,1.617,1690,1.617,1691,1.617,1692,1.617,1693,1.617,1694,1.617,1695,1.617,1696,2.951,1697,1.617,1698,1.617,1699,3.516,1700,1.617,1701,1.617,1702,1.617,1703,2.718,1704,1.617,1705,1.403,1706,1.617,1707,1.617,1708,1.617,1709,1.617,1710,1.617,1711,1.617,1712,1.617,1713,1.617,1714,1.617,1715,1.617,1716,1.617,1717,1.617,1718,1.617,1719,1.617,1720,1.617,1721,4.977,1722,1.617,1723,1.617,1724,1.617,1725,1.617,1726,1.617,1727,1.617,1728,4.12,1729,2.718,1730,1.617,1731,1.617,1732,1.617,1733,1.617,1734,1.617,1735,2.718,1736,1.617,1737,1.617,1738,1.617,1739,1.617,1740,1.617,1741,1.617,1742,1.617,1743,1.403,1744,1.617,1745,1.617,1746,1.617,1747,1.617,1748,1.617,1749,1.617,1750,1.617]],["title/modules/UsersModule.html",[93,1.498,106,2.615]],["body/modules/UsersModule.html",[3,0.173,4,0.173,5,0.153,10,1.365,13,0.362,15,1.365,16,0.015,17,1.13,18,0.253,19,1.314,21,1.365,23,0.318,24,0.97,25,0.173,26,0.218,36,0.011,37,0.011,40,2.219,93,2.312,95,2.237,96,2.878,106,5.194,107,3.178,108,2.347,109,2.135,111,3.352,112,2.932,113,4.097,114,5.272,115,6.155,117,4.097,118,3.687,125,2.932,126,2.135,192,3.97,220,4.665,250,1.474,254,3.136,255,3.687,266,2.758,674,4.035,1088,3.136,1654,4.81,1705,4.097,1751,4.097,1752,4.097,1753,4.097,1754,4.72,1755,4.72,1756,4.72,1757,3.687,1758,4.72,1759,4.72,1760,4.72,1761,4.72,1762,4.72,1763,4.72,1764,4.097,1765,4.72,1766,4.72,1767,4.72,1768,4.72,1769,4.72]],["title/injectables/UsersService.html",[184,1.183,192,1.958]],["body/injectables/UsersService.html",[3,0.118,4,0.118,5,0.105,9,0.188,10,1.357,13,0.53,15,1.937,16,0.015,17,1.603,18,0.359,19,1.865,21,1.937,23,0.262,24,0.665,25,0.118,26,0.149,27,3.06,31,1.937,32,1.4,36,0.008,37,0.008,42,4.02,48,3.953,49,5.017,59,1.233,71,2.737,75,1.134,89,2.629,90,2.209,91,2.1,126,1.465,184,1.41,185,1.535,187,2.853,189,1.465,192,2.334,196,2.657,201,1.788,207,3.436,237,3.759,243,2.224,250,2.382,252,1.535,258,1.535,259,2.53,266,1.892,325,3.753,384,4.311,385,2.867,399,2.887,401,2.887,402,2.745,408,2.811,424,2.386,440,4.074,442,2.386,454,1.307,475,1.603,503,1.535,654,2.455,682,3.118,684,2.152,685,4.02,690,3.118,695,3.667,702,4.02,705,2.152,709,2.012,711,3.666,751,3.118,760,2.152,764,3.666,765,2.53,767,2.152,802,2.53,806,2.811,846,3.361,1636,2.811,1743,4.074,1770,2.811,1771,3.239,1772,4.693,1773,3.239,1774,4.693,1775,3.239,1776,3.239,1777,3.239,1778,4.693,1779,3.239,1780,3.239,1781,3.239,1782,3.239,1783,3.239,1784,4.693,1785,3.239,1786,3.239,1787,4.693,1788,3.239,1789,5.519,1790,3.239,1791,3.239,1792,4.693,1793,3.239,1794,3.239,1795,3.239,1796,3.239,1797,3.239,1798,3.239,1799,3.239,1800,3.239,1801,3.239,1802,3.239]],["title/classes/VerifyEmailDto.html",[26,0.182,1696,2.819]],["body/classes/VerifyEmailDto.html",[3,0.2,4,0.2,5,0.177,9,0.318,13,0.42,16,0.015,18,0.357,23,0.271,25,0.2,26,0.307,36,0.012,37,0.012,44,0.848,64,1.309,75,1.536,79,1.656,92,1.368,234,5.091,243,3.156,250,2.079,450,1.217,519,1.36,900,1.92,924,2.161,926,2.338,930,1.707,1075,5.202,1076,5.202,1077,5.202,1078,5.202,1079,4.271,1081,5.202,1087,4.271,1696,4.77,1803,5.781,1804,4.747,1805,5.468]],["title/coverage.html",[1806,4.674]],["body/coverage.html",[0,3.486,1,1.582,5,0.098,6,2.625,16,0.015,18,0.162,26,0.37,28,1.582,36,0.008,37,0.008,38,2.536,39,2.166,41,2.625,65,1.878,90,0.944,110,2.362,127,2.362,184,2.166,186,2.625,191,1.582,192,1.504,193,1.767,213,1.767,214,2.625,220,1.878,221,3.486,237,1.878,250,1.393,256,2.362,261,2.362,325,4.841,354,2.625,446,2.96,447,2.514,449,3.486,453,1.061,455,2.019,457,1.847,518,2.362,520,2.625,521,2.625,542,2.166,543,2.625,556,2.775,557,2.166,559,2.625,561,2.166,562,2.625,570,2.009,583,2.009,597,2.009,603,2.166,618,1.878,620,1.767,621,2.166,680,2.625,686,1.767,813,2.009,814,3.799,824,4.144,828,2.166,844,2.166,845,2.625,849,2.166,853,2.166,856,1.878,877,2.625,898,2.625,899,3.486,940,2.009,941,2.625,942,3.486,1041,2.009,1042,2.625,1043,3.486,1049,2.009,1050,2.362,1051,3.196,1065,2.625,1066,3.486,1088,2.009,1089,3.486,1090,3.486,1105,2.166,1106,2.625,1107,2.625,1116,2.362,1165,2.166,1166,2.625,1187,2.009,1192,2.166,1215,2.625,1268,2.625,1269,2.625,1274,2.625,1275,2.625,1278,3.486,1293,2.166,1294,2.625,1302,2.166,1303,2.625,1327,2.166,1350,2.625,1377,2.166,1378,2.625,1379,2.625,1384,2.625,1385,3.486,1389,3.486,1399,2.166,1400,2.625,1407,2.166,1408,2.625,1425,2.166,1429,1.878,1448,2.625,1485,2.166,1486,2.625,1494,2.009,1498,1.878,1509,2.625,1527,3.486,1536,2.625,1539,2.625,1572,2.625,1581,2.362,1587,2.362,1588,2.362,1614,2.166,1615,2.625,1621,2.625,1622,3.486,1638,2.166,1639,2.625,1640,2.625,1644,2.166,1645,2.625,1654,2.166,1655,2.625,1696,2.166,1757,2.362,1770,2.625,1803,2.625,1804,2.625,1806,2.625,1807,3.024,1808,3.024,1809,3.024,1810,7.31,1811,5.857,1812,7.472,1813,6.247,1814,4.463,1815,5.305,1816,4.463,1817,5.857,1818,6.537,1819,6.762,1820,6.537,1821,4.463,1822,5.305,1823,2.625,1824,2.625,1825,2.625,1826,3.024,1827,2.625,1828,2.625,1829,3.024]],["title/dependencies.html",[96,2.245,1830,2.849]],["body/dependencies.html",[16,0.015,24,1.066,26,0.297,36,0.012,37,0.012,64,1.242,96,2.458,122,4.051,124,4.502,126,2.346,129,4.617,137,3.715,138,3.715,255,4.051,503,2.458,535,2.862,819,4.051,881,4.502,930,1.619,1097,5.036,1510,4.502,1516,4.502,1517,4.502,1831,7.339,1832,6.447,1833,5.186,1834,5.186,1835,5.186,1836,5.186,1837,5.186,1838,5.186,1839,5.186,1840,5.186,1841,5.186,1842,5.186,1843,5.186,1844,5.186,1845,5.186,1846,5.186,1847,5.186,1848,5.186,1849,5.186,1850,5.186,1851,5.186,1852,5.186,1853,5.186,1854,5.186,1855,5.186,1856,5.186,1857,5.186,1858,5.186,1859,5.186,1860,5.186,1861,5.186,1862,5.186,1863,5.186,1864,5.186,1865,5.186,1866,5.186,1867,5.186,1868,5.186]],["title/miscellaneous/enumerations.html",[1869,2.039,1870,4.113]],["body/miscellaneous/enumerations.html",[9,0.246,16,0.015,34,3.312,36,0.01,37,0.01,218,6.471,302,3.312,449,3.312,453,1.987,460,3.517,485,3.761,504,4.054,505,4.054,506,4.914,507,4.519,508,4.054,708,4.529,709,3.517,912,3.517,919,3.517,1017,4.529,1020,3.626,1023,3.761,1050,3.312,1051,4.871,1062,5.222,1116,3.312,1149,4.914,1150,4.914,1151,4.914,1152,4.914,1153,4.914,1154,4.914,1155,4.914,1156,4.914,1157,4.914,1158,4.914,1278,3.312,1287,4.914,1288,4.914,1289,4.914,1290,4.914,1369,3.036,1389,3.312,1581,3.312,1587,3.312,1588,4.978,1595,4.914,1600,4.914,1604,4.914,1605,4.914,1606,3.68,1607,3.68,1608,3.68,1622,3.312,1633,4.914,1869,2.634,1870,3.68,1871,5.661,1872,4.239,1873,4.239,1874,6.373,1875,5.661,1876,4.239,1877,4.239]],["title/miscellaneous/functions.html",[1869,2.039,1878,4.113]],["body/miscellaneous/functions.html",[9,0.345,15,2.024,16,0.014,17,1.675,18,0.375,19,1.949,36,0.013,37,0.013,256,5.466,315,5.155,378,5.155,618,4.347,813,4.649,814,4.254,825,4.639,829,4.639,1823,5.155,1824,5.155,1825,6.458,1869,3.689,1878,5.155,1879,5.939,1880,5.939,1881,5.939]],["title/index.html",[9,0.191,55,2.18,1882,3.282]],["body/index.html",[16,0.013,36,0.013,37,0.013,203,4.995,1883,6.395,1884,6.395]],["title/modules.html",[95,2.551]],["body/modules.html",[16,0.012,36,0.012,37,0.012,94,4.161,95,2.753,100,3.86,101,3.86,102,3.395,103,3.61,104,3.61,105,3.86,106,3.86,1885,8.048,1886,8.048,1887,8.048,1888,8.048]],["title/overview.html",[1889,4.674]],["body/overview.html",[2,3.359,16,0.015,36,0.01,37,0.01,40,1.571,65,3.987,94,5.785,95,2.037,96,2.708,97,3.732,98,3.732,99,3.732,100,5.231,101,4.73,102,4.433,103,4.641,104,4.771,105,4.73,106,5.04,107,2.99,108,2.138,109,1.945,164,2.373,185,2.037,191,3.908,192,3.715,193,4.364,220,3.987,415,3.732,419,3.732,448,2.671,519,1.069,558,3.08,669,3.732,670,3.732,671,3.732,686,4.364,856,3.987,873,3.732,874,3.732,1209,3.732,1210,3.732,1211,3.732,1344,3.732,1345,3.732,1346,3.732,1429,4.641,1441,3.732,1442,3.732,1444,3.732,1498,3.987,1505,3.732,1506,3.732,1751,3.732,1752,3.732,1753,3.732,1889,3.732,1890,5.715,1891,4.3,1892,4.3]],["title/properties.html",[450,0.865,1830,2.849]],["body/properties.html",[16,0.014,36,0.013,37,0.013,70,3.26,79,1.549,450,1.138,1893,6.23,1894,6.23,1895,6.23,1896,6.23,1897,6.23,1898,6.23]],["title/miscellaneous/variables.html",[1869,2.039,1899,4.113]],["body/miscellaneous/variables.html",[9,0.324,12,3.709,16,0.015,18,0.299,20,3.709,27,2.414,28,2.92,29,4.36,30,4.845,31,1.614,36,0.012,37,0.012,92,1.547,110,4.36,127,5.268,128,4.845,129,3.998,218,5.88,221,4.36,239,3.998,261,5.268,267,4.845,620,3.94,621,3.998,1757,5.268,1764,4.845,1827,4.845,1828,5.854,1869,3.468,1899,4.845,1900,5.582,1901,5.582,1902,5.582,1903,5.582,1904,5.582,1905,5.582,1906,5.582,1907,5.582]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1893,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1861,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1842,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":1868,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1841,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1812,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1816,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1826,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1814,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1819,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1821,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1810,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1813,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1820,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1822,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1815,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1818,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1817,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":905,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["01'})@isstring()@isnotempty",{"_index":906,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["01'})@isstring()@isnotempty()@isoptional",{"_index":1573,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["01t00:00:00.000z",{"_index":1033,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["01t00:00:00.000z'})@isstring()@isnotempty",{"_index":967,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["01t00:00:00.000z'})@isstring()@isnotempty()@isoptional",{"_index":1542,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["04",{"_index":635,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["06:00",{"_index":984,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["09",{"_index":1201,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["1",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.0",{"_index":1833,"title":{},"body":{"dependencies.html":{}}}],["1.25.0",{"_index":1843,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1854,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"controllers/SeatsController.html":{},"overview.html":{}}}],["100",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["1000",{"_index":1035,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["1000)@isnotempty",{"_index":989,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["1000)@isnotempty()@isoptional",{"_index":1553,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["1000.00",{"_index":1036,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["1000.00'})@isdecimal()@isnotempty",{"_index":1015,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["1000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1565,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["10000",{"_index":786,"title":{},"body":{"injectables/BookingsService.html":{}}}],["10:00",{"_index":969,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["123456",{"_index":1085,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["123456'})@isnotempty()@isstring()@minlength(6",{"_index":1073,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["123456789",{"_index":936,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["123456789'})@isstring()@isnotempty()@length(1",{"_index":909,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["16.0.0",{"_index":1849,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":904,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["1a",{"_index":1063,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["1a'})@isstring()@length(1",{"_index":1060,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["1h",{"_index":1768,"title":{},"body":{"modules/UsersModule.html":{}}}],["2",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["2.0",{"_index":1884,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":1832,"title":{},"body":{"dependencies.html":{}}}],["2.0.44",{"_index":1838,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1030,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["20)@isnotempty",{"_index":996,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{}}}],["20)@isnotempty()@isoptional",{"_index":1556,"title":{},"body":{"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["200",{"_index":910,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"entities/User.html":{}}}],["200)@isnotempty",{"_index":963,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["200)@isnotempty()@isoptional",{"_index":1540,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["200)@isoptional",{"_index":1575,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["2000.00",{"_index":1037,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["2000.00'})@isdecimal()@isnotempty",{"_index":1018,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["2000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1566,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["2020",{"_index":966,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["2022",{"_index":634,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["20})@isnumber()@isnotempty",{"_index":973,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["20})@isnumber()@isnotempty()@isoptional",{"_index":1546,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["3",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["3.0.2",{"_index":1863,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1892,"title":{},"body":{"overview.html":{}}}],["3000.00",{"_index":1038,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["3000.00'})@isdecimal()@isnotempty",{"_index":1021,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["3000.00'})@isdecimal()@isnotempty()@isoptional",{"_index":1568,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["32",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.3.0",{"_index":1867,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":657,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":646,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["5",{"_index":1891,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":1851,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1835,"title":{},"body":{"dependencies.html":{}}}],["6.4.4",{"_index":1840,"title":{},"body":{"dependencies.html":{}}}],["6.7.3",{"_index":1856,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1847,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1864,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1890,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1831,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1836,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1858,"title":{},"body":{"dependencies.html":{}}}],["8202",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["96",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["987654321",{"_index":1383,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["987654321'})@isnotempty()@isstring()@minlength(6",{"_index":1380,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["_scrypt",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["a[x",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["ab",{"_index":961,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ab123",{"_index":1029,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ab123'})@isstring()@length(1",{"_index":995,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["accès",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":1110,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["admin",{"_index":1369,"title":{},"body":{"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["adminguard",{"_index":1,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"coverage.html":{}}}],["adresse",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["afterinsert",{"_index":494,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["afterremove",{"_index":495,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["afterupdate",{"_index":496,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["airline",{"_index":943,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["airport",{"_index":993,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["airport'})@isstring()@length(1",{"_index":1001,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["align",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowed",{"_index":592,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["allsettings",{"_index":1523,"title":{},"body":{"injectables/SettingsService.html":{}}}],["allsettings.settings",{"_index":1525,"title":{},"body":{"injectables/SettingsService.html":{}}}],["already",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["am'})@isstring()@isnotempty",{"_index":985,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["am'})@isstring()@isnotempty()@isoptional",{"_index":1551,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["amount",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["api",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["api/auth",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/bookings",{"_index":637,"title":{},"body":{"controllers/BookingsController.html":{}}}],["api/cloudinary",{"_index":861,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["api/flights",{"_index":1200,"title":{},"body":{"controllers/FlightsController.html":{}}}],["api/passengers",{"_index":1334,"title":{},"body":{"controllers/PassengersController.html":{}}}],["api/seats",{"_index":1433,"title":{},"body":{"controllers/SeatsController.html":{}}}],["api/settings",{"_index":1501,"title":{},"body":{"controllers/SettingsController.html":{}}}],["api_key",{"_index":886,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":888,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibadrequestresponse",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":611,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":612,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":613,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":924,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apiproperty({default",{"_index":1270,"title":{},"body":{"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["apiproperty({type",{"_index":900,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/VerifyEmailDto.html":{}}}],["apitags",{"_index":614,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["apitags('bookings",{"_index":636,"title":{},"body":{"controllers/BookingsController.html":{}}}],["apitags('flights",{"_index":1199,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('passengers",{"_index":1333,"title":{},"body":{"controllers/PassengersController.html":{}}}],["apitags('seats",{"_index":1431,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('settings",{"_index":1500,"title":{},"body":{"controllers/SettingsController.html":{}}}],["apitags('users",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":615,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["app.controller",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_pipe",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":39,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["apply",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":94,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":823,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["argument",{"_index":1159,"title":{},"body":{"entities/Flight.html":{}}}],["arrival",{"_index":965,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["arrival_date",{"_index":944,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["arrival_time",{"_index":945,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["arrived",{"_index":1156,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["assigned",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["async",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attrs",{"_index":702,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["attrs.email",{"_index":1787,"title":{},"body":{"injectables/UsersService.html":{}}}],["attrs.flightid",{"_index":771,"title":{},"body":{"injectables/BookingsService.html":{}}}],["attrs.seatid",{"_index":772,"title":{},"body":{"injectables/BookingsService.html":{}}}],["auth.service",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["auth/email/validate?token=${token",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/register/complete?token=${token",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":213,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["author",{"_index":1896,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":220,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{}}}],["autogenerated",{"_index":1635,"title":{},"body":{"entities/User.html":{}}}],["aux",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["availability",{"_index":743,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["available",{"_index":575,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["avez",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["aviation",{"_index":979,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["aviation'})@isstring()@length(1",{"_index":962,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["avoir",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["avons",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":207,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1883,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('a",{"_index":773,"title":{},"body":{"injectables/BookingsService.html":{}}}],["badrequestexception('email",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["badrequestexception('failed",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('invalid",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["base",{"_index":1014,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["before",{"_index":833,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["besoin",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["birth",{"_index":903,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["bis.dto.ts",{"_index":521,"title":{},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["bis.dto.ts:12",{"_index":532,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:15",{"_index":527,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:18",{"_index":534,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:26",{"_index":529,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:34",{"_index":533,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:42",{"_index":531,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:6",{"_index":530,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["bis.dto.ts:9",{"_index":526,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["block",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["body.isregistration",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.newpassword",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.password",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.status",{"_index":664,"title":{},"body":{"controllers/BookingsController.html":{}}}],["body.token",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{}}}],["booking",{"_index":447,"title":{"entities/Booking.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"coverage.html":{}}}],["booking'})@apiinternalservererrorresponse({description",{"_index":594,"title":{},"body":{"controllers/BookingsController.html":{}}}],["booking.booking_type",{"_index":737,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.date_of_birth",{"_index":730,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.document_number",{"_index":728,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.document_type",{"_index":726,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.dto",{"_index":626,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["booking.dto.ts",{"_index":899,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["booking.dto.ts:22",{"_index":1529,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:23",{"_index":916,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:33",{"_index":911,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:42",{"_index":907,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:51",{"_index":1532,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts:52",{"_index":921,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:63",{"_index":902,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:71",{"_index":918,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:79",{"_index":923,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.entity",{"_index":536,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{}}}],["booking.flight",{"_index":1122,"title":{},"body":{"entities/Flight.html":{}}}],["booking.flight.id",{"_index":539,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["booking.gender",{"_index":732,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.passenger",{"_index":1279,"title":{},"body":{"entities/Passenger.html":{}}}],["booking.passenger.id",{"_index":541,"title":{},"body":{"classes/BookingBisDto.html":{},"injectables/BookingsService.html":{}}}],["booking.seat.id",{"_index":540,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["booking.seatid",{"_index":718,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking.status",{"_index":809,"title":{},"body":{"injectables/BookingsService.html":{}}}],["booking_type",{"_index":451,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["bookingbisdto",{"_index":518,"title":{"classes/BookingBisDto.html":{}},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["bookingdto",{"_index":542,"title":{"classes/BookingDto.html":{}},"body":{"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"coverage.html":{}}}],["bookingevent",{"_index":557,"title":{"interfaces/BookingEvent.html":{}},"body":{"interfaces/BookingEvent.html":{},"injectables/SeatsService.html":{},"coverage.html":{}}}],["bookings",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["bookings'})@apiinternalservererrorresponse({description",{"_index":585,"title":{},"body":{"controllers/BookingsController.html":{}}}],["bookings.controller",{"_index":678,"title":{},"body":{"modules/BookingsModule.html":{}}}],["bookings.dto",{"_index":628,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["bookings.dto.ts",{"_index":1269,"title":{},"body":{"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["bookings.dto.ts:11",{"_index":1273,"title":{},"body":{"classes/GetBookingsDto.html":{}}}],["bookings.dto.ts:19",{"_index":1272,"title":{},"body":{"classes/GetBookingsDto.html":{}}}],["bookings.foreach((booking",{"_index":808,"title":{},"body":{"injectables/BookingsService.html":{}}}],["bookings.length",{"_index":807,"title":{},"body":{"injectables/BookingsService.html":{}}}],["bookings.service",{"_index":624,"title":{},"body":{"controllers/BookingsController.html":{},"modules/BookingsModule.html":{}}}],["bookings/bookings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["bookings/bookings.service",{"_index":198,"title":{},"body":{"injectables/AppService.html":{}}}],["bookingscontroller",{"_index":561,"title":{"controllers/BookingsController.html":{}},"body":{"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"coverage.html":{}}}],["bookingsmodule",{"_index":100,"title":{"modules/BookingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules.html":{},"overview.html":{}}}],["bookingsservice",{"_index":193,"title":{"injectables/BookingsService.html":{}},"body":{"injectables/AppService.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"coverage.html":{},"overview.html":{}}}],["bookingsstats",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["bookingstatuses",{"_index":485,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["bookingstatuses.cancelled",{"_index":790,"title":{},"body":{"injectables/BookingsService.html":{}}}],["bookingstatuses.confirmed",{"_index":788,"title":{},"body":{"injectables/BookingsService.html":{}}}],["bookingstatuses.pending",{"_index":510,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{}}}],["bookingstatuses})@isstring()@isnotempty()@isenum(bookingstatuses",{"_index":1537,"title":{},"body":{"classes/UpdateBookingStatusDto.html":{}}}],["bookingstatuses})@isstring()@isnotempty()@isenum(bookingstatuses)@isoptional",{"_index":1534,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["bookingtypes",{"_index":460,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["bookingtypes})@isstring()@isnotempty()@isenum(bookingtypes",{"_index":901,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["bookingtypes})@isstring()@isnotempty()@isenum(bookingtypes)@isoptional",{"_index":1528,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["boolean",{"_index":22,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/AuthService.html":{},"interfaces/BookingEvent.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":1825,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["border",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["bouton",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["box",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["browse",{"_index":1888,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1885,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["business",{"_index":1017,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["callhandler",{"_index":817,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["canactivate",{"_index":8,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":11,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["cancelled",{"_index":507,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["capacity",{"_index":946,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["car",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["cascade",{"_index":473,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{}}}],["cascade'})@joincolumn",{"_index":479,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["case",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["catch",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["catch(async",{"_index":645,"title":{},"body":{"controllers/BookingsController.html":{}}}],["ce",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["cet",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["ci",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":1161,"title":{},"body":{"entities/Flight.html":{}}}],["class",{"_index":26,"title":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"classes/VerifyEmailDto.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["class_type",{"_index":1052,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["classconstructor",{"_index":813,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":519,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"classes/VerifyEmailDto.html":{},"overview.html":{}}}],["classtypes",{"_index":708,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["classtypes.business",{"_index":799,"title":{},"body":{"injectables/BookingsService.html":{}}}],["classtypes.economy",{"_index":1397,"title":{},"body":{"entities/Seat.html":{}}}],["classtypes.first",{"_index":797,"title":{},"body":{"injectables/BookingsService.html":{}}}],["cliquant",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["cliquez",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["cloud_name",{"_index":884,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":881,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{}}}],["cloudinary.controller",{"_index":876,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["cloudinary.service",{"_index":857,"title":{},"body":{"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{}}}],["cloudinary.v2.config",{"_index":883,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.v2.uploader.destroy(public_id",{"_index":897,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.v2.uploader.upload(image",{"_index":890,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["cloudinarycontroller",{"_index":844,"title":{"controllers/CloudinaryController.html":{}},"body":{"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"coverage.html":{}}}],["cloudinarymodule",{"_index":101,"title":{"modules/CloudinaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CloudinaryModule.html":{},"modules.html":{},"overview.html":{}}}],["cloudinaryservice",{"_index":856,"title":{"injectables/CloudinaryService.html":{}},"body":{"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bookingsmodule",{"_index":669,"title":{},"body":{"modules/BookingsModule.html":{},"overview.html":{}}}],["cluster_bookingsmodule_exports",{"_index":671,"title":{},"body":{"modules/BookingsModule.html":{},"overview.html":{}}}],["cluster_bookingsmodule_imports",{"_index":672,"title":{},"body":{"modules/BookingsModule.html":{}}}],["cluster_bookingsmodule_providers",{"_index":670,"title":{},"body":{"modules/BookingsModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule",{"_index":873,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule_providers",{"_index":874,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_flightsmodule",{"_index":1209,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":1211,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":1210,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_passengersmodule",{"_index":1344,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_passengersmodule_exports",{"_index":1346,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_passengersmodule_providers",{"_index":1345,"title":{},"body":{"modules/PassengersModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1441,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1442,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_imports",{"_index":1443,"title":{},"body":{"modules/SeatsModule.html":{}}}],["cluster_seatsmodule_providers",{"_index":1444,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_settingsmodule",{"_index":1505,"title":{},"body":{"modules/SettingsModule.html":{},"overview.html":{}}}],["cluster_settingsmodule_providers",{"_index":1506,"title":{},"body":{"modules/SettingsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1751,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1753,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1752,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":994,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["color",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["column({type",{"_index":461,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["comoros",{"_index":987,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["comoros'})@isstring()@length(1",{"_index":1005,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["company",{"_index":975,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["company_logo",{"_index":947,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["completed",{"_index":1533,"title":{},"body":{"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{}}}],["compléter",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["compris",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["compte",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":882,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/SettingsService.html":{}}}],["config('settings.db.json",{"_index":1521,"title":{},"body":{"injectables/SettingsService.html":{}}}],["configmodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["configure",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["confirmation",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirme",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmed",{"_index":506,"title":{},"body":{"entities/Booking.html":{},"miscellaneous/enumerations.html":{}}}],["confirmer",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["connecter",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"i'm",{"_index":836,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["console.log('[cancelled",{"_index":791,"title":{},"body":{"injectables/BookingsService.html":{}}}],["console.log('[handlebookingevent",{"_index":1478,"title":{},"body":{"injectables/SeatsService.html":{}}}],["console.log('booking",{"_index":512,"title":{},"body":{"entities/Booking.html":{}}}],["console.log('flight",{"_index":1164,"title":{},"body":{"entities/Flight.html":{}}}],["console.log('passenger",{"_index":1292,"title":{},"body":{"entities/Passenger.html":{}}}],["console.log('seat",{"_index":1398,"title":{},"body":{"entities/Seat.html":{}}}],["console.log('user",{"_index":1637,"title":{},"body":{"entities/User.html":{}}}],["console.log(err",{"_index":896,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["console.log(err.response?.statuscode",{"_index":1338,"title":{},"body":{"controllers/PassengersController.html":{}}}],["console.log(removedpassenger",{"_index":1376,"title":{},"body":{"injectables/PassengersService.html":{}}}],["const",{"_index":27,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1758,"title":{},"body":{"modules/UsersModule.html":{}}}],["constructor",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(flight",{"_index":1225,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(@injectrepository(user",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(dto",{"_index":1481,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["constructor(flightsservice",{"_index":190,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingsController.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{}}}],["constructor(repo",{"_index":684,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{}}}],["consumer",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(currentusermiddleware).forroutes",{"_index":1769,"title":{},"body":{"modules/UsersModule.html":{}}}],["contactez",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["content/uploads/2019/12/ab",{"_index":978,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["context",{"_index":20,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":29,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":38,"title":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controllers",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1844,"title":{},"body":{"dependencies.html":{}}}],["cookiesession",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":991,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["coverage",{"_index":1806,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(body",{"_index":643,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["create(booking",{"_index":691,"title":{},"body":{"injectables/BookingsService.html":{}}}],["create(flight",{"_index":1217,"title":{},"body":{"injectables/FlightsService.html":{}}}],["create(passenger",{"_index":1353,"title":{},"body":{"injectables/PassengersService.html":{}}}],["create(seat",{"_index":1451,"title":{},"body":{"injectables/SeatsService.html":{}}}],["create(user",{"_index":1772,"title":{},"body":{"injectables/UsersService.html":{}}}],["createbooking",{"_index":563,"title":{},"body":{"controllers/BookingsController.html":{}}}],["createbooking(body",{"_index":569,"title":{},"body":{"controllers/BookingsController.html":{}}}],["createbookingdto",{"_index":570,"title":{"classes/CreateBookingDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"coverage.html":{}}}],["created",{"_index":572,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":452,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["createdatecolumn",{"_index":497,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["createdatecolumn({type",{"_index":466,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["createdbooking",{"_index":741,"title":{},"body":{"injectables/BookingsService.html":{}}}],["createdflight",{"_index":1228,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createdpassenger",{"_index":1365,"title":{},"body":{"injectables/PassengersService.html":{}}}],["createdseat",{"_index":1468,"title":{},"body":{"injectables/SeatsService.html":{}}}],["createduser",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["createflight",{"_index":1167,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflight(@body",{"_index":1202,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflight(body",{"_index":1172,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createflightdto",{"_index":940,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpassenger",{"_index":1304,"title":{},"body":{"controllers/PassengersController.html":{}}}],["createpassenger(body",{"_index":1310,"title":{},"body":{"controllers/PassengersController.html":{}}}],["createpassengerdto",{"_index":1041,"title":{"classes/CreatePassengerDto.html":{}},"body":{"classes/CreatePassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"coverage.html":{}}}],["creates",{"_index":638,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SeatsController.html":{}}}],["createseat",{"_index":1409,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseat(@body",{"_index":1434,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseat(body",{"_index":1414,"title":{},"body":{"controllers/SeatsController.html":{}}}],["createseatdto",{"_index":1049,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":237,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":577,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["credentials'})@apiinternalservererrorresponse({description",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials.dto.ts",{"_index":1640,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:12",{"_index":1642,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["credentials.dto.ts:22",{"_index":1643,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["cross",{"_index":1845,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["currency",{"_index":1592,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["current_timestamp(6",{"_index":468,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["currentuser",{"_index":620,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentusermiddleware",{"_index":1088,"title":{"injectables/CurrentUserMiddleware.html":{}},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["customer",{"_index":1633,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["d'avoir",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'informations",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["d'un",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["dark",{"_index":1605,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["data",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":465,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["date.now",{"_index":891,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["date_of_birth",{"_index":729,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["db",{"_index":1510,"title":{},"body":{"injectables/SettingsService.html":{},"dependencies.html":{}}}],["db/dist/lib/jsondbconfig",{"_index":1518,"title":{},"body":{"injectables/SettingsService.html":{}}}],["de",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["declare",{"_index":1098,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["decodedtoken",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.email",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{}}}],["decorators/current",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{}}}],["default",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"entities/Booking.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/variables.html":{}}}],["default_currency",{"_index":1589,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["default_language",{"_index":1590,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["default_theme",{"_index":1591,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["defined",{"_index":13,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["delayed",{"_index":1150,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["delete('/:id",{"_index":666,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["delete('/:id')@useguards(adminguard)@apiokresponse({description",{"_index":1417,"title":{},"body":{"controllers/SeatsController.html":{}}}],["delete('/:id')@useguards(adminguard)@httpcode(200)@apiokresponse({description",{"_index":1177,"title":{},"body":{"controllers/FlightsController.html":{}}}],["delete('/:id')@useguards(authguard",{"_index":580,"title":{},"body":{"controllers/BookingsController.html":{}}}],["delete(':id",{"_index":1343,"title":{},"body":{"controllers/PassengersController.html":{}}}],["delete(':id')@serialize(passengerdto)@useguards(authguard)@apiokresponse({description",{"_index":1315,"title":{},"body":{"controllers/PassengersController.html":{}}}],["delete(id",{"_index":667,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["deletebooking",{"_index":564,"title":{},"body":{"controllers/BookingsController.html":{}}}],["deletebooking(id",{"_index":579,"title":{},"body":{"controllers/BookingsController.html":{}}}],["deleted",{"_index":1178,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["deleteflight",{"_index":1168,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deleteflight(@param('id",{"_index":1208,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deleteflight(id",{"_index":1176,"title":{},"body":{"controllers/FlightsController.html":{}}}],["deletepassenger",{"_index":1305,"title":{},"body":{"controllers/PassengersController.html":{}}}],["deletepassenger(id",{"_index":1314,"title":{},"body":{"controllers/PassengersController.html":{}}}],["deletes",{"_index":1439,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat",{"_index":1410,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat(@param('id",{"_index":1440,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleteseat(id",{"_index":1416,"title":{},"body":{"controllers/SeatsController.html":{}}}],["deleting",{"_index":668,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["delimiter",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["demand",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["departure",{"_index":982,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["departure_date",{"_index":948,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["departure_time",{"_index":949,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["dependencies",{"_index":96,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1162,"title":{},"body":{"entities/Flight.html":{}}}],["des",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["desc",{"_index":755,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["description",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"properties.html":{}}}],["dessous",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["destination",{"_index":950,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["destination_airport_code",{"_index":951,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["destination_airport_name",{"_index":952,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["detectors",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["difficultés",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["disable",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["display",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["diverted",{"_index":1153,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["document",{"_index":908,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["document_number",{"_index":727,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["document_type",{"_index":725,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["documentation",{"_index":1807,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":913,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["documenttypes",{"_index":912,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{},"miscellaneous/enumerations.html":{}}}],["documenttypes.passport",{"_index":934,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/UpdatePassengerDto.html":{}}}],["doe",{"_index":1084,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":1071,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isnotempty()@isoptional",{"_index":1619,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["dotenv",{"_index":1848,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":829,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dtos/booking.dto",{"_index":625,"title":{},"body":{"controllers/BookingsController.html":{}}}],["dtos/create",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/email",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":627,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dtos/passenger.dto",{"_index":1331,"title":{},"body":{"controllers/PassengersController.html":{}}}],["dtos/password",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/remove",{"_index":858,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["dtos/seat.dto",{"_index":1428,"title":{},"body":{"controllers/SeatsController.html":{}}}],["dtos/update",{"_index":629,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{}}}],["dtos/upload",{"_index":860,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["dtos/user",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/user.dto",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/verify",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["economy",{"_index":1062,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["economy'})@isstring()@isnotempty()@isenum(classtypes",{"_index":1054,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["economy'})@isstring()@isnotempty()@isenum(classtypes)@isoptional",{"_index":1582,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["email')@httpcode(200)@apiokresponse({description",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{}}}],["email'})@apiinternalservererrorresponse({description",{"_index":1675,"title":{},"body":{"controllers/UsersController.html":{}}}],["email'})@apinotfoundresponse({description",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{}}}],["email.dto",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["email.dto.ts",{"_index":1804,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:13",{"_index":1805,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["emaildata",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["emailverificationdto",{"_index":1105,"title":{"classes/EmailVerificationDto.html":{}},"body":{"classes/EmailVerificationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["emit",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{}}}],["emitted",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{},"injectables/SeatsService.html":{},"dependencies.html":{}}}],["en",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["english",{"_index":1606,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["entities",{"_index":448,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":446,"title":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":462,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1870,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1846,"title":{},"body":{"dependencies.html":{}}}],["env.${process.env.node_env",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{}}}],["err.response?.message",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/UsersController.html":{}}}],["err.response?.statuscode",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["error",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["est",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["event",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{}}}],["eventemitter",{"_index":687,"title":{},"body":{"injectables/BookingsService.html":{}}}],["eventemitter2",{"_index":688,"title":{},"body":{"injectables/BookingsService.html":{}}}],["eventemittermodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":1476,"title":{},"body":{"injectables/SeatsService.html":{}}}],["everything",{"_index":932,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["excludeextraneousvalues",{"_index":843,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["executioncontext",{"_index":12,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exists",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["expected",{"_index":1152,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["expiresin",{"_index":1767,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["exports",{"_index":674,"title":{},"body":{"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":525,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{},"classes/UserDto.html":{}}}],["express",{"_index":1097,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["extra",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlbwfpbci6inlpbwthym9zc0bnbwfpbc5jb20ilcjpyxqioje2ndgzmtiwmtqsimv4cci6mty0odmxntyxnh0.slrcrne_1wkyrm5",{"_index":1078,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["failed",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["false",{"_index":32,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"entities/Booking.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["false})@isboolean()@isnotempty",{"_index":1012,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["false})@isboolean()@isnotempty()@isoptional",{"_index":1563,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["false})@isstring()@isoptional",{"_index":1271,"title":{},"body":{"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["female",{"_index":1290,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["fetched",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["finaliser",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["find",{"_index":711,"title":{},"body":{"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/UsersService.html":{}}}],["find(email",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":681,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["findall(options",{"_index":694,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["findall(query",{"_index":651,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{}}}],["findbyuser",{"_index":1351,"title":{},"body":{"injectables/PassengersService.html":{}}}],["findbyuser(user",{"_index":1341,"title":{},"body":{"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["finding",{"_index":1184,"title":{},"body":{"controllers/FlightsController.html":{}}}],["findone",{"_index":682,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["findone(id",{"_index":654,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":1020,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["first_name",{"_index":1067,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["fixed",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["flight",{"_index":453,"title":{"entities/Flight.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["flight'})@apiinternalservererrorresponse({description",{"_index":1174,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@isnumber()@isnotempty",{"_index":917,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["flight'})@isnumber()@isnotempty()@isoptional",{"_index":1530,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["flight.bookings",{"_index":471,"title":{},"body":{"entities/Booking.html":{}}}],["flight.dto",{"_index":1196,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flight.dto.ts",{"_index":942,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:100",{"_index":1562,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:101",{"_index":1002,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:110",{"_index":986,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:111",{"_index":1558,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:119",{"_index":971,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:121",{"_index":1552,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:128",{"_index":983,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:131",{"_index":1545,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:137",{"_index":968,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:141",{"_index":1550,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:146",{"_index":1013,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:151",{"_index":1543,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:156",{"_index":981,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:161",{"_index":1564,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:166",{"_index":990,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:172",{"_index":1549,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:175",{"_index":1016,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:183",{"_index":1554,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:184",{"_index":1019,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:193",{"_index":1022,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:203",{"_index":1567,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:204",{"_index":1025,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:213",{"_index":1569,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:22",{"_index":964,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:225",{"_index":1571,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:24",{"_index":1541,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:32",{"_index":1004,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:35",{"_index":1559,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:42",{"_index":1007,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:46",{"_index":1561,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:52",{"_index":997,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:57",{"_index":1557,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:61",{"_index":974,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":1547,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:71",{"_index":1006,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:78",{"_index":1560,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:81",{"_index":992,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:89",{"_index":1555,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts:91",{"_index":1010,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.entity",{"_index":1028,"title":{},"body":{"classes/CreateFlightDto.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.seat_base_price",{"_index":801,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seat_price_business_class",{"_index":800,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seat_price_first_class",{"_index":798,"title":{},"body":{"injectables/BookingsService.html":{}}}],["flight.seats",{"_index":1391,"title":{},"body":{"entities/Seat.html":{}}}],["flight_number",{"_index":953,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["flightid",{"_index":522,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"classes/SeatDto.html":{},"classes/UpdateBookingDto.html":{}}}],["flights",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apiinternalservererrorresponse({description",{"_index":1189,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1213,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.dto",{"_index":1197,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights.dto.ts",{"_index":1275,"title":{},"body":{"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["flights.dto.ts:11",{"_index":1277,"title":{},"body":{"classes/GetFlightsDto.html":{}}}],["flights.dto.ts:19",{"_index":1276,"title":{},"body":{"classes/GetFlightsDto.html":{}}}],["flights.foreach((flight",{"_index":1246,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flights.length",{"_index":1245,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flights.service",{"_index":1198,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["flights/flights.service",{"_index":199,"title":{},"body":{"injectables/AppService.html":{}}}],["flightscontroller",{"_index":1165,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":102,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":191,"title":{"injectables/FlightsService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["flightsstats",{"_index":206,"title":{},"body":{"injectables/AppService.html":{}}}],["flightstatuses",{"_index":1023,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"miscellaneous/enumerations.html":{}}}],["flightstatuses.arrived].includes(flight.status",{"_index":1261,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.cancelled].includes(flight.status",{"_index":1263,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.delayed].includes(flight.status",{"_index":1249,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.diverted].includes(flight.status",{"_index":1255,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.expected].includes(flight.status",{"_index":1253,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.in_air].includes(flight.status",{"_index":1251,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.landed].includes(flight.status",{"_index":1259,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.no_takeoff_info].includes(flight.status",{"_index":1264,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.past_flight].includes(flight.status",{"_index":1266,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.recovery].includes(flight.status",{"_index":1257,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightstatuses.scheduled",{"_index":1039,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["flightstatuses.scheduled].includes(flight.status",{"_index":1247,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fonctionnalités",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroutes",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apibadrequestresponse({description",{"_index":1180,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["found'})@apiinternalservererrorresponse({description",{"_index":576,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":591,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["foundbooking",{"_index":766,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.flight",{"_index":776,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.flight.id",{"_index":778,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.price",{"_index":775,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.seat",{"_index":770,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.seat.id",{"_index":783,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundbooking.status",{"_index":787,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundflight",{"_index":712,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["foundflight.seats.find",{"_index":716,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassenger",{"_index":1367,"title":{},"body":{"injectables/PassengersService.html":{}}}],["foundpassenger.user.id",{"_index":1370,"title":{},"body":{"injectables/PassengersService.html":{}}}],["foundpassengers",{"_index":721,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassengers.length",{"_index":723,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundpassengers[0",{"_index":733,"title":{},"body":{"injectables/BookingsService.html":{}}}],["foundseat",{"_index":715,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/SeatsService.html":{}}}],["foundseat.id",{"_index":745,"title":{},"body":{"injectables/BookingsService.html":{}}}],["founduser",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["fr",{"_index":1608,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["french",{"_index":1607,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["function",{"_index":824,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":1878,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":731,"title":{},"body":{"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["genders",{"_index":919,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/UpdatePassengerDto.html":{},"miscellaneous/enumerations.html":{}}}],["genders})@isstring()@isnotempty()@isenum(genders",{"_index":920,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["genders})@isstring()@isnotempty()@isenum(genders)@isoptional",{"_index":1579,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["generate",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{}}}],["generateprice",{"_index":683,"title":{},"body":{"injectables/BookingsService.html":{}}}],["generateprice(seat",{"_index":699,"title":{},"body":{"injectables/BookingsService.html":{}}}],["get('/:id",{"_index":652,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get('/:id')@apiokresponse({description",{"_index":1183,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get('/:id')@serialize(bookingdto)@useguards(authguard)@apiokresponse({description",{"_index":589,"title":{},"body":{"controllers/BookingsController.html":{}}}],["get('/me",{"_index":1339,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('/me')@useguards(authguard)@apiokresponse({description",{"_index":1318,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('/stats",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/stats')@useguards(adminguard)@apibadrequestresponse({description",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/unique/:id",{"_index":1337,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('/unique/:id')@useguards(adminguard)@apiokresponse({description",{"_index":1322,"title":{},"body":{"controllers/PassengersController.html":{}}}],["get('whoami",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('whoami')@useguards(authguard)@apiokresponse({description",{"_index":1702,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apiokresponse({description",{"_index":1188,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["get()@useguards(adminguard)@apibadrequestresponse({description",{"_index":1489,"title":{},"body":{"controllers/SettingsController.html":{}}}],["get()@useguards(adminguard)@apiokresponse({description",{"_index":584,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{}}}],["getallbookings",{"_index":565,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getallbookings(@query",{"_index":650,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getallbookings(query",{"_index":582,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbooking",{"_index":566,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbooking(id",{"_index":588,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbookingsdto",{"_index":583,"title":{"classes/GetBookingsDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["getflight",{"_index":1169,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflight(@param('id",{"_index":1206,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflight(id",{"_index":1182,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights",{"_index":1170,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights(@query",{"_index":1205,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflights(query",{"_index":1186,"title":{},"body":{"controllers/FlightsController.html":{}}}],["getflightsdto",{"_index":1187,"title":{"classes/GetFlightsDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["getpassenger",{"_index":1306,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassenger(@currentuser",{"_index":1340,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassenger(user",{"_index":1317,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassengerbyid",{"_index":1307,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassengerbyid(id",{"_index":1321,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getpassengers",{"_index":1308,"title":{},"body":{"controllers/PassengersController.html":{}}}],["getseat",{"_index":1411,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseat(@param('id",{"_index":1437,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseat(id",{"_index":1420,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getseats",{"_index":1412,"title":{},"body":{"controllers/SeatsController.html":{}}}],["getsettings",{"_index":1487,"title":{},"body":{"controllers/SettingsController.html":{},"injectables/SettingsService.html":{}}}],["getstats",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":55,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["getwelcomemessage",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["global",{"_index":1099,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"overview.html":{}}}],["guards/admin.guard",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/FlightsController.html":{}}}],["handle",{"_index":1475,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handlebookingevents",{"_index":1449,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handlebookingevents(payload",{"_index":1456,"title":{},"body":{"injectables/SeatsService.html":{}}}],["handled",{"_index":834,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["handler",{"_index":835,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["hash",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.tostring('hex",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["height",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":1850,"title":{},"body":{"dependencies.html":{}}}],["helpers/email",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["hotel",{"_index":504,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["html",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":1195,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(200",{"_index":1207,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["https://www.abaviation.com/wp",{"_index":977,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ibrahim",{"_index":1009,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei",{"_index":1087,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["ibu3gxnbymx5x_czqwvinolbwei'})@isnotempty()@isjwt",{"_index":1079,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["icons",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":454,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/RemoveImageDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["id'})@isnotempty()@isnumber",{"_index":1056,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["id_card",{"_index":1288,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["identification",{"_index":1003,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["identifier",{"_index":1808,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":914,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["ignoreerrors",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":864,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/RemoveImageDto.html":{},"classes/UploadImageDto.html":{}}}],["image.dto",{"_index":859,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["image.dto.ts",{"_index":1385,"title":{},"body":{"classes/RemoveImageDto.html":{},"classes/UploadImageDto.html":{},"coverage.html":{}}}],["image.dto.ts:12",{"_index":1388,"title":{},"body":{"classes/RemoveImageDto.html":{},"classes/UploadImageDto.html":{}}}],["implements",{"_index":7,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["import",{"_index":23,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["important",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["imports",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apinotfoundresponse({description",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{}}}],["in_air",{"_index":1151,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["includes",{"_index":1077,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["incorrect",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["inherit",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":184,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"injectables/SeatsService.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":705,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(booking",{"_index":710,"title":{},"body":{"injectables/BookingsService.html":{}}}],["injectrepository(passenger",{"_index":1361,"title":{},"body":{"injectables/PassengersService.html":{}}}],["injectrepository(seat",{"_index":1463,"title":{},"body":{"injectables/SeatsService.html":{}}}],["inner",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["inscription",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["inserted",{"_index":513,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["int",{"_index":1124,"title":{},"body":{"entities/Flight.html":{}}}],["intercept",{"_index":830,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["intercept(context",{"_index":1483,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["interface",{"_index":556,"title":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{}},"body":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":558,"title":{},"body":{"interfaces/BookingEvent.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Request.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["international",{"_index":1000,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["invalid",{"_index":1663,"title":{},"body":{"controllers/UsersController.html":{}}}],["is_available",{"_index":560,"title":{},"body":{"interfaces/BookingEvent.html":{},"injectables/BookingsService.html":{},"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["is_email_verified",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":1026,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/EmailVerificationDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isdecimal",{"_index":1027,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["isemail",{"_index":1113,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isenum",{"_index":925,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{}}}],["isenum(bookingstatuses",{"_index":1535,"title":{},"body":{"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{}}}],["isenum(bookingtypes",{"_index":939,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["isenum(classtypes",{"_index":1064,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(documenttypes",{"_index":935,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["isenum(flightstatuses",{"_index":1040,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["isenum(genders",{"_index":938,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["isenum(supportedlanguages",{"_index":1610,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["isenum(themes",{"_index":1613,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["isglobal",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":1081,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isnotempty",{"_index":926,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/VerifyEmailDto.html":{}}}],["isnumber",{"_index":927,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isoptional",{"_index":1114,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isregistration",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailVerificationDto.html":{}}}],["isstring",{"_index":928,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{}}}],["isstring()@isnotempty",{"_index":1387,"title":{},"body":{"classes/RemoveImageDto.html":{},"classes/UploadImageDto.html":{}}}],["issue",{"_index":1163,"title":{},"body":{"entities/Flight.html":{}}}],["je",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["john",{"_index":1083,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":1069,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty()@isoptional",{"_index":1617,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["johndoe@email.com",{"_index":1115,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isnotempty()@isemail",{"_index":1641,"title":{},"body":{"classes/UserCredentialsDto.html":{}}}],["johndoe@email.com'})@isstring()@isnotempty()@isemail()@isoptional",{"_index":1108,"title":{},"body":{"classes/EmailVerificationDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["joincolumn",{"_index":498,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["json",{"_index":1517,"title":{},"body":{"injectables/SettingsService.html":{},"dependencies.html":{}}}],["json.stringify",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{}}}],["jsondb",{"_index":1515,"title":{},"body":{"injectables/SettingsService.html":{}}}],["jsondb(new",{"_index":1520,"title":{},"body":{"injectables/SettingsService.html":{}}}],["jsonwebtoken",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["julius",{"_index":998,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["jwt",{"_index":1076,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["jwtconstants",{"_index":1757,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":1765,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule",{"_index":1756,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":1763,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["kassai",{"_index":1898,"title":{},"body":{"properties.html":{}}}],["kaym",{"_index":1897,"title":{},"body":{"properties.html":{}}}],["keys",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["kmf",{"_index":1611,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["kmf'})@isstring()@isnotempty()@isoptional",{"_index":1593,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["landed",{"_index":1155,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["language",{"_index":1597,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["last",{"_index":631,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["last_name",{"_index":1068,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["layout",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["le",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["leak",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["length",{"_index":929,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{}}}],["length(1",{"_index":937,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{}}}],["license",{"_index":1894,"title":{},"body":{"properties.html":{}}}],["lien",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["light",{"_index":1604,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["limit",{"_index":749,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["line",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["linked",{"_index":1368,"title":{},"body":{"injectables/PassengersService.html":{}}}],["listeners",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["logged",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{}}}],["logging",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{}}}],["loginsert",{"_index":511,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["logo",{"_index":976,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["logo.png",{"_index":1034,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["logo.png'})@isstring()@isnotempty",{"_index":980,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["logo.png'})@isstring()@isnotempty()@isoptional",{"_index":1548,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["logremove",{"_index":516,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["logupdate",{"_index":514,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["mail",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["male",{"_index":1289,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["manytoone",{"_index":499,"title":{},"body":{"entities/Booking.html":{},"entities/Seat.html":{}}}],["manytoone(undefined",{"_index":470,"title":{},"body":{"entities/Booking.html":{},"entities/Seat.html":{}}}],["map",{"_index":820,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["map((data",{"_index":839,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["margin",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":37,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["maximum",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["maxlisteners",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["media",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["memory",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["merci",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["message",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["messageviewbody",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1860,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/current",{"_index":1759,"title":{},"body":{"modules/UsersModule.html":{}}}],["minlength",{"_index":1082,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["minlength(6",{"_index":1086,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/UserCredentialsDto.html":{}}}],["miscellaneous",{"_index":1869,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["module",{"_index":93,"title":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":95,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mon",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["mot",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["name",{"_index":17,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateFlightDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":1100,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["namespaces",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["nbsp",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["needed",{"_index":933,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["nestinterceptor",{"_index":816,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingsService.html":{},"injectables/SeatsService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1834,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"controllers/FlightsController.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"controllers/PassengersController.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1096,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["never",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newbooking",{"_index":735,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.flight",{"_index":738,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.passenger",{"_index":740,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newbooking.seat",{"_index":739,"title":{},"body":{"injectables/BookingsService.html":{}}}],["newflight",{"_index":1226,"title":{},"body":{"injectables/FlightsService.html":{}}}],["newlistener",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["newpassenger",{"_index":1362,"title":{},"body":{"injectables/PassengersService.html":{}}}],["newpassenger.user",{"_index":1364,"title":{},"body":{"injectables/PassengersService.html":{}}}],["newpassword",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordResetDto.html":{}}}],["newseat",{"_index":1465,"title":{},"body":{"injectables/SeatsService.html":{}}}],["newseat.flight",{"_index":1467,"title":{},"body":{"injectables/SeatsService.html":{}}}],["newuser",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":831,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["next.handle().pipe",{"_index":838,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["nextfunction",{"_index":1093,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["no_takeoff_info",{"_index":1157,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["node",{"_index":1516,"title":{},"body":{"injectables/SettingsService.html":{},"dependencies.html":{}}}],["nodemailer",{"_index":1855,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('a",{"_index":662,"title":{},"body":{"controllers/BookingsController.html":{}}}],["notfoundexception('booking",{"_index":655,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["notfoundexception('flight",{"_index":647,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["notfoundexception('passenger",{"_index":656,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["notfoundexception('seat",{"_index":648,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["notfoundexception('user",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('users",{"_index":1786,"title":{},"body":{"injectables/UsersService.html":{}}}],["nous",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{}}}],["nullable",{"_index":463,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["number",{"_index":475,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["numeric",{"_index":481,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{}}}],["nyerere",{"_index":999,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["obj",{"_index":537,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["obj.bookings.foreach((booking",{"_index":538,"title":{},"body":{"classes/BookingBisDto.html":{}}}],["obj.flight.id",{"_index":553,"title":{},"body":{"classes/BookingDto.html":{},"classes/SeatDto.html":{}}}],["obj.passenger.id",{"_index":555,"title":{},"body":{"classes/BookingDto.html":{}}}],["obj.seat.id",{"_index":554,"title":{},"body":{"classes/BookingDto.html":{}}}],["obj.user.id",{"_index":1301,"title":{},"body":{"classes/PassengerDto.html":{}}}],["object",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(allsettings",{"_index":1524,"title":{},"body":{"injectables/SettingsService.html":{}}}],["object.assign(foundbooking",{"_index":779,"title":{},"body":{"injectables/BookingsService.html":{}}}],["object.assign(foundflight",{"_index":1230,"title":{},"body":{"injectables/FlightsService.html":{}}}],["object.assign(foundpassenger",{"_index":1371,"title":{},"body":{"injectables/PassengersService.html":{}}}],["object.assign(foundseat",{"_index":1470,"title":{},"body":{"injectables/SeatsService.html":{}}}],["object.assign(user",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":818,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["old",{"_index":768,"title":{},"body":{"injectables/BookingsService.html":{}}}],["oldseat",{"_index":769,"title":{},"body":{"injectables/BookingsService.html":{}}}],["oldseat.id",{"_index":785,"title":{},"body":{"injectables/BookingsService.html":{}}}],["ondelete",{"_index":472,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{}}}],["one",{"_index":720,"title":{},"body":{"injectables/BookingsService.html":{}}}],["onetomany",{"_index":1148,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["onetomany(undefined",{"_index":1121,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["onetoone",{"_index":500,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["onetoone(undefined",{"_index":483,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{}}}],["onevent",{"_index":1461,"title":{},"body":{"injectables/SeatsService.html":{}}}],["onevent('booking",{"_index":1457,"title":{},"body":{"injectables/SeatsService.html":{}}}],["onupdate",{"_index":489,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["optional",{"_index":19,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":697,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["order",{"_index":754,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["origin",{"_index":954,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["origin_airport_code",{"_index":955,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["origin_airport_name",{"_index":956,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["ou",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["oubli",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"interfaces/ClassConstructor.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"classes/SerializeInterceptor.html":{},"modules/SettingsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1889,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":658,"title":{},"body":{"controllers/BookingsController.html":{}}}],["p",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":1830,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["page",{"_index":747,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["param",{"_index":607,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["param('id",{"_index":653,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["parameters",{"_index":15,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseint(options.limit",{"_index":750,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["parseint(options.page",{"_index":748,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["parseintpipe",{"_index":608,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["partial",{"_index":695,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["passe",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["passenger",{"_index":455,"title":{"entities/Passenger.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["passenger'})@apiinternalservererrorresponse({description",{"_index":1312,"title":{},"body":{"controllers/PassengersController.html":{}}}],["passenger'})@apinotfoundresponse({description",{"_index":590,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{}}}],["passenger.bookings",{"_index":478,"title":{},"body":{"entities/Booking.html":{}}}],["passenger.dto",{"_index":1330,"title":{},"body":{"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["passenger.dto.ts",{"_index":1043,"title":{},"body":{"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["passenger.dto.ts:15",{"_index":1046,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:22",{"_index":1578,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:25",{"_index":1045,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:33",{"_index":1576,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:34",{"_index":1044,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:43",{"_index":1574,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.dto.ts:44",{"_index":1047,"title":{},"body":{"classes/CreatePassengerDto.html":{}}}],["passenger.dto.ts:54",{"_index":1580,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["passenger.entity",{"_index":1048,"title":{},"body":{"classes/CreatePassengerDto.html":{},"classes/PassengerDto.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/UpdatePassengerDto.html":{}}}],["passenger.user.id",{"_index":762,"title":{},"body":{"injectables/BookingsService.html":{}}}],["passengerdto",{"_index":1293,"title":{"classes/PassengerDto.html":{}},"body":{"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"coverage.html":{}}}],["passengerid",{"_index":523,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{}}}],["passengers",{"_index":649,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{}}}],["passengers'})@apiinternalservererrorresponse({description",{"_index":1324,"title":{},"body":{"controllers/PassengersController.html":{}}}],["passengers.controller",{"_index":1348,"title":{},"body":{"modules/PassengersModule.html":{}}}],["passengers.service",{"_index":1332,"title":{},"body":{"controllers/PassengersController.html":{},"modules/PassengersModule.html":{}}}],["passengers/passenger.entity",{"_index":931,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["passengers/passengers.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["passengerscontroller",{"_index":1302,"title":{"controllers/PassengersController.html":{}},"body":{"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"coverage.html":{}}}],["passengersmodule",{"_index":103,"title":{"modules/PassengersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/PassengersModule.html":{},"modules.html":{},"overview.html":{}}}],["passengersservice",{"_index":686,"title":{"injectables/PassengersService.html":{}},"body":{"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"coverage.html":{},"overview.html":{}}}],["passport",{"_index":1287,"title":{},"body":{"entities/Passenger.html":{},"miscellaneous/enumerations.html":{}}}],["password",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{}}}],["passwordreset",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["passwordreset(@body",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(body",{"_index":1659,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(body.token",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordreset(token",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresetdto",{"_index":1377,"title":{"classes/PasswordResetDto.html":{}},"body":{"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["past_flight",{"_index":1158,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["patch",{"_index":609,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":659,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["patch('/:id')@serialize(bookingdto)@useguards(authguard)@apiokresponse({description",{"_index":598,"title":{},"body":{"controllers/BookingsController.html":{}}}],["patch('/:id')@useguards(adminguard)@apiokresponse({description",{"_index":1193,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["patch('/email/verify",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/email/verify')@useguards(authguard)@apiokresponse({description",{"_index":1697,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":604,"title":{},"body":{"controllers/BookingsController.html":{}}}],["patch(':id",{"_index":1342,"title":{},"body":{"controllers/PassengersController.html":{}}}],["patch(':id')@serialize(passengerdto)@useguards(authguard)@apiokresponse({description",{"_index":1328,"title":{},"body":{"controllers/PassengersController.html":{}}}],["patch('update",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update')@useguards(authguard)@apiokresponse({description",{"_index":1694,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch()@useguards(adminguard)@apiokresponse({description",{"_index":1495,"title":{},"body":{"controllers/SettingsController.html":{}}}],["path",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":1459,"title":{},"body":{"injectables/SeatsService.html":{}}}],["payload.is_available",{"_index":1480,"title":{},"body":{"injectables/SeatsService.html":{}}}],["pending",{"_index":508,"title":{},"body":{"entities/Booking.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["peu",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":1857,"title":{},"body":{"dependencies.html":{}}}],["plaintoclass",{"_index":822,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plaintoclass(this.dto",{"_index":842,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["plus",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["pm",{"_index":1032,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["pm'})@isstring()@isnotempty",{"_index":970,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["pm'})@isstring()@isnotempty()@isoptional",{"_index":1544,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["post",{"_index":610,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["post('/password",{"_index":1660,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/register')@apicreatedresponse({description",{"_index":1667,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/remove",{"_index":868,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["post('/remove')@useguards(authguard",{"_index":850,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["post('/send",{"_index":1671,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin')@httpcode(200)@apiokresponse({description",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout",{"_index":1749,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signout')@httpcode(200)@apiokresponse({description",{"_index":1691,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/upload",{"_index":862,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["post('/upload')@useguards(authguard",{"_index":854,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["post()@serialize(bookingdto)@useguards(authguard)@apicreatedresponse({description",{"_index":571,"title":{},"body":{"controllers/BookingsController.html":{}}}],["post()@serialize(passengerdto)@useguards(adminguard)@apicreatedresponse({description",{"_index":1311,"title":{},"body":{"controllers/PassengersController.html":{}}}],["post()@useguards(adminguard)@apicreatedresponse({description",{"_index":1173,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{}}}],["pour",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["price",{"_index":456,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["primarygeneratedcolumn",{"_index":476,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["prince",{"_index":1008,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["private",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.cloudinary_api_key",{"_index":887,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":889,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":885,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.email",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.token_key",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["promisify",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["promisify(_scrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":450,"title":{"properties.html":{}},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"classes/VerifyEmailDto.html":{},"properties.html":{}}}],["provide",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":1386,"title":{},"body":{"classes/RemoveImageDto.html":{}}}],["public_id",{"_index":870,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/RemoveImageDto.html":{}}}],["query",{"_index":587,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{}}}],["randombytes",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(8).tostring('hex",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["recevez",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["recovery",{"_index":1154,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["reflect",{"_index":1859,"title":{},"body":{"dependencies.html":{}}}],["refundable",{"_index":957,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["register",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(body",{"_index":1666,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(data",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["registrationlink",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["registrationmetatext",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["rejoint",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["related",{"_index":1477,"title":{},"body":{"injectables/SeatsService.html":{}}}],["relations",{"_index":756,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{}}}],["remove",{"_index":846,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/RemoveImageDto.html":{},"injectables/UsersService.html":{}}}],["remove(@body",{"_index":869,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["remove(id",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(public_id",{"_index":871,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{}}}],["remove(undefined",{"_index":848,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["removed",{"_index":517,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["removedbooking",{"_index":793,"title":{},"body":{"injectables/BookingsService.html":{}}}],["removedflight",{"_index":1233,"title":{},"body":{"injectables/FlightsService.html":{}}}],["removedpassenger",{"_index":1374,"title":{},"body":{"injectables/PassengersService.html":{}}}],["removedseat",{"_index":1473,"title":{},"body":{"injectables/SeatsService.html":{}}}],["removeduser",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeimagedto",{"_index":849,"title":{"classes/RemoveImageDto.html":{}},"body":{"controllers/CloudinaryController.html":{},"classes/RemoveImageDto.html":{},"coverage.html":{}}}],["removelistener",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["removing",{"_index":872,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["rencontrez",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["repo",{"_index":690,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":685,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":1095,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["req.currentuser",{"_index":1104,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["req.session",{"_index":1102,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["request",{"_index":28,"title":{"interfaces/Request.html":{}},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser",{"_index":30,"title":{},"body":{"guards/AdminGuard.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser.role",{"_index":33,"title":{},"body":{"guards/AdminGuard.html":{}}}],["request.session.userid",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require('cookie",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":660,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{}}}],["required'})@apinotfoundresponse({description",{"_index":599,"title":{},"body":{"controllers/BookingsController.html":{}}}],["requise",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["res",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["reset')@httpcode(200)@apiokresponse({description",{"_index":1661,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset.dto.ts",{"_index":1379,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:13",{"_index":1381,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["reset.dto.ts:23",{"_index":1382,"title":{},"body":{"classes/PasswordResetDto.html":{}}}],["resetting",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{}}}],["resource_type",{"_index":892,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response",{"_index":840,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["restaurant",{"_index":505,"title":{},"body":{"entities/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["result",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{}}}],["result.public_id",{"_index":893,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":895,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["results",{"_index":36,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookingBisDto.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1319,"title":{},"body":{"controllers/PassengersController.html":{}}}],["returns",{"_index":21,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["reviewed",{"_index":633,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["rimraf",{"_index":1862,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":1623,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["row",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":832,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["running",{"_index":837,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["rxjs",{"_index":819,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":821,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["réinitialisation",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["réinitialise",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["réinitialiser",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["scheduled",{"_index":1149,"title":{},"body":{"entities/Flight.html":{},"miscellaneous/enumerations.html":{}}}],["scrypt",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(data.password",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(newpassword",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(password",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["seat",{"_index":457,"title":{"entities/Seat.html":{}},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateSeatDto.html":{},"entities/Flight.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat'})@apiinternalservererrorresponse({description",{"_index":1418,"title":{},"body":{"controllers/SeatsController.html":{}}}],["seat'})@apinotfoundresponse({description",{"_index":574,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SeatsController.html":{}}}],["seat'})@isnumber()@isnotempty",{"_index":922,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["seat'})@isnumber()@isnotempty()@isoptional",{"_index":1531,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["seat.class_type",{"_index":796,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat.dto",{"_index":1427,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seat.dto.ts",{"_index":1051,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["seat.dto.ts:26",{"_index":1061,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:28",{"_index":1586,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:35",{"_index":1059,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:38",{"_index":1585,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:46",{"_index":1055,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.dto.ts:50",{"_index":1583,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts:54",{"_index":1057,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["seat.entity",{"_index":1406,"title":{},"body":{"classes/SeatDto.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{}}}],["seat.flight",{"_index":1143,"title":{},"body":{"entities/Flight.html":{}}}],["seat.id",{"_index":717,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat.is_available",{"_index":719,"title":{},"body":{"injectables/BookingsService.html":{}}}],["seat_base_price",{"_index":958,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seat_number",{"_index":1053,"title":{},"body":{"classes/CreateSeatDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat_price_business_class",{"_index":959,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seat_price_first_class",{"_index":960,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateFlightDto.html":{}}}],["seatdto",{"_index":1399,"title":{"classes/SeatDto.html":{}},"body":{"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"coverage.html":{}}}],["seatid",{"_index":524,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{}}}],["seats",{"_index":972,"title":{},"body":{"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateFlightDto.html":{}}}],["seats'})@apiinternalservererrorresponse({description",{"_index":1422,"title":{},"body":{"controllers/SeatsController.html":{}}}],["seats.controller",{"_index":1446,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1430,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["seatscontroller",{"_index":1407,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":104,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1429,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["secret",{"_index":1764,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["segment",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["send",{"_index":1674,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendemailverification(@body",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(body",{"_index":1670,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(body.email",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendemailverification(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemailwithnodemailer",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sendemailwithnodemailer(emaildata",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["sending",{"_index":1676,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sendpasswordresetemail(@body",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(body",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(body.email",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["sendpasswordresetemail(email",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":841,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":618,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(bookingdto",{"_index":639,"title":{},"body":{"controllers/BookingsController.html":{}}}],["serialize(dto",{"_index":825,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serialize(passengerdto",{"_index":1335,"title":{},"body":{"controllers/PassengersController.html":{}}}],["serialize(seatdto",{"_index":1432,"title":{},"body":{"controllers/SeatsController.html":{}}}],["serialize(userdto",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["serializeinterceptor",{"_index":828,"title":{"classes/SerializeInterceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["serializeinterceptor(dto",{"_index":827,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["session",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session.userid",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["set",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["settimeout",{"_index":784,"title":{},"body":{"injectables/BookingsService.html":{}}}],["settings",{"_index":1491,"title":{},"body":{"controllers/SettingsController.html":{},"injectables/SettingsService.html":{}}}],["settings'})@apiinternalservererrorresponse({description",{"_index":1490,"title":{},"body":{"controllers/SettingsController.html":{}}}],["settings.controller",{"_index":1508,"title":{},"body":{"modules/SettingsModule.html":{}}}],["settings.dto",{"_index":1497,"title":{},"body":{"controllers/SettingsController.html":{},"injectables/SettingsService.html":{}}}],["settings.dto.ts",{"_index":1588,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["settings.dto.ts:25",{"_index":1599,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["settings.dto.ts:35",{"_index":1594,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["settings.dto.ts:47",{"_index":1603,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["settings.service",{"_index":1499,"title":{},"body":{"controllers/SettingsController.html":{},"modules/SettingsModule.html":{}}}],["settings/settings.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["settingscontroller",{"_index":1485,"title":{"controllers/SettingsController.html":{}},"body":{"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"coverage.html":{}}}],["settingsmodule",{"_index":105,"title":{"modules/SettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["settingsservice",{"_index":1498,"title":{"injectables/SettingsService.html":{}},"body":{"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"coverage.html":{},"overview.html":{}}}],["show",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["si",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["signin(@body",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(body",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(body.email",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(email",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":1766,"title":{},"body":{"modules/UsersModule.html":{}}}],["signout",{"_index":1656,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(@session",{"_index":1750,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(session",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["simplevalidationlink",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["simplevalidationmetatext",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["single",{"_index":1436,"title":{},"body":{"controllers/SeatsController.html":{}}}],["sizing",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["skip",{"_index":752,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["solving",{"_index":1160,"title":{},"body":{"entities/Flight.html":{}}}],["something",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["somthing",{"_index":665,"title":{},"body":{"controllers/BookingsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"modules/BookingsModule.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"controllers/CloudinaryController.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"modules/PassengersModule.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"modules/SettingsModule.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["src/.../app.module.ts",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../booking.entity.ts",{"_index":1871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../create",{"_index":1873,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../current",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.ts",{"_index":1880,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../flight.entity.ts",{"_index":1876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1879,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../passenger.entity.ts",{"_index":1875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../seat.entity.ts",{"_index":1872,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":1881,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../update",{"_index":1874,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.entity.ts",{"_index":1877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:23",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:36",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:62",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:20",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":194,"title":{},"body":{"injectables/AppService.html":{}}}],["src/bookings/booking.entity",{"_index":1147,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{}}}],["src/bookings/booking.entity.ts",{"_index":449,"title":{},"body":{"entities/Booking.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/bookings/booking.entity.ts:35",{"_index":477,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:42",{"_index":464,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:48",{"_index":482,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:56",{"_index":487,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:63",{"_index":469,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:71",{"_index":490,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:74",{"_index":474,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:78",{"_index":484,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/booking.entity.ts:84",{"_index":480,"title":{},"body":{"entities/Booking.html":{}}}],["src/bookings/bookings.controller.ts",{"_index":562,"title":{},"body":{"controllers/BookingsController.html":{},"coverage.html":{}}}],["src/bookings/bookings.controller.ts:120",{"_index":586,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:158",{"_index":595,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:210",{"_index":601,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:255",{"_index":606,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:287",{"_index":581,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.controller.ts:65",{"_index":578,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/bookings/bookings.module.ts",{"_index":673,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/bookings/bookings.service.ts",{"_index":680,"title":{},"body":{"injectables/BookingsService.html":{},"coverage.html":{}}}],["src/bookings/bookings.service.ts:109",{"_index":698,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:132",{"_index":703,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:208",{"_index":704,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:22",{"_index":689,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:238",{"_index":693,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:259",{"_index":700,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:269",{"_index":701,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:30",{"_index":692,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/bookings.service.ts:90",{"_index":696,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/bookings/dtos/booking",{"_index":520,"title":{},"body":{"classes/BookingBisDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/booking.dto.ts",{"_index":543,"title":{},"body":{"classes/BookingDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/booking.dto.ts:12",{"_index":550,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:15",{"_index":545,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:18",{"_index":552,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:22",{"_index":547,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:26",{"_index":551,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:30",{"_index":549,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:6",{"_index":548,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/booking.dto.ts:9",{"_index":544,"title":{},"body":{"classes/BookingDto.html":{}}}],["src/bookings/dtos/create",{"_index":898,"title":{},"body":{"classes/CreateBookingDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/get",{"_index":1268,"title":{},"body":{"classes/GetBookingsDto.html":{},"coverage.html":{}}}],["src/bookings/dtos/update",{"_index":1527,"title":{},"body":{"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"coverage.html":{}}}],["src/bookings/interfaces/bookingcreatedevent",{"_index":1462,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/bookings/interfaces/bookingcreatedevent.ts",{"_index":559,"title":{},"body":{"interfaces/BookingEvent.html":{},"coverage.html":{}}}],["src/cloudinary/cloudinary.controller.ts",{"_index":845,"title":{},"body":{"controllers/CloudinaryController.html":{},"coverage.html":{}}}],["src/cloudinary/cloudinary.controller.ts:23",{"_index":855,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["src/cloudinary/cloudinary.controller.ts:43",{"_index":851,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["src/cloudinary/cloudinary.module.ts",{"_index":875,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["src/cloudinary/cloudinary.service.ts",{"_index":877,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/cloudinary/cloudinary.service.ts:12",{"_index":878,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/cloudinary/cloudinary.service.ts:15",{"_index":880,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/cloudinary/cloudinary.service.ts:31",{"_index":879,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/cloudinary/dtos/remove",{"_index":1384,"title":{},"body":{"classes/RemoveImageDto.html":{},"coverage.html":{}}}],["src/cloudinary/dtos/upload",{"_index":1621,"title":{},"body":{"classes/UploadImageDto.html":{},"coverage.html":{}}}],["src/flights/dtos/create",{"_index":941,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dtos/get",{"_index":1274,"title":{},"body":{"classes/GetFlightsDto.html":{},"coverage.html":{}}}],["src/flights/dtos/update",{"_index":1539,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/flight.entity",{"_index":491,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Seat.html":{}}}],["src/flights/flight.entity.ts",{"_index":1116,"title":{},"body":{"entities/Flight.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/flights/flight.entity.ts:105",{"_index":1120,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:111",{"_index":1128,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:117",{"_index":1119,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:124",{"_index":1139,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:130",{"_index":1126,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:137",{"_index":1130,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:143",{"_index":1140,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:149",{"_index":1141,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:155",{"_index":1142,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:163",{"_index":1145,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:170",{"_index":1127,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:178",{"_index":1146,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:182",{"_index":1144,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:185",{"_index":1123,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:31",{"_index":1135,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:38",{"_index":1118,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:45",{"_index":1134,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:52",{"_index":1137,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:59",{"_index":1132,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:65",{"_index":1125,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:72",{"_index":1136,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:79",{"_index":1131,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:86",{"_index":1138,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:93",{"_index":1133,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flight.entity.ts:99",{"_index":1129,"title":{},"body":{"entities/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":1166,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:118",{"_index":1190,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:147",{"_index":1185,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:181",{"_index":1181,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:51",{"_index":1175,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:84",{"_index":1194,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":675,"title":{},"body":{"modules/BookingsModule.html":{},"modules/SeatsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1212,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service",{"_index":706,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/SeatsService.html":{}}}],["src/flights/flights.service.ts",{"_index":1215,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:13",{"_index":1216,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:16",{"_index":1218,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:27",{"_index":1224,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:44",{"_index":1221,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:56",{"_index":1220,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:76",{"_index":1219,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:91",{"_index":1222,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/guards/admin.guard",{"_index":616,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{}}}],["src/guards/admin.guard.ts",{"_index":6,"title":{},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["src/guards/admin.guard.ts:4",{"_index":14,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/guards/auth.guard",{"_index":617,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["src/guards/auth.guard.ts",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guards/auth.guard.ts:4",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/helpers/email.ts",{"_index":1823,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor",{"_index":619,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["src/interceptors/serialize.interceptor.ts",{"_index":814,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor.ts:19",{"_index":1482,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/interceptors/serialize.interceptor.ts:22",{"_index":1484,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/main.ts",{"_index":1824,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/passengers/dtos/create",{"_index":1042,"title":{},"body":{"classes/CreatePassengerDto.html":{},"coverage.html":{}}}],["src/passengers/dtos/passenger.dto.ts",{"_index":1294,"title":{},"body":{"classes/PassengerDto.html":{},"coverage.html":{}}}],["src/passengers/dtos/passenger.dto.ts:12",{"_index":1296,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:15",{"_index":1295,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:18",{"_index":1298,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:22",{"_index":1300,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:6",{"_index":1299,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/passenger.dto.ts:9",{"_index":1297,"title":{},"body":{"classes/PassengerDto.html":{}}}],["src/passengers/dtos/update",{"_index":1572,"title":{},"body":{"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["src/passengers/passenger.entity",{"_index":492,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{}}}],["src/passengers/passenger.entity.ts",{"_index":1278,"title":{},"body":{"entities/Passenger.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/passengers/passenger.entity.ts:30",{"_index":1285,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:38",{"_index":1283,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:45",{"_index":1282,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:51",{"_index":1281,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:58",{"_index":1284,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:62",{"_index":1286,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passenger.entity.ts:65",{"_index":1280,"title":{},"body":{"entities/Passenger.html":{}}}],["src/passengers/passengers.controller.ts",{"_index":1303,"title":{},"body":{"controllers/PassengersController.html":{},"coverage.html":{}}}],["src/passengers/passengers.controller.ts:118",{"_index":1323,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:152",{"_index":1320,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:189",{"_index":1329,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:236",{"_index":1316,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:56",{"_index":1313,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.controller.ts:89",{"_index":1325,"title":{},"body":{"controllers/PassengersController.html":{}}}],["src/passengers/passengers.module",{"_index":676,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/passengers/passengers.module.ts",{"_index":1347,"title":{},"body":{"modules/PassengersModule.html":{}}}],["src/passengers/passengers.service",{"_index":707,"title":{},"body":{"injectables/BookingsService.html":{}}}],["src/passengers/passengers.service.ts",{"_index":1350,"title":{},"body":{"injectables/PassengersService.html":{},"coverage.html":{}}}],["src/passengers/passengers.service.ts:14",{"_index":1352,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:19",{"_index":1354,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:30",{"_index":1356,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:42",{"_index":1357,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:55",{"_index":1358,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:67",{"_index":1359,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/passengers/passengers.service.ts:90",{"_index":1355,"title":{},"body":{"injectables/PassengersService.html":{}}}],["src/seats/dtos/create",{"_index":1050,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/dtos/seat.dto.ts",{"_index":1400,"title":{},"body":{"classes/SeatDto.html":{},"coverage.html":{}}}],["src/seats/dtos/seat.dto.ts:12",{"_index":1404,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:15",{"_index":1401,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:19",{"_index":1402,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:6",{"_index":1403,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/seat.dto.ts:9",{"_index":1405,"title":{},"body":{"classes/SeatDto.html":{}}}],["src/seats/dtos/update",{"_index":1581,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/seat.entity",{"_index":493,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{}}}],["src/seats/seat.entity.ts",{"_index":1389,"title":{},"body":{"entities/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/seats/seat.entity.ts:23",{"_index":1393,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:30",{"_index":1395,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:37",{"_index":1394,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:45",{"_index":1390,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seat.entity.ts:48",{"_index":1392,"title":{},"body":{"entities/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1408,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:117",{"_index":1421,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:151",{"_index":1426,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:190",{"_index":1419,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:55",{"_index":1415,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.controller.ts:87",{"_index":1423,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module",{"_index":677,"title":{},"body":{"modules/BookingsModule.html":{}}}],["src/seats/seats.module.ts",{"_index":1445,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1448,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:15",{"_index":1450,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:21",{"_index":1452,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:40",{"_index":1455,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:52",{"_index":1454,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:63",{"_index":1460,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:80",{"_index":1453,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:98",{"_index":1458,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/settings/dtos/update",{"_index":1587,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/settings/settings.controller.ts",{"_index":1486,"title":{},"body":{"controllers/SettingsController.html":{},"coverage.html":{}}}],["src/settings/settings.controller.ts:36",{"_index":1492,"title":{},"body":{"controllers/SettingsController.html":{}}}],["src/settings/settings.controller.ts:62",{"_index":1496,"title":{},"body":{"controllers/SettingsController.html":{}}}],["src/settings/settings.module.ts",{"_index":1507,"title":{},"body":{"modules/SettingsModule.html":{}}}],["src/settings/settings.service.ts",{"_index":1509,"title":{},"body":{"injectables/SettingsService.html":{},"coverage.html":{}}}],["src/settings/settings.service.ts:13",{"_index":1512,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/settings/settings.service.ts:21",{"_index":1514,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/settings/settings.service.ts:8",{"_index":1511,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/users/auth.service.ts",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/auth.service.ts:19",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:26",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:323",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:611",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:660",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:677",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:716",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/constants/index.ts",{"_index":1827,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/decorators/current",{"_index":621,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/email",{"_index":1106,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["src/users/dtos/password",{"_index":1378,"title":{},"body":{"classes/PasswordResetDto.html":{},"coverage.html":{}}}],["src/users/dtos/update",{"_index":1615,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/user",{"_index":1639,"title":{},"body":{"classes/UserCredentialsDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts",{"_index":1645,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dtos/user.dto.ts:12",{"_index":1651,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:15",{"_index":1647,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:18",{"_index":1652,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:21",{"_index":1646,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:24",{"_index":1653,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:27",{"_index":1650,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:6",{"_index":1649,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/user.dto.ts:9",{"_index":1648,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dtos/verify",{"_index":1803,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["src/users/middlewares/current",{"_index":1089,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/users/user.entity",{"_index":623,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{}}}],["src/users/user.entity.ts",{"_index":1622,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.entity.ts:22",{"_index":1627,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":1626,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:30",{"_index":1629,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:38",{"_index":1625,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:41",{"_index":1630,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1631,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1624,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:64",{"_index":1632,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:71",{"_index":1628,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1655,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:125",{"_index":1665,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:163",{"_index":1669,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:199",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:232",{"_index":1695,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:264",{"_index":1700,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:292",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:300",{"_index":1692,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":1677,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:93",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1754,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:24",{"_index":1755,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1770,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1771,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1773,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["stack",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["started",{"_index":1882,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1809,"title":{},"body":{"coverage.html":{}}}],["stats",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["stats'})@apiinternalservererrorresponse({description",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["stats.total",{"_index":806,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/UsersService.html":{}}}],["stats.total_admin",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["stats.total_arrived",{"_index":1262,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_cancelled",{"_index":811,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["stats.total_confirmed",{"_index":810,"title":{},"body":{"injectables/BookingsService.html":{}}}],["stats.total_customer",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["stats.total_delayed",{"_index":1250,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_diverted",{"_index":1256,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_expected",{"_index":1254,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_in_air",{"_index":1252,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_landed",{"_index":1260,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_no_takeoff_info",{"_index":1265,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_past_flight",{"_index":1267,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_pending",{"_index":812,"title":{},"body":{"injectables/BookingsService.html":{}}}],["stats.total_recovery",{"_index":1258,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_scheduled",{"_index":1248,"title":{},"body":{"injectables/FlightsService.html":{}}}],["stats.total_unverified",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["stats.total_verified",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["status",{"_index":458,"title":{},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{}}}],["status.dto",{"_index":630,"title":{},"body":{"controllers/BookingsController.html":{}}}],["status.dto.ts",{"_index":1536,"title":{},"body":{"classes/UpdateBookingStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:14",{"_index":1538,"title":{},"body":{"classes/UpdateBookingStatusDto.html":{}}}],["status/:id",{"_index":663,"title":{},"body":{"controllers/BookingsController.html":{}}}],["status/:id')@serialize(bookingdto)@useguards(adminguard",{"_index":605,"title":{},"body":{"controllers/BookingsController.html":{}}}],["storedhash",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{}}}],["subject",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{}}}],["successful",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful'})@apibadrequestresponse({description",{"_index":1662,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":641,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibadrequestresponse({description",{"_index":573,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apinotfoundresponse({description",{"_index":1179,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{}}}],["support",{"_index":1886,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1596,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["supportedlanguages",{"_index":1595,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["supportedlanguages.french",{"_index":1609,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["sur",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["svg",{"_index":1887,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1865,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["sysadmin",{"_index":34,"title":{},"body":{"guards/AdminGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1829,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":753,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["tanzania",{"_index":1031,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["tanzania'})@isstring()@length(1",{"_index":988,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["td",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["text",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["thats",{"_index":714,"title":{},"body":{"injectables/BookingsService.html":{}}}],["theme",{"_index":1601,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["themes",{"_index":1600,"title":{},"body":{"classes/UpdateSettingsDto.html":{},"miscellaneous/enumerations.html":{}}}],["themes.light",{"_index":1612,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["then((res",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["then((user",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{}}}],["then(async",{"_index":644,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.appservice",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.getwelcomemessage",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.bookingsservice",{"_index":642,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.bookingsservice.getstats",{"_index":212,"title":{},"body":{"injectables/AppService.html":{}}}],["this.cloudinaryservice",{"_index":865,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["this.configservice.get",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('cookie_key",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["this.db",{"_index":1519,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.db.getdata",{"_index":1522,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.db.push",{"_index":1526,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.eventemitter.emit('booking.cancelled",{"_index":792,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.confirmed",{"_index":789,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.created",{"_index":744,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.deleted",{"_index":795,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.failed",{"_index":746,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.eventemitter.emit('booking.updated",{"_index":782,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.findone(id",{"_index":767,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.flightsservice",{"_index":1203,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.findone",{"_index":777,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(attrs.flightid",{"_index":774,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(booking.flightid",{"_index":713,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.flightsservice.findone(seat.flightid",{"_index":1464,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.flightsservice.getstats",{"_index":208,"title":{},"body":{"injectables/AppService.html":{}}}],["this.generateprice(foundseat",{"_index":734,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.jwtservice.sign",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(data.token",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passengersservice",{"_index":1336,"title":{},"body":{"controllers/PassengersController.html":{}}}],["this.passengersservice.create",{"_index":724,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.passengersservice.findbyuser(user",{"_index":722,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.passengersservice.findone",{"_index":761,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.create",{"_index":736,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.create(flight",{"_index":1227,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.create(passenger",{"_index":1363,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.create(seat",{"_index":1466,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.create(user",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.find",{"_index":751,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.repo.find()).length",{"_index":758,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["this.repo.findone(id",{"_index":760,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"injectables/UsersService.html":{}}}],["this.repo.remove(flight",{"_index":1234,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.remove(foundbooking",{"_index":794,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.remove(foundpassenger",{"_index":1375,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.remove(seat",{"_index":1474,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.remove(user",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(foundbooking",{"_index":781,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.save(foundflight",{"_index":1232,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.save(foundpassenger",{"_index":1373,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.save(foundseat",{"_index":1472,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.save(newbooking",{"_index":742,"title":{},"body":{"injectables/BookingsService.html":{}}}],["this.repo.save(newflight",{"_index":1229,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.repo.save(newpassenger",{"_index":1366,"title":{},"body":{"injectables/PassengersService.html":{}}}],["this.repo.save(newseat",{"_index":1469,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.repo.save(newuser",{"_index":1785,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.save(user",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.seatsservice",{"_index":1435,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.settingsservice.getsettings",{"_index":1502,"title":{},"body":{"controllers/SettingsController.html":{}}}],["this.settingsservice.updatesettings(body",{"_index":1504,"title":{},"body":{"controllers/SettingsController.html":{}}}],["this.update(payload.id",{"_index":1479,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.userservice",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userdata",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(decodedtoken.email",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.find(email",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(userid",{"_index":1103,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["this.usersservice.getstats",{"_index":210,"title":{},"body":{"injectables/AppService.html":{}}}],["this.usersservice.update(founduser",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.update(user",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["throwing",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["time",{"_index":632,"title":{},"body":{"controllers/BookingsController.html":{},"classes/CreateFlightDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"classes/UpdateFlightDto.html":{},"controllers/UsersController.html":{}}}],["timestamp",{"_index":467,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["token",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{}}}],["token'})@apinotfoundresponse({description",{"_index":1698,"title":{},"body":{"controllers/UsersController.html":{}}}],["total",{"_index":802,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["total_admin",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["total_arrived",{"_index":1242,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_cancelled",{"_index":804,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["total_confirmed",{"_index":803,"title":{},"body":{"injectables/BookingsService.html":{}}}],["total_count",{"_index":759,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["total_customer",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["total_delayed",{"_index":1236,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_diverted",{"_index":1239,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_expected",{"_index":1238,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_in_air",{"_index":1237,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_landed",{"_index":1241,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_no_takeoff_info",{"_index":1243,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_past_flight",{"_index":1244,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_pending",{"_index":805,"title":{},"body":{"injectables/BookingsService.html":{}}}],["total_recovery",{"_index":1240,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_scheduled",{"_index":1235,"title":{},"body":{"injectables/FlightsService.html":{}}}],["total_unverified",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["total_verified",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["totalcount",{"_index":757,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/FlightsService.html":{}}}],["tour",{"_index":204,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["tour@gmail.com",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["transform",{"_index":528,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["transformer",{"_index":535,"title":{},"body":{"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/ClassConstructor.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["true",{"_index":35,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"interfaces/ClassConstructor.html":{},"injectables/CloudinaryService.html":{},"classes/CreateSeatDto.html":{},"classes/EmailVerificationDto.html":{},"entities/Seat.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"injectables/SettingsService.html":{},"classes/UpdateSeatDto.html":{},"entities/User.html":{}}}],["true})@isboolean()@isnotempty",{"_index":1058,"title":{},"body":{"classes/CreateSeatDto.html":{}}}],["true})@isboolean()@isnotempty()@isoptional",{"_index":1584,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["true})@isboolean()@isoptional",{"_index":1111,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["truthy",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{}}}],["try",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingsService.html":{},"injectables/CloudinaryService.html":{},"injectables/FlightsService.html":{},"injectables/PassengersService.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":18,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"interfaces/BookingEvent.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"entities/Passenger.html":{},"classes/PassengerDto.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"interfaces/Request.html":{},"entities/Seat.html":{},"classes/SeatDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SerializeInterceptor.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":503,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingsService.html":{},"entities/Flight.html":{},"injectables/FlightsService.html":{},"entities/Passenger.html":{},"injectables/PassengersService.html":{},"entities/Seat.html":{},"injectables/SeatsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([booking",{"_index":679,"title":{},"body":{"modules/BookingsModule.html":{}}}],["typeormmodule.forfeature([flight",{"_index":1214,"title":{},"body":{"modules/FlightsModule.html":{}}}],["typeormmodule.forfeature([passenger",{"_index":1349,"title":{},"body":{"modules/PassengersModule.html":{}}}],["typeormmodule.forfeature([seat",{"_index":1447,"title":{},"body":{"modules/SeatsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1762,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["types/cookie",{"_index":1837,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1839,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":1866,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception('incorrect",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["uncaughtexception",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["undefined",{"_index":486,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["undefined.id)@expose",{"_index":546,"title":{},"body":{"classes/BookingDto.html":{},"classes/PassengerDto.html":{},"classes/SeatDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(documenttypes",{"_index":915,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(documenttypes)@isoptional",{"_index":1577,"title":{},"body":{"classes/UpdatePassengerDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(flightstatuses",{"_index":1024,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(flightstatuses)@isoptional",{"_index":1570,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(supportedlanguages)@isoptional",{"_index":1598,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["undefined})@isstring()@isnotempty()@isenum(themes)@isoptional",{"_index":1602,"title":{},"body":{"classes/UpdateSettingsDto.html":{}}}],["une",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":501,"title":{},"body":{"entities/Booking.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["unique(['email",{"_index":1634,"title":{},"body":{"entities/User.html":{}}}],["unique(['passenger",{"_index":509,"title":{},"body":{"entities/Booking.html":{}}}],["unique(['seat_number",{"_index":1396,"title":{},"body":{"entities/Seat.html":{}}}],["unique(['user",{"_index":1291,"title":{},"body":{"entities/Passenger.html":{}}}],["unknown",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1895,"title":{},"body":{"properties.html":{}}}],["update",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(attrs",{"_index":1223,"title":{},"body":{"injectables/FlightsService.html":{}}}],["update(body",{"_index":1204,"title":{},"body":{"controllers/FlightsController.html":{}}}],["update(id",{"_index":661,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["update(user",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatebooking",{"_index":567,"title":{},"body":{"controllers/BookingsController.html":{}}}],["updatebooking(id",{"_index":596,"title":{},"body":{"controllers/BookingsController.html":{}}}],["updatebookingdto",{"_index":597,"title":{"classes/UpdateBookingDto.html":{}},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["updatebookingstatus",{"_index":568,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["updatebookingstatus(id",{"_index":602,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["updatebookingstatusdto",{"_index":603,"title":{"classes/UpdateBookingStatusDto.html":{}},"body":{"controllers/BookingsController.html":{},"classes/UpdateBookingStatusDto.html":{},"coverage.html":{}}}],["updated",{"_index":515,"title":{},"body":{"entities/Booking.html":{},"controllers/BookingsController.html":{},"entities/Flight.html":{},"controllers/FlightsController.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"entities/Seat.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["updated_at",{"_index":459,"title":{},"body":{"entities/Booking.html":{},"classes/BookingBisDto.html":{},"classes/BookingDto.html":{},"entities/Flight.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["updatedatecolumn",{"_index":502,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["updatedatecolumn({type",{"_index":488,"title":{},"body":{"entities/Booking.html":{},"entities/Flight.html":{},"entities/User.html":{}}}],["updatedbooking",{"_index":780,"title":{},"body":{"injectables/BookingsService.html":{}}}],["updatedflight",{"_index":1231,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updatedpassenger",{"_index":1372,"title":{},"body":{"injectables/PassengersService.html":{}}}],["updatedseat",{"_index":1471,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateduser",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updateflight",{"_index":1171,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateflight(id",{"_index":1191,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateflightdto",{"_index":1192,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updatepassenger",{"_index":1309,"title":{},"body":{"controllers/PassengersController.html":{}}}],["updatepassenger(id",{"_index":1326,"title":{},"body":{"controllers/PassengersController.html":{}}}],["updatepassengerdto",{"_index":1327,"title":{"classes/UpdatePassengerDto.html":{}},"body":{"controllers/PassengersController.html":{},"classes/UpdatePassengerDto.html":{},"coverage.html":{}}}],["updates",{"_index":1438,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseat",{"_index":1413,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseat(id",{"_index":1424,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updateseatdto",{"_index":1425,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updatesettings",{"_index":1488,"title":{},"body":{"controllers/SettingsController.html":{},"injectables/SettingsService.html":{}}}],["updatesettings(@body",{"_index":1503,"title":{},"body":{"controllers/SettingsController.html":{}}}],["updatesettings(body",{"_index":1493,"title":{},"body":{"controllers/SettingsController.html":{}}}],["updatesettings(settings",{"_index":1513,"title":{},"body":{"injectables/SettingsService.html":{}}}],["updatesettingsdto",{"_index":1494,"title":{"classes/UpdateSettingsDto.html":{}},"body":{"controllers/SettingsController.html":{},"injectables/SettingsService.html":{},"classes/UpdateSettingsDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":1657,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@currentuser",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(user",{"_index":1693,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":1614,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":600,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["upload",{"_index":847,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{},"classes/UploadImageDto.html":{}}}],["upload(@body",{"_index":863,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["upload(image",{"_index":866,"title":{},"body":{"controllers/CloudinaryController.html":{},"injectables/CloudinaryService.html":{}}}],["upload(undefined",{"_index":852,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["uploadimagedto",{"_index":853,"title":{"classes/UploadImageDto.html":{}},"body":{"controllers/CloudinaryController.html":{},"classes/UploadImageDto.html":{},"coverage.html":{}}}],["uploading",{"_index":867,"title":{},"body":{"controllers/CloudinaryController.html":{}}}],["url",{"_index":894,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["use",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/UsersController.html":{}}}],["use(req",{"_index":1092,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["used",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateBookingDto.html":{},"classes/CreatePassengerDto.html":{},"classes/UpdatePassengerDto.html":{}}}],["useguards",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["useguards(adminguard",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{}}}],["useguards(authguard",{"_index":640,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":815,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["useinterceptors(new",{"_index":826,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializeInterceptor.html":{}}}],["user",{"_index":250,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/BookingsService.html":{},"classes/CreateUserDto.html":{},"injectables/CurrentUserMiddleware.html":{},"classes/EmailVerificationDto.html":{},"entities/Passenger.html":{},"controllers/PassengersController.html":{},"injectables/PassengersService.html":{},"classes/PasswordResetDto.html":{},"interfaces/Request.html":{},"controllers/SeatsController.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["user's",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["user'})@apiinternalservererrorresponse({description",{"_index":1668,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apinotfoundresponse({description",{"_index":1664,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.decorator",{"_index":622,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/PassengersController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":1070,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":1618,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":1072,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":1620,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":1074,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":1616,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:41",{"_index":1080,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":763,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"controllers/UsersController.html":{}}}],["user.is_email_verified",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.middleware",{"_index":1760,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":1090,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["user.middleware.ts:15",{"_index":1091,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.middleware.ts:18",{"_index":1094,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["user.password.split",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":764,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"injectables/UsersService.html":{}}}],["usercredentialsdto",{"_index":1638,"title":{"classes/UserCredentialsDto.html":{}},"body":{"classes/UserCredentialsDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userdata",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.token",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":1644,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userid",{"_index":1101,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"classes/PassengerDto.html":{},"interfaces/Request.html":{}}}],["userrole",{"_index":709,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":765,"title":{},"body":{"injectables/BookingsService.html":{},"injectables/PassengersService.html":{},"injectables/UsersService.html":{}}}],["userrole.customer",{"_index":1636,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1761,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.foreach((user",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.length",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":1360,"title":{},"body":{"injectables/PassengersService.html":{}}}],["users/users.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":200,"title":{},"body":{"injectables/AppService.html":{}}}],["userscontroller",{"_index":1654,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":106,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":192,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersstats",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["usevalue",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["util",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["v1",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["valid",{"_index":1075,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PasswordResetDto.html":{},"classes/VerifyEmailDto.html":{}}}],["validationpipe",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":930,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreatePassengerDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/GetBookingsDto.html":{},"classes/GetFlightsDto.html":{},"classes/PasswordResetDto.html":{},"classes/RemoveImageDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateBookingStatusDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdatePassengerDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSettingsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadImageDto.html":{},"classes/UserCredentialsDto.html":{},"classes/VerifyEmailDto.html":{},"dependencies.html":{}}}],["value",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":1117,"title":{},"body":{"entities/Flight.html":{},"entities/Passenger.html":{},"entities/Seat.html":{},"entities/User.html":{}}}],["variable",{"_index":1811,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1899,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbosememoryleak",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["verification",{"_index":1673,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification')@httpcode(200)@apiokresponse({description",{"_index":1672,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{}}}],["verification.dto.ts",{"_index":1107,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:20",{"_index":1109,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verification.dto.ts:29",{"_index":1112,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verified",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verify",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verifyemail",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verifyemail(@currentuser",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyemail(user",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verifyemaildto",{"_index":1696,"title":{"classes/VerifyEmailDto.html":{}},"body":{"controllers/UsersController.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["verifying",{"_index":1699,"title":{},"body":{"controllers/UsersController.html":{}}}],["version",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["veuillez",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["view",{"_index":593,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/BookingsService.html":{}}}],["void",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["votre",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["vous",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["want",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["website_url",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["welcome",{"_index":202,"title":{},"body":{"injectables/AppService.html":{}}}],["welcomemessage",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["went",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["whether",{"_index":1011,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["whitelist",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["whoami",{"_index":1658,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@currentuser",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(user",{"_index":1701,"title":{},"body":{"controllers/UsersController.html":{}}}],["width",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["width:850px",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["wildcard",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["wildcards",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["wrong",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/CloudinaryController.html":{},"controllers/FlightsController.html":{},"controllers/PassengersController.html":{},"controllers/SeatsController.html":{},"controllers/SettingsController.html":{},"controllers/UsersController.html":{}}}],["y",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["yvanig",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["zoom",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingsModule.html":{},"modules/CloudinaryModule.html":{},"modules/FlightsModule.html":{},"modules/PassengersModule.html":{},"modules/SeatsModule.html":{},"modules/SettingsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/admin.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/admin.guard.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\n\nexport class AdminGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    if (!request.currentUser) {\n      return false;\n    }\n    if (request.currentUser.role !== 'sysadmin') {\n      return false;\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStats\n                            \n                            \n                                welcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStats\n                        \n                    \n                \n            \n            \n                \ngetStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stats')@UseGuards(AdminGuard)@ApiBadRequestResponse({description: 'Failed to get flights stats | Failed to get users stats | Failed to get bookings stats'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting stats'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        welcomeMessage\n                        \n                    \n                \n            \n            \n                \nwelcomeMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  InternalServerErrorException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n} from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { AdminGuard } from './guards/admin.guard';\n\n@Controller({\n  path: '/api',\n  version: '1',\n})\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  welcomeMessage(): { message: string } {\n    return this.appService.getWelcomeMessage();\n  }\n\n  @Get('/stats')\n  @UseGuards(AdminGuard)\n  @ApiBadRequestResponse({\n    description:\n      'Failed to get flights stats | Failed to get users stats | Failed to get bookings stats',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting stats',\n  })\n  getStats() {\n    return this.appService\n      .getStats()\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Failed to get flights stats') {\n              throw new BadRequestException('Failed to get flights stats');\n            } else if (err.response?.message === 'Failed to get users stats') {\n              throw new BadRequestException('Failed to get users stats');\n            } else {\n              throw new BadRequestException('Failed to get bookings stats');\n            }\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting stats',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nBookingsModule\n\nBookingsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingsModule->AppModule\n\n\n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nAppModule -->\n\nCloudinaryModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nAppModule -->\n\nPassengersModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSettingsModule\n\nSettingsModule\n\nAppModule -->\n\nSettingsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BookingsModule\n                        \n                        \n                            CloudinaryModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            PassengersModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SettingsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, ValidationPipe, MiddlewareConsumer } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nconst cookieSession = require('cookie-session');\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { PassengersModule } from './passengers/passengers.module';\nimport { BookingsModule } from './bookings/bookings.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { CloudinaryModule } from './cloudinary/cloudinary.module';\nimport { SettingsModule } from './settings/settings.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n    }),\n    EventEmitterModule.forRoot({\n      // set this to `true` to use wildcards\n      wildcard: true,\n      // the delimiter used to segment namespaces\n      delimiter: '.',\n      // set this to `true` if you want to emit the newListener event\n      newListener: false,\n      // set this to `true` if you want to emit the removeListener event\n      removeListener: false,\n      // the maximum amount of listeners that can be assigned to an event\n      maxListeners: 10,\n      // show event name in memory leak message when more than maximum amount of listeners is assigned\n      verboseMemoryLeak: false,\n      // disable throwing uncaughtException if an error event is emitted and it has no listeners\n      ignoreErrors: false,\n    }),\n    TypeOrmModule.forRoot(),\n    UsersModule,\n    FlightsModule,\n    SeatsModule,\n    PassengersModule,\n    BookingsModule,\n    CloudinaryModule,\n    SettingsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n      }),\n    },\n  ],\n})\nexport class AppModule {\n  constructor(private configService: ConfigService) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(\n        cookieSession({\n          keys: [this.configService.get('COOKIE_KEY')],\n        }),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                getWelcomeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightsService: FlightsService, usersService: UsersService, bookingsService: BookingsService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightsService\n                                                  \n                                                        \n                                                                        FlightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bookingsService\n                                                  \n                                                        \n                                                                        BookingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStats()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWelcomeMessage\n                        \n                    \n                \n            \n            \n                \ngetWelcomeMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BookingsService } from './bookings/bookings.service';\nimport { FlightsService } from './flights/flights.service';\nimport { UsersService } from './users/users.service';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private flightsService: FlightsService,\n    private usersService: UsersService,\n    private bookingsService: BookingsService,\n  ) {}\n\n  getWelcomeMessage(): { message: string } {\n    return {\n      message: 'Welcome to the YVANIG Tour API V1',\n    };\n  }\n\n  async getStats() {\n    const flightsStats = await this.flightsService.getStats();\n    const usersStats = await this.usersService.getStats();\n    const bookingsStats = await this.bookingsService.getStats();\n\n    return { flightsStats, usersStats, bookingsStats };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/auth.guard.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\n\nexport class AuthGuard implements CanActivate {\n  async canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    return request.session.userId; // truthy value if exist\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(token: string, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:677\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(data: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:611\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(email: string, isRegistration: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isRegistration\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:660\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(user: User, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:716\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { sendEmailWithNodemailer } from '../helpers/email';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { randomBytes, scrypt as _scrypt } from 'crypto';\nimport { promisify } from 'util';\nimport { User } from './user.entity';\n\nconst scrypt = promisify(_scrypt);\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  async sendEmailVerification(email: string, isRegistration: boolean) {\n    const token = this.jwtService.sign({ email });\n\n    let subject = `YVANIG TOUR | Veuillez confirmer votre email`;\n    let registrationMetaText = `Merci d'avoir rejoint YVANIG TOUR. Nous avons besoin d'un peu plus d'informations pour compléter votre inscription, y compris une confirmation de votre adresse e-mail.`;\n    let simpleValidationMetaText = `Une confirmation de votre adresse e-mail est requise avoir accès aux fonctionnalités de YVANIG TOUR. Veuillez confirmer votre adresse e-mail en cliquant sur le lien ci-dessous.`;\n\n    let registrationLink = `${this.configService.get(\n      'WEBSITE_URL',\n    )}/auth/register/complete?token=${token}`;\n\n    let simpleValidationLink = `${this.configService.get(\n      'WEBSITE_URL',\n    )}/auth/email/validate?token=${token}`;\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: subject,\n      text: isRegistration ? registrationMetaText : simpleValidationMetaText,\n      html: `\n      \n      \n      \n      \n        \n        \n        \n        96\n        \n          * {\n            box-sizing: border-box;\n          }\n      \n          body {\n            margin: 0;\n            padding: 0;\n          }\n      \n          a[x-apple-data-detectors] {\n            color: inherit !important;\n            text-decoration: inherit !important;\n          }\n      \n          #MessageViewBody a {\n            color: inherit;\n            text-decoration: none;\n          }\n      \n          p {\n            line-height: inherit\n          }\n      \n          @media (max-width:850px) {\n            .icons-inner {\n              text-align: center;\n            }\n      \n            .icons-inner td {\n              margin: 0 auto;\n            }\n      \n            .row-content {\n              width: 100% !important;\n            }\n      \n            .column .border {\n              display: none;\n            }\n      \n            table {\n              table-layout: fixed !important;\n            }\n      \n            .stack .column {\n              width: 100%;\n              display: block;\n            }\n          }\n        \n      \n      \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      Confirmer votre adresse email\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Merci de nous avoir rejoint\n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                        \n                                          Pour finaliser votre inscription, cliquez sur le bouton ci-dessous.\n                                          &nbsp;\n                                          Si vous rencontrez des difficultés pour vous connecter à votre compte, contactez-nous à\n                                          yvanig-tour@gmail.com\n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Je confirme mon adresse email\n                                      \n                                    \n                                  \n                                \n                              \n                              \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        Ou cliquez sur ce lien: Confirmer mon adresse email\n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            \n                                            \n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n              \n            \n          \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return JSON.stringify({\n      success: true,\n    });\n  }\n\n  async sendPasswordResetEmail(email: string) {\n    // check if user exists\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const token = this.jwtService.sign({ email });\n\n    const emailData = {\n      from: process.env.EMAIL,\n      to: email,\n      subject: `YVANIG TOUR | Réinitialisation de votre mot de passe`,\n      text: `Vous recevez cet email car vous avez demandé une réinitialisation de votre mot de passe.`,\n      html: `\n      \n      \n      \n      \n        \n        \n        \n        96\n        \n          * {\n            box-sizing: border-box;\n          }\n      \n          body {\n            margin: 0;\n            padding: 0;\n          }\n      \n          a[x-apple-data-detectors] {\n            color: inherit !important;\n            text-decoration: inherit !important;\n          }\n      \n          #MessageViewBody a {\n            color: inherit;\n            text-decoration: none;\n          }\n      \n          p {\n            line-height: inherit\n          }\n      \n          @media (max-width:850px) {\n            .icons-inner {\n              text-align: center;\n            }\n      \n            .icons-inner td {\n              margin: 0 auto;\n            }\n      \n            .row-content {\n              width: 100% !important;\n            }\n      \n            .column .border {\n              display: none;\n            }\n      \n            table {\n              table-layout: fixed !important;\n            }\n      \n            .stack .column {\n              width: 100%;\n              display: block;\n            }\n          }\n        \n      \n      \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      Réinitialiser votre mot de passe\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            &#8202;\n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Mot de passe oublié?\n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      \n                                        \n                                          Pour réinitialiser votre mot de passe, cliquez sur le bouton ci-dessous.\n                                          &nbsp;\n                                          Si vous rencontrez des difficultés pour vous connecter à votre compte, contactez-nous à\n                                          yvanig-tour@gmail.com\n                                        \n                                      \n                                    \n                                  \n                                \n                                \n                                  \n                                    \n                                      Je réinitialise mon mot de passe\n                                      \n                                    \n                                  \n                                \n                              \n                              \n                                \n                                  \n                                    \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        Ou cliquez sur ce lien: Réinitialiser mon mot de passe\n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      \n                                        \n                                          \n                                            \n                                            \n                                          \n                                        \n                                      \n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n              \n            \n          \n        \n      \n      \n      \n      `,\n    };\n\n    await sendEmailWithNodemailer(emailData);\n\n    return JSON.stringify({\n      success: true,\n    });\n  }\n\n  async register(data: CreateUserDto) {\n    // check if email has been verified\n    let decodedToken;\n\n    try {\n      decodedToken = await this.jwtService.verify(data.token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // check if user already exists\n    const users = await this.usersService.find(decodedToken.email);\n\n    if (users.length) {\n      throw new BadRequestException('Email in use');\n    }\n\n    // Hash the user's password\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(data.password, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n    // 4- Create a new user and save it to the database\n\n    const userData = {\n      ...data,\n      email: decodedToken.email,\n      is_email_verified: true,\n      password: result,\n    };\n\n    delete userData.token;\n\n    try {\n      const user = await this.usersService.create(userData);\n      return user;\n    } catch (err) {\n      throw new BadRequestException('Failed to create user');\n    }\n  }\n\n  async signin(email: string, password: string) {\n    const [user] = await this.usersService.find(email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const [salt, storedHash] = user.password.split('.');\n    const hash = (await scrypt(password, salt, 32)) as Buffer;\n\n    if (storedHash !== hash.toString('hex')) {\n      throw new UnauthorizedException('Incorrect credentials');\n    }\n\n    return user;\n  }\n\n  async passwordReset(token: string, newPassword: string): Promise {\n    let decodedToken: any;\n\n    try {\n      decodedToken = await this.jwtService.verify(token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    const [user] = await this.usersService.find(decodedToken.email);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // 1- Generate a salt\n    const salt = randomBytes(8).toString('hex');\n    // 2- Generate a password hash\n    const hash = (await scrypt(newPassword, salt, 32)) as Buffer;\n    // 3- Join the hash and the salt\n    const result = salt + '.' + hash.toString('hex');\n\n    // modify user's password\n    try {\n      const updatedUser = await this.usersService.update(user, {\n        password: result,\n      });\n\n      return updatedUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to update password of the user');\n    }\n  }\n\n  async verifyEmail(user: User, token: string) {\n    // check if email has been verified\n    let decodedToken;\n\n    try {\n      decodedToken = await this.jwtService.verify(token);\n    } catch (err) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // extra check just in case\n    if (!decodedToken && !decodedToken.email) {\n      throw new BadRequestException('Invalid token');\n    }\n\n    // check if user already exists\n    const [foundUser] = await this.usersService.find(decodedToken.email);\n\n    try {\n      const updatedUser = await this.usersService.update(foundUser, {\n        is_email_verified: true,\n      });\n\n      return updatedUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to verify email');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Booking.html":{"url":"entities/Booking.html","title":"entity - Booking","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Booking\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/booking.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flight\n                            \n                            \n                                id\n                            \n                            \n                                passenger\n                            \n                            \n                                price\n                            \n                            \n                                seat\n                            \n                            \n                                status\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: BookingTypes, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Flight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, flight => flight.bookings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passenger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Passenger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, passenger => passenger.bookings, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Seat\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: BookingStatuses, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/booking.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Flight } from 'src/flights/flight.entity';\nimport { Passenger } from 'src/passengers/passenger.entity';\nimport { Seat } from 'src/seats/seat.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum BookingTypes {\n  FLIGHT = 'flight',\n  HOTEL = 'hotel',\n  RESTAURANT = 'restaurant',\n}\n\nexport enum BookingStatuses {\n  CONFIRMED = 'confirmed',\n  CANCELLED = 'cancelled',\n  PENDING = 'pending',\n}\n\n@Entity()\n@Unique(['passenger', 'flight'])\nexport class Booking {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: BookingTypes,\n    nullable: false,\n  })\n  booking_type: BookingTypes;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  price: number;\n\n  @Column({\n    type: 'enum',\n    enum: BookingStatuses,\n    nullable: false,\n    default: BookingStatuses.PENDING,\n  })\n  status: BookingStatuses;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  @ManyToOne(() => Flight, (flight) => flight.bookings, { onDelete: 'CASCADE' })\n  flight: Flight;\n\n  @OneToOne(() => Seat, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  seat: Seat;\n\n  @ManyToOne(() => Passenger, (passenger) => passenger.bookings, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  passenger: Passenger;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Booking inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Booking updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Booking removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookingBisDto.html":{"url":"classes/BookingBisDto.html","title":"class - BookingBisDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookingBisDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/booking-bis.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                passengerId\n                            \n                            \n                                price\n                            \n                            \n                                seatId\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passengerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking-bis.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { BookingTypes } from '../booking.entity';\n\nexport class BookingBisDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  booking_type: BookingTypes;\n\n  @Expose()\n  price: number;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.flight.id;\n    });\n  })\n  @Expose()\n  flightId: number;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.seat.id;\n    });\n  })\n  @Expose()\n  seatId: number;\n\n  @Transform(({ obj }) => {\n    obj.bookings.forEach((booking) => {\n      return booking.passenger.id;\n    });\n  })\n  @Expose()\n  passengerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookingDto.html":{"url":"classes/BookingDto.html","title":"class - BookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                created_at\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                passengerId\n                            \n                            \n                                price\n                            \n                            \n                                seatId\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passengerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/booking.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { BookingTypes } from '../booking.entity';\n\nexport class BookingDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  booking_type: BookingTypes;\n\n  @Expose()\n  price: number;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Transform(({ obj }) => obj.flight.id)\n  @Expose()\n  flightId: number;\n\n  @Transform(({ obj }) => obj.seat.id)\n  @Expose()\n  seatId: number;\n\n  @Transform(({ obj }) => obj.passenger.id)\n  @Expose()\n  passengerId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookingEvent.html":{"url":"interfaces/BookingEvent.html","title":"interface - BookingEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookingEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/interfaces/BookingCreatedEvent.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            is_available\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_available\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        is_available:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookingEvent {\n  id: number;\n  is_available: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookingsController.html":{"url":"controllers/BookingsController.html","title":"controller - BookingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/bookings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBooking\n                            \n                            \n                                    Async\n                                deleteBooking\n                            \n                            \n                                    Async\n                                getAllBookings\n                            \n                            \n                                    Async\n                                getBooking\n                            \n                            \n                                    Async\n                                updateBooking\n                            \n                            \n                                    Async\n                                updateBookingStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    createBooking(body: CreateBookingDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiCreatedResponse({description: 'The booking was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new booking | Failed to get the passenger | Failed to create a new passenger | Failed to update the seat'})@ApiNotFoundResponse({description: 'Flight not found | Seat not found or not available | Seat not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllBookings\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllBookings(query: GetBookingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AdminGuard)@ApiOkResponse({description: 'The bookings were found successfully'})@ApiBadRequestResponse({description: 'Failed to get the bookings'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the bookings'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetBookingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBooking(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The booking was found successfully'})@ApiBadRequestResponse({description: 'Failed to get the passenger'})@ApiNotFoundResponse({description: 'Booking not found | Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to view this booking'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateBooking(id: number, body: UpdateBookingDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@Serialize(BookingDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The booking was updated successfully'})@ApiBadRequestResponse({description: 'Failed to update the booking | A new seat id is required'})@ApiNotFoundResponse({description: 'Booking not found | Passenger not found | Seat not found or not available| Flight not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to update this booking'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the booking'})\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateBookingStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateBookingStatus(id: number, body: UpdateBookingStatusDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update-status/:id')@Serialize(BookingDto)@UseGuards(AdminGuard)\n                \n            \n\n            \n                \n                    Defined in src/bookings/bookings.controller.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateBookingStatusDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CurrentUser } from 'src/users/decorators/current-user.decorator';\nimport { User } from 'src/users/user.entity';\nimport { BookingsService } from './bookings.service';\nimport { BookingDto } from './dtos/booking.dto';\nimport { CreateBookingDto } from './dtos/create-booking.dto';\nimport { GetBookingsDto } from './dtos/get-bookings.dto';\nimport { UpdateBookingStatusDto } from './dtos/update-booking-status.dto';\nimport { UpdateBookingDto } from './dtos/update-booking.dto';\n\n// LAST TIME REVIEWED: 2022-04-10\n@ApiTags('bookings')\n@Controller({\n  path: 'api/bookings',\n  version: '1',\n})\nexport class BookingsController {\n  constructor(private bookingsService: BookingsService) {}\n\n  // Creates a new booking\n  @Post()\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiCreatedResponse({\n    description: 'The booking was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description:\n      'Failed to create a new booking | Failed to get the passenger | Failed to create a new passenger | Failed to update the seat',\n  })\n  @ApiNotFoundResponse({\n    description:\n      'Flight not found | Seat not found or not available | Seat not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new booking',\n  })\n  async createBooking(\n    @Body() body: CreateBookingDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .create(body, user)\n      .then(async (res) => {\n        return res;\n      })\n      .catch(async (err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            if (err.response?.message === 'Flight not found') {\n              throw new NotFoundException('Flight not found');\n            } else if (\n              err.response?.message === 'Seat not found or not available' ||\n              err.response?.message === 'Seat not found'\n            ) {\n              throw new NotFoundException('Seat not found or not available');\n            }\n          case 400:\n            if (err.response?.message === 'Failed to get the passengers') {\n              throw new BadRequestException('Failed to get the passenger');\n            } else if (\n              err.response?.message === 'Failed to create a new passenger'\n            ) {\n              throw new BadRequestException('Failed to create a new passenger');\n            } else if (\n              err.response?.message === 'Failed to create a new booking'\n            ) {\n              throw new BadRequestException('Failed to create a new booking');\n            } else if (err.response?.message === 'Failed to update the seat') {\n              throw new BadRequestException('Failed to update the seat');\n            }\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new booking',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns all bookings\n  @Get()\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The bookings were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the bookings',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the bookings',\n  })\n  async getAllBookings(@Query() query: GetBookingsDto) {\n    return this.bookingsService\n      .findAll(query)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the bookings');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the bookings',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns a booking\n  @Get('/:id')\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The booking was found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Booking not found | Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to view this booking',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the booking',\n  })\n  async getBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .findOne(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the passenger');\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to view this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the booking',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Update a booking if the user is the owner\n  @Patch('/:id')\n  @Serialize(BookingDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The booking was updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the booking | A new seat id is required',\n  })\n  @ApiNotFoundResponse({\n    description:\n      'Booking not found | Passenger not found | Seat not found or not available| Flight not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to update this booking',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the booking',\n  })\n  async updateBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateBookingDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .update(id, body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Failed to update the booking') {\n              throw new BadRequestException('Failed to update the booking');\n            } else if (err.response?.message === 'A new seat id is required') {\n              throw new NotFoundException('A new seat id is required');\n            }\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            } else if (\n              err.response?.message === 'Seat not found or not available'\n            ) {\n              throw new NotFoundException('Seat not found or not available');\n            } else if (err.response?.message === 'Flight not found') {\n              throw new NotFoundException('Flight not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to update this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the booking',\n            );\n        }\n      });\n  }\n\n  @Patch('/update-status/:id')\n  @Serialize(BookingDto)\n  @UseGuards(AdminGuard)\n  async updateBookingStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateBookingStatusDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .updateBookingStatus(id, body.status, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            }\n          case 400:\n            throw new BadRequestException('Failed to update booking status');\n          default:\n            throw new InternalServerErrorException(\n              'Somthing went wrong while updating booking status',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Delete a booking if the user is the owner\n  @Delete('/:id')\n  @UseGuards(AuthGuard)\n  async deleteBooking(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.bookingsService\n      .delete(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to delete the booking');\n          case 404:\n            if (err.response?.message === 'Booking not found') {\n              throw new NotFoundException('Booking not found');\n            } else if (err.response?.message === 'Passenger not found') {\n              throw new NotFoundException('Passenger not found');\n            }\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to delete this booking',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the booking',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookingsModule.html":{"url":"modules/BookingsModule.html","title":"module - BookingsModule","body":"\n                   \n\n\n\n\n    Modules\n    BookingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BookingsModule\n\n\n\ncluster_BookingsModule_providers\n\n\n\ncluster_BookingsModule_exports\n\n\n\ncluster_BookingsModule_imports\n\n\n\n\nFlightsModule\n\nFlightsModule\n\n\n\nBookingsModule\n\nBookingsModule\n\nBookingsModule -->\n\nFlightsModule->BookingsModule\n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nBookingsModule -->\n\nPassengersModule->BookingsModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nBookingsModule -->\n\nSeatsModule->BookingsModule\n\n\n\n\n\nBookingsService \n\nBookingsService \n\nBookingsService  -->\n\nBookingsModule->BookingsService \n\n\n\n\n\nBookingsService\n\nBookingsService\n\nBookingsModule -->\n\nBookingsService->BookingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bookings/bookings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookingsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookingsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FlightsModule\n                        \n                        \n                            PassengersModule\n                        \n                        \n                            SeatsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BookingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { PassengersModule } from 'src/passengers/passengers.module';\nimport { SeatsModule } from 'src/seats/seats.module';\nimport { Booking } from './booking.entity';\nimport { BookingsController } from './bookings.controller';\nimport { BookingsService } from './bookings.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Booking]),\n    PassengersModule,\n    FlightsModule,\n    SeatsModule,\n  ],\n  controllers: [BookingsController],\n  providers: [BookingsService],\n  exports: [BookingsService],\n})\nexport class BookingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingsService.html":{"url":"injectables/BookingsService.html","title":"injectable - BookingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/bookings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                generatePrice\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateBookingStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository, passengersService: PassengersService, flightsService: FlightsService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bookings/bookings.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passengersService\n                                                  \n                                                        \n                                                                        PassengersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightsService\n                                                  \n                                                        \n                                                                        FlightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(booking: CreateBookingDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    booking\n                                    \n                                                CreateBookingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePrice\n                        \n                    \n                \n            \n            \n                \ngeneratePrice(seat: Seat, flight: Flight)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seat\n                                    \n                                                Seat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flight\n                                    \n                                                Flight\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStats()\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateBookingStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateBookingStatus(id: number, status: BookingStatuses, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/bookings/bookings.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                BookingStatuses\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Flight } from 'src/flights/flight.entity';\nimport { FlightsService } from 'src/flights/flights.service';\nimport { Passenger } from 'src/passengers/passenger.entity';\nimport { PassengersService } from 'src/passengers/passengers.service';\nimport { ClassTypes, Seat } from 'src/seats/seat.entity';\nimport { User, UserRole } from 'src/users/user.entity';\nimport { Repository } from 'typeorm';\nimport { Booking, BookingStatuses } from './booking.entity';\nimport { CreateBookingDto } from './dtos/create-booking.dto';\nimport { GetBookingsDto } from './dtos/get-bookings.dto';\nimport { UpdateBookingDto } from './dtos/update-booking.dto';\n\n@Injectable()\nexport class BookingsService {\n  constructor(\n    @InjectRepository(Booking) private repo: Repository,\n    private passengersService: PassengersService,\n    private flightsService: FlightsService,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async create(booking: CreateBookingDto, user: User) {\n    // Find the flight\n    const foundFlight = await this.flightsService.findOne(booking.flightId);\n    // Find the seat thats is available\n    const foundSeat = foundFlight.seats.find(\n      (seat) => seat.id === booking.seatId && seat.is_available === true,\n    );\n\n    if (!foundSeat) {\n      throw new NotFoundException('Seat not found or not available');\n    }\n\n    // Find a passenger if it exists. If not create one\n    let passenger: Passenger;\n    const foundPassengers = await this.passengersService.findByUser(user);\n    if (foundPassengers.length === 0) {\n      passenger = await this.passengersService.create(\n        {\n          document_type: booking.document_type,\n          document_number: booking.document_number,\n          date_of_birth: booking.date_of_birth,\n          gender: booking.gender,\n        },\n        user,\n      );\n    } else {\n      passenger = foundPassengers[0];\n    }\n\n    // Generate a price\n    let price = this.generatePrice(foundSeat, foundFlight);\n\n    try {\n      // Create the booking\n      const newBooking = this.repo.create({\n        booking_type: booking.booking_type,\n        price,\n      });\n\n      newBooking.flight = foundFlight;\n      newBooking.seat = foundSeat;\n      newBooking.passenger = passenger;\n\n      const createdBooking = await this.repo.save(newBooking);\n\n      // Emit an event to update the seat availability\n      this.eventEmitter.emit('booking.created', {\n        id: foundSeat.id,\n        is_available: false,\n      });\n      return createdBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundSeat.id,\n        is_available: true,\n      });\n      throw new BadRequestException('Failed to create a new booking');\n    }\n  }\n\n  async findAll(options: Partial) {\n    const page = parseInt(options.page) || 0;\n    const limit = parseInt(options.limit) || 10;\n    try {\n      const bookings = await this.repo.find({\n        skip: page * limit,\n        take: limit,\n        order: { created_at: 'DESC' },\n        relations: ['flight', 'seat', 'passenger'],\n      });\n      const totalCount = (await this.repo.find()).length;\n\n      return { bookings, total_count: totalCount };\n    } catch (err) {\n      throw new BadRequestException('Failed to get the bookings');\n    }\n  }\n\n  // Find a booking by id\n  async findOne(id: number, user: User) {\n    const booking = await this.repo.findOne(id, {\n      relations: ['flight', 'seat', 'passenger'],\n    });\n\n    if (!booking) {\n      throw new NotFoundException('Booking not found');\n    }\n\n    // find passenger\n    const passenger = await this.passengersService.findOne(\n      booking.passenger.id,\n    );\n\n    if (passenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to view this booking',\n      );\n    }\n\n    return booking;\n  }\n\n  async update(id: number, attrs: Partial, user: User) {\n    const foundBooking = await this.findOne(id, user);\n    // old seat\n    const oldSeat = foundBooking.seat;\n\n    if (attrs.flightId) {\n      if (!attrs.seatId) {\n        throw new BadRequestException('A new seat id is required');\n      }\n      const foundFlight = await this.flightsService.findOne(attrs.flightId);\n      const foundSeat = foundFlight.seats.find(\n        (seat) => seat.id === attrs.seatId && seat.is_available === true,\n      );\n      if (!foundSeat) {\n        throw new NotFoundException('Seat not found or not available');\n      }\n      // Generate a price\n      let price = this.generatePrice(foundSeat, foundFlight);\n\n      foundBooking.price = price;\n      foundBooking.flight = foundFlight;\n      foundBooking.seat = foundSeat;\n    }\n\n    if (attrs.seatId && !attrs.flightId) {\n      // Find the flight\n      const foundFlight = await this.flightsService.findOne(\n        foundBooking.flight.id,\n      );\n\n      const foundSeat = foundFlight.seats.find(\n        (seat) => seat.id === attrs.seatId && seat.is_available === true,\n      );\n      if (!foundSeat) {\n        throw new NotFoundException('Seat not found or not available');\n      }\n\n      // Generate a price\n      let price = this.generatePrice(foundSeat, foundFlight);\n\n      foundBooking.price = price;\n      foundBooking.seat = foundSeat;\n    }\n\n    Object.assign(foundBooking, attrs);\n\n    try {\n      const updatedBooking = await this.repo.save(foundBooking);\n      this.eventEmitter.emit('booking.updated', {\n        id: foundBooking.seat.id,\n        is_available: false,\n      });\n\n      if (attrs.seatId) {\n        setTimeout(() => {\n          this.eventEmitter.emit('booking.updated', {\n            id: oldSeat.id,\n            is_available: true,\n          });\n        }, 10000);\n      }\n\n      return updatedBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundBooking.seat.id,\n        is_available: true,\n      });\n      this.eventEmitter.emit('booking.updated', {\n        id: oldSeat.id,\n        is_available: false,\n      });\n      throw new BadRequestException('Failed to update the booking');\n    }\n  }\n\n  async updateBookingStatus(id: number, status: BookingStatuses, user: User) {\n    const foundBooking = await this.findOne(id, user);\n\n    foundBooking.status = status;\n\n    try {\n      const updatedBooking = await this.repo.save(foundBooking);\n\n      if (status === BookingStatuses.CONFIRMED) {\n        this.eventEmitter.emit('booking.confirmed', {\n          id: foundBooking.seat.id,\n          is_available: false,\n        });\n      }\n\n      if (status === BookingStatuses.CANCELLED) {\n        console.log('[cancelled]', status);\n\n        this.eventEmitter.emit('booking.cancelled', {\n          id: foundBooking.seat.id,\n          is_available: true,\n        });\n      }\n\n      return updatedBooking;\n    } catch (err) {\n      throw new BadRequestException('Failed to update booking status');\n    }\n  }\n\n  async delete(id: number, user: User) {\n    const foundBooking = await this.findOne(id, user);\n\n    try {\n      const removedBooking = await this.repo.remove(foundBooking);\n\n      this.eventEmitter.emit('booking.deleted', {\n        id: foundBooking.seat.id,\n        is_available: true,\n      });\n\n      return removedBooking;\n    } catch (err) {\n      this.eventEmitter.emit('booking.failed', {\n        id: foundBooking.seat.id,\n        is_available: false,\n      });\n      throw new BadRequestException('Failed to delete the booking');\n    }\n  }\n\n  generatePrice(seat: Seat, flight: Flight) {\n    if (seat.class_type === ClassTypes.FIRST) {\n      return flight.seat_price_first_class;\n    } else if (seat.class_type === ClassTypes.BUSINESS) {\n      return flight.seat_price_business_class;\n    } else {\n      return flight.seat_base_price;\n    }\n  }\n\n  async getStats() {\n    let stats = {\n      total: 0,\n      total_confirmed: 0,\n      total_cancelled: 0,\n      total_pending: 0,\n    };\n\n    try {\n      const bookings = await this.repo.find();\n\n      stats.total = bookings.length;\n      bookings.forEach((booking) => {\n        booking.status === BookingStatuses.CONFIRMED &&\n          (stats.total_confirmed += 1);\n\n        booking.status === BookingStatuses.CANCELLED &&\n          (stats.total_cancelled += 1);\n\n        booking.status === BookingStatuses.PENDING &&\n          (stats.total_pending += 1);\n      });\n\n      return stats;\n    } catch (err) {\n      throw new BadRequestException('Failed to get bookings stats');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CloudinaryController.html":{"url":"controllers/CloudinaryController.html","title":"controller - CloudinaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CloudinaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary/cloudinary.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(undefined: RemoveImageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/remove')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/cloudinary/cloudinary.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RemoveImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(undefined: UploadImageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/upload')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/cloudinary/cloudinary.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UploadImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  InternalServerErrorException,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { CloudinaryService } from './cloudinary.service';\nimport { RemoveImageDto } from './dtos/remove-image.dto';\nimport { UploadImageDto } from './dtos/upload-image.dto';\n\n@Controller({\n  path: 'api/cloudinary',\n  version: '1',\n})\nexport class CloudinaryController {\n  constructor(private cloudinaryService: CloudinaryService) {}\n\n  @Post('/upload')\n  @UseGuards(AuthGuard)\n  async upload(@Body() { image }: UploadImageDto) {\n    return this.cloudinaryService\n      .upload(image)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to upload image');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while uploading image',\n            );\n        }\n      });\n  }\n\n  @Post('/remove')\n  @UseGuards(AuthGuard)\n  async remove(@Body() { public_id }: RemoveImageDto) {\n    return this.cloudinaryService\n      .remove(public_id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to remove image');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while removing image',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CloudinaryModule.html":{"url":"modules/CloudinaryModule.html","title":"module - CloudinaryModule","body":"\n                   \n\n\n\n\n    Modules\n    CloudinaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cloudinary/cloudinary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CloudinaryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary.service';\nimport { CloudinaryController } from './cloudinary.controller';\n\n@Module({\n  providers: [CloudinaryService],\n  controllers: [CloudinaryController]\n})\nexport class CloudinaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/cloudinary/cloudinary.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(public_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cloudinary/cloudinary.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    public_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(image: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cloudinary/cloudinary.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport * as cloudinary from 'cloudinary';\n\n// config\ncloudinary.v2.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n@Injectable()\nexport class CloudinaryService {\n  constructor() {}\n\n  async upload(image: string) {\n    try {\n      let result = await cloudinary.v2.uploader.upload(image, {\n        public_id: `${Date.now()}`,\n        resource_type: 'auto',\n      });\n      return JSON.stringify({\n        public_id: result.public_id,\n        url: result.secure_url,\n      });\n    } catch (err) {\n      console.log(err);\n      throw new BadRequestException('Failed to upload image');\n    }\n  }\n\n  async remove(public_id: string) {\n    cloudinary.v2.uploader.destroy(public_id, (err, result) => {\n      if (err) {\n        console.log(err);\n        throw new BadRequestException('Failed to remove image');\n      }\n      return JSON.stringify({\n        success: true,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookingDto.html":{"url":"classes/CreateBookingDto.html","title":"class - CreateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/create-booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                flightId\n                            \n                            \n                                gender\n                            \n                            \n                                seatId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'flight | hotel | restaurant', enum: BookingTypes})@IsString()@IsNotEmpty()@IsEnum(BookingTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the flight'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the seat'})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/create-booking.dto.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { DocumentTypes, Genders } from '../../passengers/passenger.entity';\nimport { BookingTypes } from '../booking.entity';\n\nexport class CreateBookingDto {\n  // Everything needed to create a passenger\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  gender: Genders;\n\n  // Everything needed to create a booking\n  @ApiProperty({\n    type: String,\n    description: 'flight | hotel | restaurant',\n    enum: BookingTypes,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingTypes)\n  booking_type: BookingTypes;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the flight',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  flightId: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the seat',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  seatId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/create-flight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_code\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_code\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airline', default: 'AB Aviation'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of arrival', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of arrival', default: '10:00 PM'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the maximum number of seats available', default: 20})@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the url of the company logo', default: 'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of departure', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of departure', default: '06:00 AM'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the description of the flight', default: 'A flight from Comoros to Tanzania'})@IsString()@Length(1, 1000)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of destination of the flight', default: 'Tanzania'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the destination airport code', default: 'AB123'})@IsString()@Length(1, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of destination', default: 'Julius Nyerere International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the flight identification number', default: 'AB123'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of origin of the flight', default: 'Comoros'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the origin airport code', default: 'AB123'})@IsString()@Length(1, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of origin', default: 'Prince Said Ibrahim International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'whether the flight is refundable', default: false})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the base price of the flight', default: '1000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:175\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for business class', default: '2000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:184\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for first class', default: '3000.00'})@IsDecimal()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:193\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the status of the flight', enum: FlightStatuses, default: undefined})@IsString()@IsNotEmpty()@IsEnum(FlightStatuses)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/create-flight.dto.ts:204\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDecimal,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { FlightStatuses } from '../flight.entity';\n\nexport class CreateFlightDto {\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airline',\n    default: 'AB Aviation',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  airline: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the flight identification number',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  flight_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the origin airport code',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  origin_airport_code: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the destination airport code',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  destination_airport_code: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the maximum number of seats available',\n    default: 20,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  capacity: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of origin of the flight',\n    default: 'Comoros',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  origin: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of destination of the flight',\n    default: 'Tanzania',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  destination: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of origin',\n    default: 'Prince Said Ibrahim International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  origin_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of destination',\n    default: 'Julius Nyerere International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  destination_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of departure',\n    default: '06:00 AM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  departure_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of arrival',\n    default: '10:00 PM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  arrival_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of departure',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  departure_date: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of arrival',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  arrival_date: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'whether the flight is refundable',\n    default: false,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  refundable: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the url of the company logo',\n    default:\n      'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png',\n  })\n  @IsString()\n  @IsNotEmpty()\n  company_logo: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the description of the flight',\n    default: 'A flight from Comoros to Tanzania',\n  })\n  @IsString()\n  @Length(1, 1000)\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the base price of the flight',\n    default: '1000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_base_price: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for business class',\n    default: '2000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_price_business_class: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for first class',\n    default: '3000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  seat_price_first_class: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the status of the flight',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(FlightStatuses)\n  status: FlightStatuses;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePassengerDto.html":{"url":"classes/CreatePassengerDto.html","title":"class - CreatePassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/create-passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/create-passenger.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsString, Length } from 'class-validator';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class CreatePassengerDto {\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  gender: Genders;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/create-seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flightId\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the class type of the seat', enum: ClassTypes, default: 'economy'})@IsString()@IsNotEmpty()@IsEnum(ClassTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the flight id'})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'the availability of the seat', default: true})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the seat number', default: '1A'})@IsString()@Length(1, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/create-seat.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Length,\n} from 'class-validator';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\nexport class CreateSeatDto {\n  @ApiProperty({\n    type: String,\n    description: 'the seat number',\n    default: '1A',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  seat_number: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'the availability of the seat',\n    default: true,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  is_available: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the class type of the seat',\n    enum: ClassTypes,\n    default: 'economy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ClassTypes)\n  class_type: ClassTypes;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the flight id',\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  flightId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first_name\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the first name of the user', default: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the last name of the user', default: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: String,\n    description: 'the first name of the user',\n    default: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the last name of the user',\n    default: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrentUserMiddleware.html":{"url":"injectables/CurrentUserMiddleware.html","title":"injectable - CurrentUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrentUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/middlewares/current-user.middleware.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/users/middlewares/current-user.middleware.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailVerificationDto.html":{"url":"classes/EmailVerificationDto.html","title":"class - EmailVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/email-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                isRegistration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsString()@IsNotEmpty()@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/email-verification.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRegistration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'the action type', default: true})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/email-verification.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class EmailVerificationDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @IsOptional()\n  email: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'the action type',\n    default: true,\n  })\n  @IsBoolean()\n  @IsOptional()\n  isRegistration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Flight.html":{"url":"entities/Flight.html","title":"entity - Flight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                bookings\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                created_at\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_code\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                id\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_code\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                seats\n                            \n                            \n                                status\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'time', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bookings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Booking[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, booking => booking.flight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'time', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1000, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 20, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 20, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'numeric', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Seat[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, seat => seat.flight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: FlightStatuses, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:163\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/flight.entity.ts:178\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Booking } from 'src/bookings/booking.entity';\nimport { Seat } from 'src/seats/seat.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum FlightStatuses {\n  SCHEDULED = 'scheduled',\n  DELAYED = 'delayed',\n  IN_AIR = 'in_air',\n  EXPECTED = 'expected',\n  DIVERTED = 'diverted',\n  RECOVERY = 'recovery',\n  LANDED = 'landed',\n  ARRIVED = 'arrived',\n  CANCELLED = 'cancelled',\n  NO_TAKEOFF_INFO = 'no_takeoff_info',\n  PAST_FLIGHT = 'past_flight',\n}\n@Entity()\nexport class Flight {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  airline: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  flight_number: string;\n\n  @Column({\n    type: 'varchar',\n    length: 20,\n    nullable: false,\n  })\n  origin_airport_code: string;\n\n  @Column({\n    type: 'varchar',\n    length: 20,\n    nullable: false,\n  })\n  destination_airport_code: string;\n\n  @Column({\n    type: 'int',\n    nullable: false,\n  })\n  capacity: number;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  origin: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  destination: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  origin_airport_name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  destination_airport_name: string;\n\n  @Column({\n    type: 'time',\n    nullable: false,\n  })\n  departure_time: string;\n\n  @Column({\n    type: 'time',\n    nullable: false,\n  })\n  arrival_time: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  departure_date: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  arrival_date: string;\n\n  @Column({\n    type: 'boolean',\n    nullable: false,\n    default: false,\n  })\n  refundable: boolean;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n  })\n  company_logo: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1000,\n    nullable: false,\n  })\n  description: string;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_base_price: number;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_price_business_class: number;\n\n  @Column({\n    type: 'numeric',\n    nullable: false,\n  })\n  seat_price_first_class: number;\n\n  @Column({\n    type: 'enum',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n    nullable: false,\n  })\n  status: FlightStatuses;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  // The first argument is only for solving circular dependency issue\n  @OneToMany(() => Seat, (seat) => seat.flight)\n  seats: Seat[];\n\n  @OneToMany(() => Booking, (booking) => booking.flight)\n  bookings: Booking[];\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Flight inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Flight updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Flight removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFlight\n                            \n                            \n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Async\n                                getFlight\n                            \n                            \n                                    Async\n                                getFlights\n                            \n                            \n                                    Async\n                                updateFlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(body: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The flight was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AdminGuard)@HttpCode(200)@ApiOkResponse({description: 'The flight was deleted successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiBadRequestResponse({description: 'Failed to delete the flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'The flight was found successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while finding the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlights(query: GetFlightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'The flights were found successfully'})@ApiBadRequestResponse({description: 'Failed to find the flights'})@ApiInternalServerErrorResponse({description: 'Something went wrong while finding the flights'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetFlightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateFlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlight(id: number, body: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The flight was updated successfully'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiBadRequestResponse({description: 'Failed to update the flight'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the flight'})\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AdminGuard } from '../guards/admin.guard';\nimport { CreateFlightDto } from './dtos/create-flight.dto';\nimport { GetFlightsDto } from './dtos/get-flights.dto';\nimport { UpdateFlightDto } from './dtos/update-flight.dto';\nimport { FlightsService } from './flights.service';\n\n@ApiTags('flights')\n@Controller({\n  path: 'api/flights',\n  version: '1',\n})\nexport class FlightsController {\n  constructor(private flightsService: FlightsService) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post()\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The flight was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create a new flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new flight',\n  })\n  async createFlight(@Body() body: CreateFlightDto) {\n    return this.flightsService\n      .create(body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create a new flight');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Patch('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The flight was updated successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the flight',\n  })\n  async updateFlight(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateFlightDto,\n  ) {\n    return this.flightsService\n      .update(body, id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to update the flight');\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get()\n  @ApiOkResponse({\n    description: 'The flights were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to find the flights',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while finding the flights',\n  })\n  async getFlights(@Query() query: GetFlightsDto) {\n    return this.flightsService\n      .findAll(query)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to find the flights');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while finding the flights',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'The flight was found successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while finding the flight',\n  })\n  async getFlight(@Param('id', ParseIntPipe) id: number) {\n    return this.flightsService\n      .findOne(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while finding the flight',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Delete('/:id')\n  @UseGuards(AdminGuard)\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The flight was deleted successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the flight',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the flight',\n  })\n  async deleteFlight(@Param('id', ParseIntPipe) id: number) {\n    return this.flightsService\n      .delete(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Flight not found');\n          case 400:\n            throw new BadRequestException('Failed to delete the flight');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the flight',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Flight } from './flight.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Flight])],\n  providers: [FlightsService],\n  controllers: [FlightsController],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(flight: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flight\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(options: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStats()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateFlightDto } from './dtos/create-flight.dto';\nimport { GetFlightsDto } from './dtos/get-flights.dto';\nimport { Flight, FlightStatuses } from './flight.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(@InjectRepository(Flight) private repo: Repository) {}\n\n  async create(flight: CreateFlightDto) {\n    try {\n      const newFlight = this.repo.create(flight);\n      const createdFlight = await this.repo.save(newFlight);\n\n      return createdFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new flight');\n    }\n  }\n\n  async update(attrs: Partial, id: number) {\n    const foundFlight = await this.findOne(id);\n\n    if (!foundFlight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    Object.assign(foundFlight, attrs);\n\n    try {\n      const updatedFlight = await this.repo.save(foundFlight);\n      return updatedFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the flight');\n    }\n  }\n\n  async findOne(id: number) {\n    const flight = await this.repo.findOne(id, {\n      relations: ['seats'],\n    });\n\n    if (!flight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    return flight;\n  }\n\n  async findAll(options: Partial) {\n    const page = parseInt(options.page) || 0;\n    const limit = parseInt(options.limit) || 10;\n    try {\n      const flights = await this.repo.find({\n        skip: page * limit,\n        take: limit,\n        order: { created_at: 'DESC' },\n      });\n      const totalCount = await (await this.repo.find()).length;\n\n      return {\n        flights,\n        total_count: totalCount,\n      };\n    } catch (err) {\n      throw new BadRequestException('Failed to get the flights');\n    }\n  }\n\n  async delete(id: number) {\n    const flight = await this.findOne(id);\n\n    if (!flight) {\n      throw new NotFoundException('flight not found');\n    }\n\n    try {\n      const removedFlight = await this.repo.remove(flight);\n      return removedFlight;\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the flight');\n    }\n  }\n\n  async getStats() {\n    let stats = {\n      total: 0,\n      total_scheduled: 0,\n      total_delayed: 0,\n      total_in_air: 0,\n      total_expected: 0,\n      total_diverted: 0,\n      total_recovery: 0,\n      total_landed: 0,\n      total_arrived: 0,\n      total_cancelled: 0,\n      total_no_takeoff_info: 0,\n      total_past_flight: 0,\n    };\n\n    let flights: Flight[];\n\n    try {\n      flights = await this.repo.find();\n      stats = {\n        ...stats,\n        total: flights.length,\n      };\n\n      flights.forEach((flight) => {\n        [FlightStatuses.SCHEDULED].includes(flight.status) &&\n          (stats.total_scheduled = stats.total_scheduled + 1);\n\n        [FlightStatuses.DELAYED].includes(flight.status) &&\n          (stats.total_delayed = stats.total_delayed + 1);\n\n        [FlightStatuses.IN_AIR].includes(flight.status) &&\n          (stats.total_in_air = stats.total_in_air + 1);\n\n        [FlightStatuses.EXPECTED].includes(flight.status) &&\n          (stats.total_expected = stats.total_expected + 1);\n\n        [FlightStatuses.DIVERTED].includes(flight.status) &&\n          (stats.total_diverted = stats.total_diverted + 1);\n\n        [FlightStatuses.RECOVERY].includes(flight.status) &&\n          (stats.total_recovery = stats.total_recovery + 1);\n\n        [FlightStatuses.LANDED].includes(flight.status) &&\n          (stats.total_landed = stats.total_landed + 1);\n\n        [FlightStatuses.ARRIVED].includes(flight.status) &&\n          (stats.total_arrived = stats.total_arrived + 1);\n\n        [FlightStatuses.CANCELLED].includes(flight.status) &&\n          (stats.total_cancelled = stats.total_cancelled + 1);\n\n        [FlightStatuses.NO_TAKEOFF_INFO].includes(flight.status) &&\n          (stats.total_no_takeoff_info = stats.total_no_takeoff_info + 1);\n\n        [FlightStatuses.PAST_FLIGHT].includes(flight.status) &&\n          (stats.total_past_flight = stats.total_past_flight + 1);\n      });\n\n      return stats;\n    } catch (err) {\n      throw new BadRequestException('Failed to get flights stats');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetBookingsDto.html":{"url":"classes/GetBookingsDto.html","title":"class - GetBookingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetBookingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/get-bookings.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 10, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/get-bookings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 0, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/get-bookings.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class GetBookingsDto {\n  @ApiProperty({\n    default: 0,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  page: string;\n\n  @ApiProperty({\n    default: 10,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  limit: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetFlightsDto.html":{"url":"classes/GetFlightsDto.html","title":"class - GetFlightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetFlightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/get-flights.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 10, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/get-flights.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: 0, required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/get-flights.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class GetFlightsDto {\n  @ApiProperty({\n    default: 0,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  page: string;\n\n  @ApiProperty({\n    default: 10,\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  limit: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Passenger.html":{"url":"entities/Passenger.html","title":"entity - Passenger","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Passenger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passenger.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bookings\n                            \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bookings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Booking[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, booking => booking.passenger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: DocumentTypes, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Genders, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/passenger.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Booking } from 'src/bookings/booking.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\n\nexport enum DocumentTypes {\n  PASSPORT = 'passport',\n  ID_CARD = 'id_card',\n}\n\nexport enum Genders {\n  MALE = 'male',\n  FEMALE = 'female',\n}\n\n@Entity()\n@Unique(['user'])\nexport class Passenger {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: DocumentTypes,\n    nullable: false,\n    default: DocumentTypes.PASSPORT,\n  })\n  document_type: DocumentTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  document_number: string;\n\n  @Column({\n    type: 'date',\n    nullable: false,\n  })\n  date_of_birth: string;\n\n  @Column({\n    type: 'enum',\n    enum: Genders,\n    nullable: false,\n  })\n  gender: Genders;\n\n  @OneToOne(() => User, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  user: User;\n\n  @OneToMany(() => Booking, (booking) => booking.passenger)\n  bookings: Booking[];\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Passenger inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Passenger updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Passenger removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PassengerDto.html":{"url":"classes/PassengerDto.html","title":"class - PassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/passenger.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class PassengerDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  document_type: DocumentTypes;\n\n  @Expose()\n  document_number: string;\n\n  @Expose()\n  date_of_birth: string;\n\n  @Expose()\n  gender: Genders;\n\n  @Transform(({ obj }) => obj.user.id)\n  @Expose()\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PassengersController.html":{"url":"controllers/PassengersController.html","title":"controller - PassengersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PassengersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passengers.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPassenger\n                            \n                            \n                                    Async\n                                deletePassenger\n                            \n                            \n                                    Async\n                                getPassenger\n                            \n                            \n                                    Async\n                                getPassengerById\n                            \n                            \n                                    Async\n                                getPassengers\n                            \n                            \n                                    Async\n                                updatePassenger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPassenger(body: CreatePassengerDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Serialize(PassengerDto)@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The passenger was created successfully'})@ApiBadRequestResponse({description: 'Failed to create a new passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePassenger(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Serialize(PassengerDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was deleted successfully'})@ApiBadRequestResponse({description: 'Failed to delete the passenger'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to delete this passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPassenger(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was returned successfully'})@ApiBadRequestResponse({description: 'Failed to get the passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPassengerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPassengerById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/unique/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The passenger was returned successfully'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPassengers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPassengers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AdminGuard)@ApiOkResponse({description: 'The passengers were returned successfully'})@ApiBadRequestResponse({description: 'Failed to get the passengers'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting passengers'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassenger\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassenger(id: number, body: UpdatePassengerDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@Serialize(PassengerDto)@UseGuards(AuthGuard)@ApiOkResponse({description: 'The passenger was updated successfully'})@ApiBadRequestResponse({description: 'Failed to update the passenger'})@ApiNotFoundResponse({description: 'Passenger not found'})@ApiUnauthorizedResponse({description: 'You are not allowed to update this passenger'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the passenger'})\n                \n            \n\n            \n                \n                    Defined in src/passengers/passengers.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CurrentUser } from 'src/users/decorators/current-user.decorator';\nimport { User } from 'src/users/user.entity';\nimport { CreatePassengerDto } from './dtos/create-passenger.dto';\nimport { PassengerDto } from './dtos/passenger.dto';\nimport { UpdatePassengerDto } from './dtos/update-passenger.dto';\nimport { PassengersService } from './passengers.service';\n\n@ApiTags('passengers')\n@Controller({\n  path: 'api/passengers',\n  version: '1',\n})\nexport class PassengersController {\n  constructor(private passengersService: PassengersService) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post()\n  @Serialize(PassengerDto)\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The passenger was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create a new passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new passenger',\n  })\n  async createPassenger(\n    @Body() body: CreatePassengerDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .create(body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create a new passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get()\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The passengers were returned successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the passengers',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting passengers',\n  })\n  async getPassengers() {\n    return this.passengersService\n      .findAll()\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the passengers');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting passengers',\n            );\n        }\n      });\n  }\n\n  @Get('/unique/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The passenger was returned successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the passenger',\n  })\n  async getPassengerById(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .findOne(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        console.log(err.response?.statusCode);\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('/me')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was returned successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the passenger',\n  })\n  async getPassenger(@CurrentUser() user: User) {\n    return this.passengersService\n      .findByUser(user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Patch(':id')\n  @Serialize(PassengerDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to update this passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the passenger',\n  })\n  async updatePassenger(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdatePassengerDto,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .update(id, body, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to update this passenger',\n            );\n          case 400:\n            throw new BadRequestException('Failed to update the passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the passenger',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Delete(':id')\n  @Serialize(PassengerDto)\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The passenger was deleted successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the passenger',\n  })\n  @ApiNotFoundResponse({\n    description: 'Passenger not found',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'You are not allowed to delete this passenger',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the passenger',\n  })\n  async deletePassenger(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    return this.passengersService\n      .delete(id, user)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Passenger not found');\n          case 401:\n            throw new UnauthorizedException(\n              'You are not allowed to delete this passenger',\n            );\n          case 400:\n            throw new BadRequestException('Failed to delete the passenger');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the passenger',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PassengersModule.html":{"url":"modules/PassengersModule.html","title":"module - PassengersModule","body":"\n                   \n\n\n\n\n    Modules\n    PassengersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PassengersModule\n\n\n\ncluster_PassengersModule_providers\n\n\n\ncluster_PassengersModule_exports\n\n\n\n\nPassengersService \n\nPassengersService \n\n\n\nPassengersModule\n\nPassengersModule\n\nPassengersService  -->\n\nPassengersModule->PassengersService \n\n\n\n\n\nPassengersService\n\nPassengersService\n\nPassengersModule -->\n\nPassengersService->PassengersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/passengers/passengers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PassengersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PassengersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PassengersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassengersService } from './passengers.service';\nimport { PassengersController } from './passengers.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Passenger } from './passenger.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Passenger])],\n  providers: [PassengersService],\n  controllers: [PassengersController],\n  exports: [PassengersService],\n})\nexport class PassengersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PassengersService.html":{"url":"injectables/PassengersService.html","title":"injectable - PassengersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PassengersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/passengers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/passengers/passengers.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(passenger: CreatePassengerDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    passenger\n                                    \n                                                CreatePassengerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/passengers/passengers.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User, UserRole } from '../users/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePassengerDto } from './dtos/create-passenger.dto';\nimport { Passenger } from './passenger.entity';\n\n@Injectable()\nexport class PassengersService {\n  constructor(\n    @InjectRepository(Passenger) private repo: Repository,\n  ) {}\n\n  async create(passenger: CreatePassengerDto, user: User) {\n    try {\n      const newPassenger = this.repo.create(passenger);\n      newPassenger.user = user;\n      const createdPassenger = await this.repo.save(newPassenger);\n      return createdPassenger;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new passenger');\n    }\n  }\n\n  async findAll() {\n    try {\n      const passengers = await this.repo.find({\n        relations: ['user', 'bookings'],\n      });\n\n      return passengers;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the passengers');\n    }\n  }\n\n  async findByUser(user: User) {\n    try {\n      const passengers = await this.repo.find({\n        where: { user: user },\n        relations: ['user', 'bookings'],\n      });\n\n      return passengers;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the passenger');\n    }\n  }\n\n  async findOne(id: number) {\n    const passenger = await this.repo.findOne(id, {\n      relations: ['user', 'bookings'],\n    });\n\n    if (!passenger) {\n      throw new NotFoundException('Passenger not found');\n    }\n\n    return passenger;\n  }\n\n  async update(id: number, attrs: Partial, user: User) {\n    // Check if the passenger exists\n    const foundPassenger = await this.findOne(id);\n\n    // Check if the user is linked to the passenger or is an admin\n    if (foundPassenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to update this passenger',\n      );\n    }\n\n    // Update the passenger\n    Object.assign(foundPassenger, attrs);\n\n    try {\n      const updatedPassenger = await this.repo.save(foundPassenger);\n\n      return updatedPassenger;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the passenger');\n    }\n  }\n\n  async delete(id: number, user: User) {\n    // Check if the passenger exists\n\n    const foundPassenger = await this.findOne(id);\n\n    // Check if the user is linked to the passenger or is an admin\n    if (foundPassenger.user.id !== user.id && user.role !== UserRole.ADMIN) {\n      throw new UnauthorizedException(\n        'You are not allowed to delete this passenger',\n      );\n    }\n\n    try {\n      const removedPassenger = await this.repo.remove(foundPassenger);\n      console.log(removedPassenger);\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the passenger');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordResetDto.html":{"url":"classes/PasswordResetDto.html","title":"class - PasswordResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/password-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the new password of the user', default: '987654321'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/password-reset.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class PasswordResetDto {\n  @ApiProperty({\n    type: String,\n    description: 'the new password of the user',\n    default: '987654321',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveImageDto.html":{"url":"classes/RemoveImageDto.html","title":"class - RemoveImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary/dtos/remove-image.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                public_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        public_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The public id of the image to remove', default: ''})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cloudinary/dtos/remove-image.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RemoveImageDto {\n  @ApiProperty({\n    type: String,\n    description: 'The public id of the image to remove',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  public_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/current-user.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            currentUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { User } from '../user.entity';\nimport { UsersService } from '../users.service';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware {\n  constructor(private usersService: UsersService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const { userId } = req.session || {};\n    if (userId) {\n      const user = await this.usersService.findOne(userId);\n\n      req.currentUser = user;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Seat.html":{"url":"entities/Seat.html","title":"entity - Seat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seat.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flight\n                            \n                            \n                                id\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ClassTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Flight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, flight => flight.seats, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/seat.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Flight } from 'src/flights/flight.entity';\nimport {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\n@Entity()\n@Unique(['seat_number', 'flight'])\nexport class Seat {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n    length: 20,\n  })\n  seat_number: string;\n\n  @Column({\n    type: 'boolean',\n    default: true,\n    nullable: false,\n  })\n  is_available: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: ClassTypes,\n    default: ClassTypes.ECONOMY,\n    nullable: false,\n  })\n  class_type: ClassTypes;\n\n  @ManyToOne(() => Flight, (flight) => flight.seats, { onDelete: 'CASCADE' })\n  flight: Flight;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('Seat inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('Seat updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('Seat removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeatDto.html":{"url":"classes/SeatDto.html","title":"class - SeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                flightId\n                            \n                            \n                                id\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => undefined.id)@Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/seat.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose, Transform } from 'class-transformer';\nimport { ClassTypes } from '../seat.entity';\n\nexport class SeatDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  seat_number: string;\n\n  @Expose()\n  is_available: boolean;\n\n  @Expose()\n  class_type: ClassTypes;\n\n  @Transform(({ obj }) => obj.flight.id)\n  @Expose()\n  flightId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSeat\n                            \n                            \n                                    Async\n                                deleteSeat\n                            \n                            \n                                    Async\n                                getSeat\n                            \n                            \n                                    Async\n                                getSeats\n                            \n                            \n                                    Async\n                                updateSeat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSeat(body: CreateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AdminGuard)@ApiCreatedResponse({description: 'The seat was created successfully'})@ApiBadRequestResponse({description: 'Failed to create the seat'})@ApiNotFoundResponse({description: 'Flight not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating a new seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSeat(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The seat was deleted successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiBadRequestResponse({description: 'Failed to delete the seat'})@ApiInternalServerErrorResponse({description: 'Something went wrong while deleting the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeat(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'The seat was found successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSeats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'The seats were found successfully'})@ApiBadRequestResponse({description: 'Failed to get the seats'})@ApiInternalServerErrorResponse({description: 'Something went wrong while getting the seats'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateSeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeat(id: number, body: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UseGuards(AdminGuard)@ApiOkResponse({description: 'The seat was updated successfully'})@ApiNotFoundResponse({description: 'Seat not found'})@ApiBadRequestResponse({description: 'Failed to update the seat'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the seat'})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  InternalServerErrorException,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { CreateSeatDto } from './dtos/create-seat.dto';\nimport { SeatDto } from './dtos/seat.dto';\nimport { UpdateSeatDto } from './dtos/update-seat.dto';\nimport { SeatsService } from './seats.service';\n\n@ApiTags('seats')\n@Serialize(SeatDto)\n@Controller({\n  path: 'api/seats',\n  version: '1',\n})\nexport class SeatsController {\n  constructor(private seatsService: SeatsService) {}\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Creates a new seat and returns the created seat only for admin user\n  @Post()\n  @UseGuards(AdminGuard)\n  @ApiCreatedResponse({\n    description: 'The seat was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to create the seat',\n  })\n  @ApiNotFoundResponse({\n    description: 'Flight not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating a new seat',\n  })\n  async createSeat(@Body() body: CreateSeatDto) {\n    return this.seatsService\n      .create(body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to create the seat');\n          case 404:\n            throw new NotFoundException('Flight not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating a new seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns all seats\n  @Get()\n  @ApiOkResponse({\n    description: 'The seats were found successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to get the seats',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the seats',\n  })\n  async getSeats() {\n    return this.seatsService\n      .findAll()\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to get the seats');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the seats',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Returns a single seat\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'The seat was found successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while getting the seat',\n  })\n  async getSeat(@Param('id', ParseIntPipe) id: number) {\n    return this.seatsService\n      .findOne(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while getting the seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Updates a single seat and returns the updated seat only for admin user\n  @Patch('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The seat was updated successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the seat',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the seat',\n  })\n  async updateSeat(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() body: UpdateSeatDto,\n  ) {\n    return this.seatsService\n      .update(id, body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          case 400:\n            throw new BadRequestException('Failed to update the seat');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the seat',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-10\n  // Deletes a single seat and returns the deleted seat only for admin user\n  @Delete('/:id')\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The seat was deleted successfully',\n  })\n  @ApiNotFoundResponse({\n    description: 'Seat not found',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to delete the seat',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while deleting the seat',\n  })\n  async deleteSeat(@Param('id', ParseIntPipe) id: number) {\n    return this.seatsService\n      .delete(id)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('Seat not found');\n          case 400:\n            throw new BadRequestException('Failed to delete the seat');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while deleting the seat',\n            );\n        }\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_imports\n\n\n\ncluster_SeatsModule_providers\n\n\n\n\nFlightsModule\n\nFlightsModule\n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsModule -->\n\nFlightsModule->SeatsModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FlightsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Seat } from './seat.entity';\nimport { FlightsModule } from 'src/flights/flights.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Seat]), FlightsModule],\n  providers: [SeatsService],\n  controllers: [SeatsController],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                handleBookingEvents\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository, flightsService: FlightsService)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightsService\n                                                  \n                                                        \n                                                                        FlightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(seat: CreateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seat\n                                    \n                                                CreateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleBookingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleBookingEvents(payload: BookingEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('booking.*', {async: true})\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                BookingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BookingEvent } from 'src/bookings/interfaces/BookingCreatedEvent';\nimport { FlightsService } from 'src/flights/flights.service';\nimport { Repository } from 'typeorm';\nimport { CreateSeatDto } from './dtos/create-seat.dto';\nimport { Seat } from './seat.entity';\n\n@Injectable()\nexport class SeatsService {\n  constructor(\n    @InjectRepository(Seat) private repo: Repository,\n    private flightsService: FlightsService,\n  ) {}\n\n  async create(seat: CreateSeatDto) {\n    // Check if the flight exists\n    const flight = await this.flightsService.findOne(seat.flightId);\n\n    if (!flight) {\n      throw new NotFoundException('Flight not found');\n    }\n\n    try {\n      const newSeat = this.repo.create(seat);\n      newSeat.flight = flight;\n      const createdSeat = await this.repo.save(newSeat);\n\n      return createdSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to create the seat');\n    }\n  }\n\n  async findOne(id: number) {\n    const seat = await this.repo.findOne(id, {\n      relations: ['flight'],\n    });\n\n    if (!seat) {\n      throw new NotFoundException('Seat not found');\n    }\n\n    return seat;\n  }\n\n  async findAll() {\n    try {\n      const seats = await this.repo.find({\n        relations: ['flight'],\n      });\n      return seats;\n    } catch (err) {\n      throw new BadRequestException('Failed to get the seats');\n    }\n  }\n\n  async update(id: number, attrs: Partial) {\n    const foundSeat = await this.findOne(id);\n\n    if (!foundSeat) {\n      throw new NotFoundException('Seat not found');\n    }\n    Object.assign(foundSeat, attrs);\n\n    try {\n      const updatedSeat = await this.repo.save(foundSeat);\n\n      return updatedSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to update the seat');\n    }\n  }\n\n  async delete(id: number) {\n    const seat = await this.findOne(id);\n\n    if (!seat) {\n      throw new NotFoundException('Seat not found');\n    }\n\n    try {\n      const removedSeat = await this.repo.remove(seat);\n\n      return removedSeat;\n    } catch (err) {\n      throw new BadRequestException('Failed to delete the seat');\n    }\n  }\n\n  // handle events related to bookings\n  @OnEvent('booking.*', { async: true })\n  async handleBookingEvents(payload: BookingEvent) {\n    console.log('[handleBookingEvent]', payload);\n\n    return this.update(payload.id, { is_available: payload.is_available });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeInterceptor.html":{"url":"classes/SerializeInterceptor.html","title":"class - SerializeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dto: ClassConstructor)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/serialize.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dto\n                                                  \n                                                        \n                                                                        ClassConstructor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/serialize.interceptor.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]): {};\n}\n\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n  constructor(private dto: ClassConstructor) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    // Run something before a request is handled by the request handler\n    // console.log(\"I'm running before the handler: \", context);\n    return next.handle().pipe(\n      map((data: any) => {\n        // Run something before the response is sent out\n        // console.log(\"I'm running before response is sent out: \", data);\n        return plainToClass(this.dto, data, {\n          excludeExtraneousValues: true,\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SettingsController.html":{"url":"controllers/SettingsController.html","title":"controller - SettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/settings/settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getSettings\n                            \n                            \n                                updateSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getSettings\n                        \n                    \n                \n            \n            \n                \ngetSettings()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AdminGuard)@ApiBadRequestResponse({description: 'Failed to get settings'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the settings'})\n                \n            \n\n            \n                \n                    Defined in src/settings/settings.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSettings\n                        \n                    \n                \n            \n            \n                \nupdateSettings(body: UpdateSettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(AdminGuard)@ApiOkResponse({description: 'The settings were updated successfully'})@ApiBadRequestResponse({description: 'Failed to update the settings'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the settings'})\n                \n            \n\n            \n                \n                    Defined in src/settings/settings.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UpdateSettingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  InternalServerErrorException,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AdminGuard } from 'src/guards/admin.guard';\nimport { UpdateSettingsDto } from './dtos/update-settings.dto';\nimport { SettingsService } from './settings.service';\n\n@ApiTags('settings')\n@Controller({\n  path: 'api/settings',\n  version: '1',\n})\nexport class SettingsController {\n  constructor(private settingsService: SettingsService) {}\n\n  @Get()\n  @UseGuards(AdminGuard)\n  @ApiBadRequestResponse({\n    description: 'Failed to get settings',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the settings',\n  })\n  getSettings() {\n    try {\n      return this.settingsService.getSettings();\n    } catch (err) {\n      switch (err.response?.statusCode) {\n        case 400:\n          throw new BadRequestException('Failed to get settings');\n        default:\n          throw new InternalServerErrorException(\n            'Something went wrong while updating settings',\n          );\n      }\n    }\n  }\n\n  @Patch()\n  @UseGuards(AdminGuard)\n  @ApiOkResponse({\n    description: 'The settings were updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update the settings',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the settings',\n  })\n  updateSettings(@Body() body: UpdateSettingsDto) {\n    try {\n      return this.settingsService.updateSettings(body);\n    } catch (err) {\n      switch (err.response?.statusCode) {\n        case 400:\n          throw new BadRequestException('Failed to update settings');\n        default:\n          throw new InternalServerErrorException(\n            'Something went wrong while updating settings',\n          );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SettingsModule.html":{"url":"modules/SettingsModule.html","title":"module - SettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    SettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SettingsModule\n\n\n\ncluster_SettingsModule_providers\n\n\n\n\nSettingsService\n\nSettingsService\n\n\n\nSettingsModule\n\nSettingsModule\n\nSettingsModule -->\n\nSettingsService->SettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/settings/settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SettingsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SettingsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SettingsService } from './settings.service';\nimport { SettingsController } from './settings.controller';\n\n@Module({\n  providers: [SettingsService],\n  controllers: [SettingsController]\n})\nexport class SettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SettingsService.html":{"url":"injectables/SettingsService.html","title":"injectable - SettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/settings/settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                db\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getSettings\n                            \n                            \n                                updateSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/settings/settings.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getSettings\n                        \n                    \n                \n            \n            \n                \ngetSettings()\n                \n            \n\n\n            \n                \n                    Defined in src/settings/settings.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSettings\n                        \n                    \n                \n            \n            \n                \nupdateSettings(settings: UpdateSettingsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/settings/settings.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                UpdateSettingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonDB\n\n                    \n                \n                    \n                        \n                                Defined in src/settings/settings.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JsonDB } from 'node-json-db';\nimport { Config } from 'node-json-db/dist/lib/JsonDBConfig';\nimport { UpdateSettingsDto } from './dtos/update-settings.dto';\n\n@Injectable()\nexport class SettingsService {\n  db: JsonDB;\n  constructor() {\n    this.db = new JsonDB(new Config('settings.db.json', true, true, '/'));\n  }\n\n  getSettings() {\n    try {\n      return this.db.getData('/');\n    } catch (err) {\n      throw new BadRequestException('Failed to get settings');\n    }\n  }\n\n  updateSettings(settings: UpdateSettingsDto) {\n    try {\n      let allSettings = this.db.getData('/');\n\n      Object.assign(allSettings, {\n        settings: { ...allSettings.settings, ...settings },\n      });\n\n      this.db.push('/', allSettings);\n\n      return allSettings;\n    } catch (err) {\n      throw new BadRequestException('Failed to update settings');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookingDto.html":{"url":"classes/UpdateBookingDto.html","title":"class - UpdateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/update-booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                booking_type\n                            \n                            \n                                flightId\n                            \n                            \n                                seatId\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        booking_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'flight | hotel | restaurant', enum: BookingTypes})@IsString()@IsNotEmpty()@IsEnum(BookingTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flightId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the flight'})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the id of the seat'})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'completed | pending | cancelled', enum: BookingStatuses})@IsString()@IsNotEmpty()@IsEnum(BookingStatuses)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { BookingStatuses, BookingTypes } from '../booking.entity';\n\nexport class UpdateBookingDto {\n  // Everything needed to create a booking\n  @ApiProperty({\n    type: String,\n    description: 'flight | hotel | restaurant',\n    enum: BookingTypes,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingTypes)\n  @IsOptional()\n  booking_type: BookingTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'completed | pending | cancelled',\n    enum: BookingStatuses,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingStatuses)\n  @IsOptional()\n  status: BookingStatuses;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the flight',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  flightId: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the id of the seat',\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  seatId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookingStatusDto.html":{"url":"classes/UpdateBookingStatusDto.html","title":"class - UpdateBookingStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookingStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bookings/dtos/update-booking-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'completed | pending | cancelled', enum: BookingStatuses})@IsString()@IsNotEmpty()@IsEnum(BookingStatuses)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bookings/dtos/update-booking-status.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BookingStatuses } from '../booking.entity';\n\nexport class UpdateBookingStatusDto {\n  @ApiProperty({\n    type: String,\n    description: 'completed | pending | cancelled',\n    enum: BookingStatuses,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(BookingStatuses)\n  status: BookingStatuses;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dtos/update-flight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                arrival_date\n                            \n                            \n                                arrival_time\n                            \n                            \n                                capacity\n                            \n                            \n                                company_logo\n                            \n                            \n                                departure_date\n                            \n                            \n                                departure_time\n                            \n                            \n                                description\n                            \n                            \n                                destination\n                            \n                            \n                                destination_airport_code\n                            \n                            \n                                destination_airport_name\n                            \n                            \n                                flight_number\n                            \n                            \n                                origin\n                            \n                            \n                                origin_airport_code\n                            \n                            \n                                origin_airport_name\n                            \n                            \n                                refundable\n                            \n                            \n                                seat_base_price\n                            \n                            \n                                seat_price_business_class\n                            \n                            \n                                seat_price_first_class\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        airline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airline', default: 'AB Aviation'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of arrival', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrival_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of arrival', default: '10:00 PM'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capacity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the maximum number of seats available', default: 20})@IsNumber()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        company_logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the url of the company logo', default: 'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of departure', default: '2020-01-01T00:00:00.000Z'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the time of departure', default: '06:00 AM'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the description of the flight', default: 'A flight from Comoros to Tanzania'})@IsString()@Length(1, 1000)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:183\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of destination of the flight', default: 'Tanzania'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the destination airport code', default: 'AB123'})@IsString()@Length(1, 20)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destination_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of destination', default: 'Julius Nyerere International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flight_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the flight identification number', default: 'AB123'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the country of origin of the flight', default: 'Comoros'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the origin airport code', default: 'AB123'})@IsString()@Length(1, 20)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin_airport_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the name of the airport of origin', default: 'Prince Said Ibrahim International Airport'})@IsString()@Length(1, 200)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refundable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'whether the flight is refundable', default: false})@IsBoolean()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_base_price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the base price of the flight', default: '1000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:193\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_business_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for business class', default: '2000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_price_first_class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'the price of the flight for first class', default: '3000.00'})@IsDecimal()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:213\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlightStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the status of the flight', enum: FlightStatuses, default: undefined})@IsString()@IsNotEmpty()@IsEnum(FlightStatuses)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/flights/dtos/update-flight.dto.ts:225\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDecimal,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { FlightStatuses } from '../flight.entity';\n\nexport class UpdateFlightDto {\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airline',\n    default: 'AB Aviation',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  airline: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the flight identification number',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  flight_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the origin airport code',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  @IsOptional()\n  origin_airport_code: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the destination airport code',\n    default: 'AB123',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  @IsOptional()\n  destination_airport_code: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the maximum number of seats available',\n    default: 20,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  @IsOptional()\n  capacity: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of origin of the flight',\n    default: 'Comoros',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  origin: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the country of destination of the flight',\n    default: 'Tanzania',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  destination: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of origin',\n    default: 'Prince Said Ibrahim International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  origin_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the name of the airport of destination',\n    default: 'Julius Nyerere International Airport',\n  })\n  @IsString()\n  @Length(1, 200)\n  @IsNotEmpty()\n  @IsOptional()\n  destination_airport_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of departure',\n    default: '06:00 AM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  departure_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the time of arrival',\n    default: '10:00 PM',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  arrival_time: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of departure',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  departure_date: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of arrival',\n    default: '2020-01-01T00:00:00.000Z',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  arrival_date: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'whether the flight is refundable',\n    default: false,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  @IsOptional()\n  refundable: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the url of the company logo',\n    default:\n      'https://www.abaviation.com/wp-content/uploads/2019/12/AB-Aviation-Logo.png',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  company_logo: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the description of the flight',\n    default: 'A flight from Comoros to Tanzania',\n  })\n  @IsString()\n  @Length(1, 1000)\n  @IsNotEmpty()\n  @IsOptional()\n  description: string;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the base price of the flight',\n    default: '1000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_base_price: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for business class',\n    default: '2000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_price_business_class: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'the price of the flight for first class',\n    default: '3000.00',\n  })\n  @IsDecimal()\n  @IsNotEmpty()\n  @IsOptional()\n  seat_price_first_class: number;\n\n  @ApiProperty({\n    type: String,\n    description: 'the status of the flight',\n    enum: FlightStatuses,\n    default: FlightStatuses.SCHEDULED,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(FlightStatuses)\n  @IsOptional()\n  status: FlightStatuses;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePassengerDto.html":{"url":"classes/UpdatePassengerDto.html","title":"class - UpdatePassengerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePassengerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/passengers/dtos/update-passenger.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date_of_birth\n                            \n                            \n                                document_number\n                            \n                            \n                                document_type\n                            \n                            \n                                gender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date_of_birth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the date of birth of the passenger', default: '1990-01-01'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the number of the document', default: '123456789'})@IsString()@IsNotEmpty()@Length(1, 200)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the type of documented used to identify the passenger', enum: DocumentTypes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(DocumentTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genders\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the gender of the passenger', enum: Genders})@IsString()@IsNotEmpty()@IsEnum(Genders)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/passengers/dtos/update-passenger.dto.ts:54\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { DocumentTypes, Genders } from '../passenger.entity';\n\nexport class UpdatePassengerDto {\n  @ApiProperty({\n    type: String,\n    description: 'the type of documented used to identify the passenger',\n    enum: DocumentTypes,\n    default: DocumentTypes.PASSPORT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(DocumentTypes)\n  @IsOptional()\n  document_type: DocumentTypes;\n\n  @ApiProperty({\n    type: String,\n    description: 'the number of the document',\n    default: '123456789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(1, 200)\n  @IsOptional()\n  document_number: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the date of birth of the passenger',\n    default: '1990-01-01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  date_of_birth: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the gender of the passenger',\n    enum: Genders,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Genders)\n  @IsOptional()\n  gender: Genders;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dtos/update-seat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class_type\n                            \n                            \n                                is_available\n                            \n                            \n                                seat_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        class_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the class type of the seat', enum: ClassTypes, default: 'economy'})@IsString()@IsNotEmpty()@IsEnum(ClassTypes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_available\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'the availability of the seat', default: true})@IsBoolean()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the seat number', default: '1A'})@IsString()@Length(1, 20)@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/seats/dtos/update-seat.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\n\nexport enum ClassTypes {\n  FIRST = 'first',\n  BUSINESS = 'business',\n  ECONOMY = 'economy',\n}\n\nexport class UpdateSeatDto {\n  @ApiProperty({\n    type: String,\n    description: 'the seat number',\n    default: '1A',\n  })\n  @IsString()\n  @Length(1, 20)\n  @IsNotEmpty()\n  @IsOptional()\n  seat_number: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'the availability of the seat',\n    default: true,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  @IsOptional()\n  is_available: boolean;\n\n  @ApiProperty({\n    type: String,\n    description: 'the class type of the seat',\n    enum: ClassTypes,\n    default: 'economy',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(ClassTypes)\n  @IsOptional()\n  class_type: ClassTypes;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSettingsDto.html":{"url":"classes/UpdateSettingsDto.html","title":"class - UpdateSettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/settings/dtos/update-settings.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                default_currency\n                            \n                            \n                                default_language\n                            \n                            \n                                default_theme\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        default_currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the default currency', default: 'KMF'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/settings/dtos/update-settings.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        default_language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SupportedLanguages\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the default supported language', enum: SupportedLanguages, default: undefined})@IsString()@IsNotEmpty()@IsEnum(SupportedLanguages)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/settings/dtos/update-settings.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        default_theme\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Themes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the default theme', enum: Themes, default: undefined})@IsString()@IsNotEmpty()@IsEnum(Themes)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/settings/dtos/update-settings.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport enum Themes {\n  LIGHT = 'light',\n  DARK = 'dark',\n}\n\nexport enum SupportedLanguages {\n  ENGLISH = 'en',\n  FRENCH = 'fr',\n}\n\nexport class UpdateSettingsDto {\n  @ApiProperty({\n    type: String,\n    description: 'the default supported language',\n    enum: SupportedLanguages,\n    default: SupportedLanguages.FRENCH,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(SupportedLanguages)\n  @IsOptional()\n  default_language: SupportedLanguages;\n\n  @ApiProperty({\n    type: String,\n    description: 'the default currency',\n    default: 'KMF',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  default_currency: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the default theme',\n    enum: Themes,\n    default: Themes.LIGHT,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(Themes)\n  @IsOptional()\n  default_theme: Themes;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                last_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsString()@IsNotEmpty()@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the first name of the user', default: 'John'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the last name of the user', default: 'Doe'})@IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/update-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    type: String,\n    description: 'the first name of the user',\n    default: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  first_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the last name of the user',\n    default: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  last_name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @IsOptional()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadImageDto.html":{"url":"classes/UploadImageDto.html","title":"class - UploadImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary/dtos/upload-image.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The image to upload', default: ''})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cloudinary/dtos/upload-image.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UploadImageDto {\n  @ApiProperty({\n    type: String,\n    description: 'The image to upload',\n    default: '',\n  })\n  @IsString()\n  @IsNotEmpty()\n  image: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                is_email_verified\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', unique: true, length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), onUpdate: 'CURRENT_TIMESTAMP(6)', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  AfterInsert,\n  AfterRemove,\n  AfterUpdate,\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  Unique,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum UserRole {\n  ADMIN = 'sysadmin',\n  CUSTOMER = 'customer',\n}\n@Entity()\n@Unique(['email'])\nexport class User {\n  // user's autogenerated id\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // user's first name\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  first_name: string;\n\n  // user's last name\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  last_name: string;\n\n  @Column({\n    type: 'varchar',\n    unique: true,\n    length: 200,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({ type: 'varchar', length: 200, nullable: false })\n  password: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.CUSTOMER,\n    nullable: false,\n  })\n  role: UserRole;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    onUpdate: 'CURRENT_TIMESTAMP(6)',\n    nullable: false,\n  })\n  updated_at: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n    nullable: false,\n  })\n  is_email_verified: boolean;\n\n  @AfterInsert()\n  logInsert() {\n    console.log('User inserted:', this);\n  }\n\n  @AfterUpdate()\n  logUpdate() {\n    console.log('User updated:', this);\n  }\n\n  @AfterRemove()\n  logRemove() {\n    console.log('User removed:', this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCredentialsDto.html":{"url":"classes/UserCredentialsDto.html","title":"class - UserCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the email of the user', default: 'johndoe@email.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the password of the user', default: '123456'})@IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-credentials.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserCredentialsDto {\n  @ApiProperty({\n    type: String,\n    description: 'the email of the user',\n    default: 'johndoe@email.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'the password of the user',\n    default: '123456',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                is_email_verified\n                            \n                            \n                                last_name\n                            \n                            \n                                role\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose } from 'class-transformer';\nimport { UserRole } from '../user.entity';\n\nexport class UserDto {\n  @Expose()\n  id: number;\n\n  @Expose()\n  first_name: string;\n\n  @Expose()\n  last_name: string;\n\n  @Expose()\n  email: string;\n\n  @Expose()\n  role: UserRole;\n\n  @Expose()\n  created_at: Date;\n\n  @Expose()\n  updated_at: Date;\n\n  @Expose()\n  is_email_verified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendEmailVerification\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                signOut\n                            \n                            \n                                updateUser\n                            \n                            \n                                verifyEmail\n                            \n                            \n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        passwordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(body: PasswordResetDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/password-reset')@HttpCode(200)@ApiOkResponse({description: 'The password reset was successful'})@ApiBadRequestResponse({description: 'Invalid token // Failed to update password of the user'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PasswordResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: CreateUserDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiCreatedResponse({description: 'The user was created successfully'})@ApiBadRequestResponse({description: 'Invalid token | Email in use | Failed to create a user'})@ApiInternalServerErrorResponse({description: 'Something went wrong while creating the user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailVerification(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-email-verification')@HttpCode(200)@ApiOkResponse({description: 'The email verification email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send email verification email'})@ApiInternalServerErrorResponse({description: 'Something went wrong while sending email verification email'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(body: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-password-reset-email')@HttpCode(200)@ApiOkResponse({description: 'The password reset email was sent successfully'})@ApiBadRequestResponse({description: 'Failed to send password reset email'})@ApiInternalServerErrorResponse({description: 'Something went wrong while sending password reset email'})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                EmailVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(body: UserCredentialsDto, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged in'})@ApiNotFoundResponse({description: 'User not found'})@ApiUnauthorizedResponse({description: 'Incorrect credentials'})@ApiInternalServerErrorResponse({description: 'Something went wrong while logging in the user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signout')@HttpCode(200)@ApiOkResponse({description: 'The user was successfully logged out'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:300\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUser\n                        \n                    \n                \n            \n            \n                \nupdateUser(user: User, body: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The user was updated successfully'})@ApiBadRequestResponse({description: 'Failed to update user'})@ApiNotFoundResponse({description: 'User not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while updating the user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \nverifyEmail(user: User, body: VerifyEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/email/verify')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The email was verified successfully'})@ApiBadRequestResponse({description: 'Failed to verify email | Invalid token'})@ApiNotFoundResponse({description: 'User not found'})@ApiInternalServerErrorResponse({description: 'Something went wrong while verifying the email'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                VerifyEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoAmI\n                        \n                    \n                \n            \n            \n                \nwhoAmI(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('whoami')@UseGuards(AuthGuard)@ApiOkResponse({description: 'The user was successfully fetched'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  InternalServerErrorException,\n  NotFoundException,\n  Patch,\n  Post,\n  Session,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiCreatedResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from 'src/guards/auth.guard';\nimport { Serialize } from 'src/interceptors/serialize.interceptor';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './decorators/current-user.decorator';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { EmailVerificationDto } from './dtos/email-verification.dto';\nimport { PasswordResetDto } from './dtos/password-reset.dto';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { UserCredentialsDto } from './dtos/user-credentials.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { VerifyEmailDto } from './dtos/verify-email.dto';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiTags('users')\n@Serialize(UserDto)\n@Controller({\n  path: 'api/auth',\n  version: '1',\n})\nexport class UsersController {\n  constructor(\n    private authService: AuthService,\n    private userService: UsersService,\n  ) {}\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/send-email-verification')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The email verification email was sent successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to send email verification email',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while sending email verification email',\n  })\n  async sendEmailVerification(@Body() body: EmailVerificationDto) {\n    return this.authService\n      .sendEmailVerification(body.email, body.isRegistration)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException(\n              'Failed to send email verification email',\n            );\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while sending email verification email',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/send-password-reset-email')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset email was sent successfully',\n  })\n  @ApiBadRequestResponse({ description: 'Failed to send password reset email' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while sending password reset email',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async sendPasswordResetEmail(@Body() body: EmailVerificationDto) {\n    return this.authService\n      .sendPasswordResetEmail(body.email)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException(\n              'Failed to send password reset email',\n            );\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while sending password reset email',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/password-reset')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The password reset was successful',\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid token // Failed to update password of the user',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  async passwordReset(@Body() body: PasswordResetDto, @Session() session: any) {\n    session.userId = null;\n    return this.authService\n      .passwordReset(body.token, body.newPassword)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Invalid token') {\n              throw new BadRequestException('Invalid token');\n            } else {\n              throw new BadRequestException(\n                'Failed to update password of the user',\n              );\n            }\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while resetting password',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/register')\n  @ApiCreatedResponse({\n    description: 'The user was created successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid token | Email in use | Failed to create a user',\n  })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while creating the user',\n  })\n  async register(@Body() body: CreateUserDto, @Session() session: any) {\n    return this.authService\n      .register(body)\n      .then((user) => {\n        session.userId = user.id;\n        return user;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Invalid token') {\n              throw new BadRequestException('Invalid token');\n            } else if (err.response?.message === 'Email in use') {\n              throw new BadRequestException('Email in use');\n            } else {\n              throw new BadRequestException('Failed to create user');\n            }\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while creating the user',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'The user was successfully logged in',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  @ApiUnauthorizedResponse({ description: 'Incorrect credentials' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while logging in the user',\n  })\n  async signin(@Body() body: UserCredentialsDto, @Session() session: any) {\n    return this.authService\n      .signin(body.email, body.password)\n      .then((user) => {\n        session.userId = user.id;\n        return user;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 404:\n            throw new NotFoundException('User not found');\n          case 401:\n            throw new UnauthorizedException('Incorrect credentials');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while logging in the user',\n            );\n        }\n      });\n  }\n\n  @Patch('update')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The user was updated successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to update user',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while updating the user',\n  })\n  updateUser(@CurrentUser() user: User, @Body() body: UpdateUserDto) {\n    return this.userService\n      .update(user, body)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            throw new BadRequestException('Failed to update user');\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while updating the user',\n            );\n        }\n      });\n  }\n\n  @Patch('/email/verify')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({\n    description: 'The email was verified successfully',\n  })\n  @ApiBadRequestResponse({\n    description: 'Failed to verify email | Invalid token',\n  })\n  @ApiNotFoundResponse({ description: 'User not found' })\n  @ApiInternalServerErrorResponse({\n    description: 'Something went wrong while verifying the email',\n  })\n  verifyEmail(@CurrentUser() user: User, @Body() body: VerifyEmailDto) {\n    return this.authService\n      .verifyEmail(user, body.token)\n      .then((res) => {\n        return res;\n      })\n      .catch((err) => {\n        switch (err.response?.statusCode) {\n          case 400:\n            if (err.response?.message === 'Invalid token') {\n              throw new BadRequestException('Invalid token');\n            } else if (err.response?.message === 'Failed to verify user') {\n              throw new BadRequestException('Failed to verify email');\n            }\n          case 404:\n            throw new NotFoundException('User not found');\n          default:\n            throw new InternalServerErrorException(\n              'Something went wrong while verifying the email',\n            );\n        }\n      });\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Get('whoami')\n  @UseGuards(AuthGuard)\n  @ApiOkResponse({ description: 'The user was successfully fetched' })\n  whoAmI(@CurrentUser() user: User) {\n    return user;\n  }\n\n  // LAST TIME REVIEWED: 2022-04-09\n  @Post('/signout')\n  @HttpCode(200)\n  @ApiOkResponse({ description: 'The user was successfully logged out' })\n  signOut(@Session() session: any) {\n    session.userId = null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { CurrentUserMiddleware } from './middlewares/current-user.middleware';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, AuthService],\n  exports: [UsersService],\n})\nexport class UsersModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(CurrentUserMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStats()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { User, UserRole } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(User) private repo: Repository) {}\n\n  async create(user: CreateUserDto) {\n    try {\n      const newUser = this.repo.create(user);\n      const createdUser = await this.repo.save(newUser);\n\n      return createdUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to create a new user');\n    }\n  }\n\n  async findOne(id: number) {\n    const user = await this.repo.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  async find(email: string) {\n    const users = await this.repo.find({ email });\n\n    if (!users) {\n      throw new NotFoundException('Users not found');\n    }\n\n    return users;\n  }\n\n  async update(user: User, attrs: Partial) {\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (attrs.email && user.email !== attrs.email) {\n      user.is_email_verified = false;\n    }\n\n    Object.assign(user, attrs);\n\n    try {\n      const updatedUser = await this.repo.save(user);\n      return updatedUser;\n    } catch (err) {\n      throw new BadRequestException('Failed to update user');\n    }\n  }\n\n  async remove(id: number) {\n    const user = await this.findOne(id);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const removedUser = await this.repo.remove(user);\n\n    return removedUser;\n  }\n\n  async getStats() {\n    let stats = {\n      total: 0,\n      total_admin: 0,\n      total_customer: 0,\n      total_verified: 0,\n      total_unverified: 0,\n    };\n\n    try {\n      const users = await this.repo.find();\n\n      stats.total = users.length;\n\n      users.forEach((user) => {\n        user.is_email_verified && (stats.total_verified += 1);\n        !user.is_email_verified && (stats.total_unverified += 1);\n        user.role === UserRole.ADMIN && (stats.total_admin += 1);\n        user.role === UserRole.CUSTOMER && (stats.total_customer += 1);\n      });\n\n      return stats;\n    } catch (err) {\n      throw new BadRequestException('Failed to get users stats');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyEmailDto.html":{"url":"classes/VerifyEmailDto.html","title":"class - VerifyEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/verify-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'the valid jwt token which includes the email of the user', default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI'})@IsNotEmpty()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/verify-email.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJWT, IsNotEmpty } from 'class-validator';\n\nexport class VerifyEmailDto {\n  @ApiProperty({\n    type: String,\n    description: 'the valid jwt token which includes the email of the user',\n    default:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InlpbWthYm9zc0BnbWFpbC5jb20iLCJpYXQiOjE2NDgzMTIwMTQsImV4cCI6MTY0ODMxNTYxNH0.slrCrnE_1WKyrM5-IBu3gxnbymX5X_CzQwviNolBWeI',\n  })\n  @IsNotEmpty()\n  @IsJWT()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            cookieSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bookings/booking.entity.ts\n            \n            entity\n            Booking\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bookings/booking.entity.ts\n            \n            class\n            Booking\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/bookings/bookings.controller.ts\n            \n            controller\n            BookingsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/bookings/bookings.service.ts\n            \n            injectable\n            BookingsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/bookings/dtos/booking-bis.dto.ts\n            \n            class\n            BookingBisDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/bookings/dtos/booking.dto.ts\n            \n            class\n            BookingDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/bookings/dtos/create-booking.dto.ts\n            \n            class\n            CreateBookingDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bookings/dtos/get-bookings.dto.ts\n            \n            class\n            GetBookingsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bookings/dtos/update-booking-status.dto.ts\n            \n            class\n            UpdateBookingStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bookings/dtos/update-booking.dto.ts\n            \n            class\n            UpdateBookingDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bookings/interfaces/BookingCreatedEvent.ts\n            \n            interface\n            BookingEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cloudinary/cloudinary.controller.ts\n            \n            controller\n            CloudinaryController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cloudinary/dtos/remove-image.dto.ts\n            \n            class\n            RemoveImageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cloudinary/dtos/upload-image.dto.ts\n            \n            class\n            UploadImageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/flights/dtos/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/flights/dtos/get-flights.dto.ts\n            \n            class\n            GetFlightsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/flights/dtos/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/flights/flight.entity.ts\n            \n            entity\n            Flight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guards/admin.guard.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helpers/email.ts\n            \n            function\n            sendEmailWithNodemailer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializeInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            function\n            Serialize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/passengers/dtos/create-passenger.dto.ts\n            \n            class\n            CreatePassengerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/passengers/dtos/passenger.dto.ts\n            \n            class\n            PassengerDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/passengers/dtos/update-passenger.dto.ts\n            \n            class\n            UpdatePassengerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/passengers/passenger.entity.ts\n            \n            entity\n            Passenger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/passengers/passenger.entity.ts\n            \n            class\n            Passenger\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/passengers/passengers.controller.ts\n            \n            controller\n            PassengersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/passengers/passengers.service.ts\n            \n            injectable\n            PassengersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/seats/dtos/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/seats/dtos/seat.dto.ts\n            \n            class\n            SeatDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/seats/dtos/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/seat.entity.ts\n            \n            entity\n            Seat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/settings/dtos/update-settings.dto.ts\n            \n            class\n            UpdateSettingsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/settings/settings.controller.ts\n            \n            controller\n            SettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/settings/settings.service.ts\n            \n            injectable\n            SettingsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/constants/index.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/email-verification.dto.ts\n            \n            class\n            EmailVerificationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/password-reset.dto.ts\n            \n            class\n            PasswordResetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/user-credentials.dto.ts\n            \n            class\n            UserCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dtos/verify-email.dto.ts\n            \n            class\n            VerifyEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            injectable\n            CurrentUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/middlewares/current-user.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/event-emitter : ^1.1.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/cookie-session : ^2.0.44\n        \n            @types/nodemailer : ^6.4.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cloudinary : ^1.25.0\n        \n            cookie-session : ^2.0.0\n        \n            cross-env : ^7.0.3\n        \n            dotenv : ^16.0.0\n        \n            helmet : ^5.0.2\n        \n            jsonwebtoken : ^8.5.1\n        \n            node-json-db : ^1.5.0\n        \n            nodemailer : ^6.7.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BookingStatuses   (src/.../booking.entity.ts)\n                        \n                        \n                            BookingTypes   (src/.../booking.entity.ts)\n                        \n                        \n                            ClassTypes   (src/.../seat.entity.ts)\n                        \n                        \n                            ClassTypes   (src/.../create-seat.dto.ts)\n                        \n                        \n                            ClassTypes   (src/.../update-seat.dto.ts)\n                        \n                        \n                            DocumentTypes   (src/.../passenger.entity.ts)\n                        \n                        \n                            FlightStatuses   (src/.../flight.entity.ts)\n                        \n                        \n                            Genders   (src/.../passenger.entity.ts)\n                        \n                        \n                            SupportedLanguages   (src/.../update-settings.dto.ts)\n                        \n                        \n                            Themes   (src/.../update-settings.dto.ts)\n                        \n                        \n                            UserRole   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/bookings/booking.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        BookingStatuses\n                    \n                \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        BookingTypes\n                    \n                \n                        \n                            \n                                 FLIGHT\n                            \n                        \n                        \n                            \n                                Value : flight\n                            \n                        \n                        \n                            \n                                 HOTEL\n                            \n                        \n                        \n                            \n                                Value : hotel\n                            \n                        \n                        \n                            \n                                 RESTAURANT\n                            \n                        \n                        \n                            \n                                Value : restaurant\n                            \n                        \n            \n        \n\n    src/seats/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/seats/dtos/create-seat.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/seats/dtos/update-seat.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ClassTypes\n                    \n                \n                        \n                            \n                                 FIRST\n                            \n                        \n                        \n                            \n                                Value : first\n                            \n                        \n                        \n                            \n                                 BUSINESS\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 ECONOMY\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/passengers/passenger.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        DocumentTypes\n                    \n                \n                        \n                            \n                                 PASSPORT\n                            \n                        \n                        \n                            \n                                Value : passport\n                            \n                        \n                        \n                            \n                                 ID_CARD\n                            \n                        \n                        \n                            \n                                Value : id_card\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Genders\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n\n    src/flights/flight.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        FlightStatuses\n                    \n                \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 DELAYED\n                            \n                        \n                        \n                            \n                                Value : delayed\n                            \n                        \n                        \n                            \n                                 IN_AIR\n                            \n                        \n                        \n                            \n                                Value : in_air\n                            \n                        \n                        \n                            \n                                 EXPECTED\n                            \n                        \n                        \n                            \n                                Value : expected\n                            \n                        \n                        \n                            \n                                 DIVERTED\n                            \n                        \n                        \n                            \n                                Value : diverted\n                            \n                        \n                        \n                            \n                                 RECOVERY\n                            \n                        \n                        \n                            \n                                Value : recovery\n                            \n                        \n                        \n                            \n                                 LANDED\n                            \n                        \n                        \n                            \n                                Value : landed\n                            \n                        \n                        \n                            \n                                 ARRIVED\n                            \n                        \n                        \n                            \n                                Value : arrived\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n                        \n                            \n                                 NO_TAKEOFF_INFO\n                            \n                        \n                        \n                            \n                                Value : no_takeoff_info\n                            \n                        \n                        \n                            \n                                 PAST_FLIGHT\n                            \n                        \n                        \n                            \n                                Value : past_flight\n                            \n                        \n            \n        \n\n    src/settings/dtos/update-settings.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        SupportedLanguages\n                    \n                \n                        \n                            \n                                 ENGLISH\n                            \n                        \n                        \n                            \n                                Value : en\n                            \n                        \n                        \n                            \n                                 FRENCH\n                            \n                        \n                        \n                            \n                                Value : fr\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Themes\n                    \n                \n                        \n                            \n                                 LIGHT\n                            \n                        \n                        \n                            \n                                Value : light\n                            \n                        \n                        \n                            \n                                 DARK\n                            \n                        \n                        \n                            \n                                Value : dark\n                            \n                        \n            \n        \n\n    src/users/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : sysadmin\n                            \n                        \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : customer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            sendEmailWithNodemailer   (src/.../email.ts)\n                        \n                        \n                            Serialize   (src/.../serialize.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/helpers/email.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sendEmailWithNodemailer\n                        \n                    \n                \n            \n            \n                \nsendEmailWithNodemailer(emailData: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Serialize\n                        \n                    \n                \n            \n            \n                \nSerialize(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYVANIG BACKEND 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CloudinaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PassengersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_BookingsModule\n\n\n\ncluster_BookingsModule_exports\n\n\n\ncluster_BookingsModule_providers\n\n\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_PassengersModule\n\n\n\ncluster_PassengersModule_exports\n\n\n\ncluster_PassengersModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SettingsModule\n\n\n\ncluster_SettingsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nBookingsModule\n\nBookingsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingsModule->AppModule\n\n\n\n\n\nBookingsService \n\nBookingsService \n\nBookingsService  -->\n\nBookingsModule->BookingsService \n\n\n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nAppModule -->\n\nCloudinaryModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nBookingsModule -->\n\nFlightsModule->BookingsModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsModule -->\n\nFlightsModule->SeatsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nPassengersModule\n\nPassengersModule\n\nBookingsModule -->\n\nPassengersModule->BookingsModule\n\n\n\nAppModule -->\n\nPassengersModule->AppModule\n\n\n\n\n\nPassengersService \n\nPassengersService \n\nPassengersService  -->\n\nPassengersModule->PassengersService \n\n\n\nBookingsModule -->\n\nSeatsModule->BookingsModule\n\n\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSettingsModule\n\nSettingsModule\n\nAppModule -->\n\nSettingsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBookingsService\n\nBookingsService\n\nBookingsModule -->\n\nBookingsService->BookingsModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nPassengersService\n\nPassengersService\n\nPassengersModule -->\n\nPassengersService->PassengersModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSettingsService\n\nSettingsService\n\nSettingsModule -->\n\nSettingsService->SettingsModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Kaym Kassai\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cookieSession   (src/.../app.module.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../index.ts)\n                        \n                        \n                            scrypt   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie-session')\n                    \n                \n\n\n        \n    \n\n    src/users/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: never, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return request.currentUser;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/users/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.TOKEN_KEY,\n}\n                    \n                \n\n\n        \n    \n\n    src/users/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(_scrypt)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
